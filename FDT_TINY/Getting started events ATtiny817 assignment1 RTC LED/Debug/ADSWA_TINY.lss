
ADSWA_TINY.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803e00  00803e00  00001d59  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000af  00009c16  00001c16  00001caa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000fe  00803e00  00803e00  00001d59  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00001d59  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d8c  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 000002e0  00000000  00000000  00001dc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007280  00000000  00000000  000020a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001fb3  00000000  00000000  00009328  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002acd  00000000  00000000  0000b2db  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000668  00000000  00000000  0000dda8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000202d  00000000  00000000  0000e410  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003791  00000000  00000000  0001043d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000288  00000000  00000000  00013bce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	67 c0       	rjmp	.+206    	; 0xd0 <__ctors_end>
       2:	76 c0       	rjmp	.+236    	; 0xf0 <__bad_interrupt>
       4:	75 c0       	rjmp	.+234    	; 0xf0 <__bad_interrupt>
       6:	74 c0       	rjmp	.+232    	; 0xf0 <__bad_interrupt>
       8:	5a cd       	rjmp	.-1356   	; 0xfffffabe <__eeprom_end+0xff7efabe>
       a:	db cc       	rjmp	.-1610   	; 0xfffff9c2 <__eeprom_end+0xff7ef9c2>
       c:	79 cd       	rjmp	.-1294   	; 0xfffffb00 <__eeprom_end+0xff7efb00>
       e:	70 c0       	rjmp	.+224    	; 0xf0 <__bad_interrupt>
      10:	6f c0       	rjmp	.+222    	; 0xf0 <__bad_interrupt>
      12:	6e c0       	rjmp	.+220    	; 0xf0 <__bad_interrupt>
      14:	6d c0       	rjmp	.+218    	; 0xf0 <__bad_interrupt>
      16:	6c c0       	rjmp	.+216    	; 0xf0 <__bad_interrupt>
      18:	6b c0       	rjmp	.+214    	; 0xf0 <__bad_interrupt>
      1a:	6a c0       	rjmp	.+212    	; 0xf0 <__bad_interrupt>
      1c:	69 c0       	rjmp	.+210    	; 0xf0 <__bad_interrupt>
      1e:	68 c0       	rjmp	.+208    	; 0xf0 <__bad_interrupt>
      20:	67 c0       	rjmp	.+206    	; 0xf0 <__bad_interrupt>
      22:	66 c0       	rjmp	.+204    	; 0xf0 <__bad_interrupt>
      24:	65 c0       	rjmp	.+202    	; 0xf0 <__bad_interrupt>
      26:	64 c0       	rjmp	.+200    	; 0xf0 <__bad_interrupt>
      28:	63 c0       	rjmp	.+198    	; 0xf0 <__bad_interrupt>
      2a:	62 c0       	rjmp	.+196    	; 0xf0 <__bad_interrupt>
      2c:	0e cd       	rjmp	.-1508   	; 0xfffffa4a <__eeprom_end+0xff7efa4a>
      2e:	60 c0       	rjmp	.+192    	; 0xf0 <__bad_interrupt>
      30:	5f c0       	rjmp	.+190    	; 0xf0 <__bad_interrupt>
      32:	5e c0       	rjmp	.+188    	; 0xf0 <__bad_interrupt>
      34:	ed c0       	rjmp	.+474    	; 0x210 <asciiToHex+0x18>
      36:	ef c0       	rjmp	.+478    	; 0x216 <asciiToHex+0x1e>
      38:	f1 c0       	rjmp	.+482    	; 0x21c <asciiToHex+0x24>
      3a:	f3 c0       	rjmp	.+486    	; 0x222 <asciiToHex+0x2a>
      3c:	f5 c0       	rjmp	.+490    	; 0x228 <asciiToHex+0x30>
      3e:	f7 c0       	rjmp	.+494    	; 0x22e <asciiToHex+0x36>
      40:	f9 c0       	rjmp	.+498    	; 0x234 <asciiToHex+0x3c>
      42:	fb c0       	rjmp	.+502    	; 0x23a <asciiToHex+0x42>
      44:	fd c0       	rjmp	.+506    	; 0x240 <asciiToHex+0x48>
      46:	22 c1       	rjmp	.+580    	; 0x28c <asciiToHex+0x94>
      48:	0a c1       	rjmp	.+532    	; 0x25e <asciiToHex+0x66>
      4a:	0b c1       	rjmp	.+534    	; 0x262 <asciiToHex+0x6a>
      4c:	0c c1       	rjmp	.+536    	; 0x266 <asciiToHex+0x6e>
      4e:	0d c1       	rjmp	.+538    	; 0x26a <asciiToHex+0x72>
      50:	0e c1       	rjmp	.+540    	; 0x26e <asciiToHex+0x76>
      52:	0f c1       	rjmp	.+542    	; 0x272 <asciiToHex+0x7a>
      54:	10 c1       	rjmp	.+544    	; 0x276 <asciiToHex+0x7e>
      56:	12 c1       	rjmp	.+548    	; 0x27c <asciiToHex+0x84>
      58:	14 c1       	rjmp	.+552    	; 0x282 <asciiToHex+0x8a>
      5a:	25 c1       	rjmp	.+586    	; 0x2a6 <asciiHexToHex+0x18>
      5c:	27 c1       	rjmp	.+590    	; 0x2ac <asciiHexToHex+0x1e>
      5e:	29 c1       	rjmp	.+594    	; 0x2b2 <asciiHexToHex+0x24>
      60:	2b c1       	rjmp	.+598    	; 0x2b8 <asciiHexToHex+0x2a>
      62:	2d c1       	rjmp	.+602    	; 0x2be <asciiHexToHex+0x30>
      64:	2f c1       	rjmp	.+606    	; 0x2c4 <asciiHexToHex+0x36>
      66:	31 c1       	rjmp	.+610    	; 0x2ca <asciiHexToHex+0x3c>
      68:	33 c1       	rjmp	.+614    	; 0x2d0 <asciiHexToHex+0x42>
      6a:	35 c1       	rjmp	.+618    	; 0x2d6 <asciiHexToHex+0x48>
      6c:	49 c1       	rjmp	.+658    	; 0x300 <asciiHexToHex+0x72>
      6e:	48 c1       	rjmp	.+656    	; 0x300 <asciiHexToHex+0x72>
      70:	47 c1       	rjmp	.+654    	; 0x300 <asciiHexToHex+0x72>
      72:	46 c1       	rjmp	.+652    	; 0x300 <asciiHexToHex+0x72>
      74:	45 c1       	rjmp	.+650    	; 0x300 <asciiHexToHex+0x72>
      76:	44 c1       	rjmp	.+648    	; 0x300 <asciiHexToHex+0x72>
      78:	43 c1       	rjmp	.+646    	; 0x300 <asciiHexToHex+0x72>
      7a:	30 c1       	rjmp	.+608    	; 0x2dc <asciiHexToHex+0x4e>
      7c:	32 c1       	rjmp	.+612    	; 0x2e2 <asciiHexToHex+0x54>
      7e:	34 c1       	rjmp	.+616    	; 0x2e8 <asciiHexToHex+0x5a>
      80:	36 c1       	rjmp	.+620    	; 0x2ee <asciiHexToHex+0x60>
      82:	38 c1       	rjmp	.+624    	; 0x2f4 <asciiHexToHex+0x66>
      84:	3a c1       	rjmp	.+628    	; 0x2fa <asciiHexToHex+0x6c>
      86:	74 c1       	rjmp	.+744    	; 0x370 <asciiHexToHex+0xe2>
      88:	47 c1       	rjmp	.+654    	; 0x318 <asciiHexToHex+0x8a>
      8a:	48 c1       	rjmp	.+656    	; 0x31c <asciiHexToHex+0x8e>
      8c:	49 c1       	rjmp	.+658    	; 0x320 <asciiHexToHex+0x92>
      8e:	4a c1       	rjmp	.+660    	; 0x324 <asciiHexToHex+0x96>
      90:	4c c1       	rjmp	.+664    	; 0x32a <asciiHexToHex+0x9c>
      92:	4e c1       	rjmp	.+668    	; 0x330 <asciiHexToHex+0xa2>
      94:	50 c1       	rjmp	.+672    	; 0x336 <asciiHexToHex+0xa8>
      96:	52 c1       	rjmp	.+676    	; 0x33c <asciiHexToHex+0xae>
      98:	54 c1       	rjmp	.+680    	; 0x342 <asciiHexToHex+0xb4>
      9a:	65 c1       	rjmp	.+714    	; 0x366 <asciiHexToHex+0xd8>
      9c:	64 c1       	rjmp	.+712    	; 0x366 <asciiHexToHex+0xd8>
      9e:	63 c1       	rjmp	.+710    	; 0x366 <asciiHexToHex+0xd8>
      a0:	62 c1       	rjmp	.+708    	; 0x366 <asciiHexToHex+0xd8>
      a2:	61 c1       	rjmp	.+706    	; 0x366 <asciiHexToHex+0xd8>
      a4:	60 c1       	rjmp	.+704    	; 0x366 <asciiHexToHex+0xd8>
      a6:	5f c1       	rjmp	.+702    	; 0x366 <asciiHexToHex+0xd8>
      a8:	61 c1       	rjmp	.+706    	; 0x36c <asciiHexToHex+0xde>
      aa:	4e c1       	rjmp	.+668    	; 0x348 <asciiHexToHex+0xba>
      ac:	50 c1       	rjmp	.+672    	; 0x34e <asciiHexToHex+0xc0>
      ae:	52 c1       	rjmp	.+676    	; 0x354 <asciiHexToHex+0xc6>
      b0:	54 c1       	rjmp	.+680    	; 0x35a <asciiHexToHex+0xcc>
      b2:	56 c1       	rjmp	.+684    	; 0x360 <asciiHexToHex+0xd2>
      b4:	b8 cb       	rjmp	.-2192   	; 0xfffff826 <__eeprom_end+0xff7ef826>
      b6:	c3 cb       	rjmp	.-2170   	; 0xfffff83e <__eeprom_end+0xff7ef83e>
      b8:	cf cb       	rjmp	.-2146   	; 0xfffff858 <__eeprom_end+0xff7ef858>
      ba:	db cb       	rjmp	.-2122   	; 0xfffff872 <__eeprom_end+0xff7ef872>
      bc:	e4 cb       	rjmp	.-2104   	; 0xfffff886 <__eeprom_end+0xff7ef886>
      be:	ef cb       	rjmp	.-2082   	; 0xfffff89e <__eeprom_end+0xff7ef89e>
      c0:	f9 cb       	rjmp	.-2062   	; 0xfffff8b4 <__eeprom_end+0xff7ef8b4>
      c2:	00 cc       	rjmp	.-2048   	; 0xfffff8c4 <__eeprom_end+0xff7ef8c4>
      c4:	10 cc       	rjmp	.-2016   	; 0xfffff8e6 <__eeprom_end+0xff7ef8e6>
      c6:	1c cc       	rjmp	.-1992   	; 0xfffff900 <__eeprom_end+0xff7ef900>
      c8:	2c cc       	rjmp	.-1960   	; 0xfffff922 <__eeprom_end+0xff7ef922>
      ca:	3c cc       	rjmp	.-1928   	; 0xfffff944 <__eeprom_end+0xff7ef944>
      cc:	4c cc       	rjmp	.-1896   	; 0xfffff966 <__eeprom_end+0xff7ef966>
      ce:	5c cc       	rjmp	.-1864   	; 0xfffff988 <__eeprom_end+0xff7ef988>

000000d0 <__ctors_end>:
      d0:	11 24       	eor	r1, r1
      d2:	1f be       	out	0x3f, r1	; 63
      d4:	cf ef       	ldi	r28, 0xFF	; 255
      d6:	cd bf       	out	0x3d, r28	; 61
      d8:	df e3       	ldi	r29, 0x3F	; 63
      da:	de bf       	out	0x3e, r29	; 62

000000dc <__do_clear_bss>:
      dc:	2e e3       	ldi	r18, 0x3E	; 62
      de:	a0 e0       	ldi	r26, 0x00	; 0
      e0:	be e3       	ldi	r27, 0x3E	; 62
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <.do_clear_bss_start>

000000e4 <.do_clear_bss_loop>:
      e4:	1d 92       	st	X+, r1

000000e6 <.do_clear_bss_start>:
      e6:	ae 3f       	cpi	r26, 0xFE	; 254
      e8:	b2 07       	cpc	r27, r18
      ea:	e1 f7       	brne	.-8      	; 0xe4 <.do_clear_bss_loop>
      ec:	26 db       	rcall	.-2484   	; 0xfffff73a <__eeprom_end+0xff7ef73a>
      ee:	91 cd       	rjmp	.-1246   	; 0xfffffc12 <__eeprom_end+0xff7efc12>

000000f0 <__bad_interrupt>:
      f0:	87 cf       	rjmp	.-242    	; 0x0 <__vectors>

000000f2 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
	system_init();
      f2:	5c dd       	rcall	.-1352   	; 0xfffffbac <__eeprom_end+0xff7efbac>
      f4:	08 95       	ret

000000f6 <getBatt>:
 }

 /***********************************************************************
 *    LCD Functions
 ***********************************************************************/
void LCDclear (void){
      f6:	06 98       	cbi	0x00, 6	; 0
      f8:	e6 e1       	ldi	r30, 0x16	; 22
      fa:	f4 e0       	ldi	r31, 0x04	; 4
      fc:	80 81       	ld	r24, Z
      fe:	87 7f       	andi	r24, 0xF7	; 247
     100:	80 83       	st	Z, r24
     102:	80 e2       	ldi	r24, 0x20	; 32
     104:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7000a0>
     108:	82 e0       	ldi	r24, 0x02	; 2
     10a:	80 93 a1 00 	sts	0x00A1, r24	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
     10e:	e0 e0       	ldi	r30, 0x00	; 0
     110:	f6 e0       	ldi	r31, 0x06	; 6
     112:	80 81       	ld	r24, Z
     114:	84 60       	ori	r24, 0x04	; 4
     116:	80 83       	st	Z, r24
     118:	a1 e0       	ldi	r26, 0x01	; 1
     11a:	b6 e0       	ldi	r27, 0x06	; 6
     11c:	8c 91       	ld	r24, X
     11e:	86 60       	ori	r24, 0x06	; 6
     120:	8c 93       	st	X, r24
     122:	87 e2       	ldi	r24, 0x27	; 39
     124:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <__TEXT_REGION_LENGTH__+0x700602>
     128:	88 ed       	ldi	r24, 0xD8	; 216
     12a:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <__TEXT_REGION_LENGTH__+0x700603>
     12e:	10 92 04 06 	sts	0x0604, r1	; 0x800604 <__TEXT_REGION_LENGTH__+0x700604>
     132:	10 92 09 06 	sts	0x0609, r1	; 0x800609 <__TEXT_REGION_LENGTH__+0x700609>
     136:	10 92 0a 06 	sts	0x060A, r1	; 0x80060a <__TEXT_REGION_LENGTH__+0x70060a>
     13a:	86 e0       	ldi	r24, 0x06	; 6
     13c:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x700605>
     140:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x700606>
     144:	ab e0       	ldi	r26, 0x0B	; 11
     146:	b6 e0       	ldi	r27, 0x06	; 6
     148:	8c 91       	ld	r24, X
     14a:	81 60       	ori	r24, 0x01	; 1
     14c:	8c 93       	st	X, r24
     14e:	80 81       	ld	r24, Z
     150:	81 60       	ori	r24, 0x01	; 1
     152:	80 83       	st	Z, r24
     154:	81 e0       	ldi	r24, 0x01	; 1
     156:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     15a:	eb e0       	ldi	r30, 0x0B	; 11
     15c:	f6 e0       	ldi	r31, 0x06	; 6
     15e:	80 81       	ld	r24, Z
     160:	80 ff       	sbrs	r24, 0
     162:	fd cf       	rjmp	.-6      	; 0x15e <getBatt+0x68>
     164:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
     168:	80 91 10 06 	lds	r24, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <__TEXT_REGION_LENGTH__+0x700608>
     172:	eb e0       	ldi	r30, 0x0B	; 11
     174:	f6 e0       	ldi	r31, 0x06	; 6
     176:	80 81       	ld	r24, Z
     178:	80 ff       	sbrs	r24, 0
     17a:	fd cf       	rjmp	.-6      	; 0x176 <getBatt+0x80>
     17c:	80 91 11 06 	lds	r24, 0x0611	; 0x800611 <__TEXT_REGION_LENGTH__+0x700611>
     180:	20 91 10 06 	lds	r18, 0x0610	; 0x800610 <__TEXT_REGION_LENGTH__+0x700610>
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	98 2f       	mov	r25, r24
     188:	88 27       	eor	r24, r24
     18a:	82 0f       	add	r24, r18
     18c:	91 1d       	adc	r25, r1
     18e:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
     192:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
     196:	08 2e       	mov	r0, r24
     198:	89 2f       	mov	r24, r25
     19a:	00 0c       	add	r0, r0
     19c:	88 1f       	adc	r24, r24
     19e:	99 0b       	sbc	r25, r25
     1a0:	00 0c       	add	r0, r0
     1a2:	88 1f       	adc	r24, r24
     1a4:	99 1f       	adc	r25, r25
     1a6:	08 95       	ret

000001a8 <searchRcvBuffuBlox>:
     1a8:	21 e0       	ldi	r18, 0x01	; 1
     1aa:	3e e3       	ldi	r19, 0x3E	; 62
     1ac:	20 93 fc 3e 	sts	0x3EFC, r18	; 0x803efc <GPSSearchPtr>
     1b0:	30 93 fd 3e 	sts	0x3EFD, r19	; 0x803efd <GPSSearchPtr+0x1>
     1b4:	a0 91 f9 3e 	lds	r26, 0x3EF9	; 0x803ef9 <p_GPSrcvData>
     1b8:	b0 91 fa 3e 	lds	r27, 0x3EFA	; 0x803efa <p_GPSrcvData+0x1>
     1bc:	15 97       	sbiw	r26, 0x05	; 5
     1be:	e0 91 fc 3e 	lds	r30, 0x3EFC	; 0x803efc <GPSSearchPtr>
     1c2:	f0 91 fd 3e 	lds	r31, 0x3EFD	; 0x803efd <GPSSearchPtr+0x1>
     1c6:	9f 01       	movw	r18, r30
     1c8:	2f 5f       	subi	r18, 0xFF	; 255
     1ca:	3f 4f       	sbci	r19, 0xFF	; 255
     1cc:	20 93 fc 3e 	sts	0x3EFC, r18	; 0x803efc <GPSSearchPtr>
     1d0:	30 93 fd 3e 	sts	0x3EFD, r19	; 0x803efd <GPSSearchPtr+0x1>
     1d4:	91 81       	ldd	r25, Z+1	; 0x01
     1d6:	98 13       	cpse	r25, r24
     1d8:	06 c0       	rjmp	.+12     	; 0x1e6 <searchRcvBuffuBlox+0x3e>
     1da:	92 81       	ldd	r25, Z+2	; 0x02
     1dc:	96 13       	cpse	r25, r22
     1de:	03 c0       	rjmp	.+6      	; 0x1e6 <searchRcvBuffuBlox+0x3e>
     1e0:	93 81       	ldd	r25, Z+3	; 0x03
     1e2:	94 17       	cp	r25, r20
     1e4:	31 f0       	breq	.+12     	; 0x1f2 <searchRcvBuffuBlox+0x4a>
     1e6:	2a 17       	cp	r18, r26
     1e8:	3b 07       	cpc	r19, r27
     1ea:	48 f3       	brcs	.-46     	; 0x1be <searchRcvBuffuBlox+0x16>
     1ec:	8a e9       	ldi	r24, 0x9A	; 154
     1ee:	92 e0       	ldi	r25, 0x02	; 2
     1f0:	08 95       	ret
     1f2:	80 e0       	ldi	r24, 0x00	; 0
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	08 95       	ret

000001f8 <asciiToHex>:
     1f8:	e8 2f       	mov	r30, r24
     1fa:	86 2f       	mov	r24, r22
     1fc:	90 e0       	ldi	r25, 0x00	; 0
     1fe:	c1 97       	sbiw	r24, 0x31	; 49
     200:	89 30       	cpi	r24, 0x09	; 9
     202:	91 05       	cpc	r25, r1
     204:	00 f5       	brcc	.+64     	; 0x246 <asciiToHex+0x4e>
     206:	86 5e       	subi	r24, 0xE6	; 230
     208:	9f 4f       	sbci	r25, 0xFF	; 255
     20a:	8f 93       	push	r24
     20c:	9f 93       	push	r25
     20e:	08 95       	ret
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	1a c0       	rjmp	.+52     	; 0x24a <asciiToHex+0x52>
     216:	82 e0       	ldi	r24, 0x02	; 2
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	17 c0       	rjmp	.+46     	; 0x24a <asciiToHex+0x52>
     21c:	83 e0       	ldi	r24, 0x03	; 3
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	14 c0       	rjmp	.+40     	; 0x24a <asciiToHex+0x52>
     222:	84 e0       	ldi	r24, 0x04	; 4
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	11 c0       	rjmp	.+34     	; 0x24a <asciiToHex+0x52>
     228:	85 e0       	ldi	r24, 0x05	; 5
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	0e c0       	rjmp	.+28     	; 0x24a <asciiToHex+0x52>
     22e:	86 e0       	ldi	r24, 0x06	; 6
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	0b c0       	rjmp	.+22     	; 0x24a <asciiToHex+0x52>
     234:	87 e0       	ldi	r24, 0x07	; 7
     236:	90 e0       	ldi	r25, 0x00	; 0
     238:	08 c0       	rjmp	.+16     	; 0x24a <asciiToHex+0x52>
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	05 c0       	rjmp	.+10     	; 0x24a <asciiToHex+0x52>
     240:	89 e0       	ldi	r24, 0x09	; 9
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	02 c0       	rjmp	.+4      	; 0x24a <asciiToHex+0x52>
     246:	80 e0       	ldi	r24, 0x00	; 0
     248:	90 e0       	ldi	r25, 0x00	; 0
     24a:	4e 2f       	mov	r20, r30
     24c:	50 e0       	ldi	r21, 0x00	; 0
     24e:	fa 01       	movw	r30, r20
     250:	f0 97       	sbiw	r30, 0x30	; 48
     252:	ea 30       	cpi	r30, 0x0A	; 10
     254:	f1 05       	cpc	r31, r1
     256:	c0 f4       	brcc	.+48     	; 0x288 <asciiToHex+0x90>
     258:	ed 5d       	subi	r30, 0xDD	; 221
     25a:	ff 4f       	sbci	r31, 0xFF	; 255
     25c:	09 94       	ijmp
     25e:	0a 96       	adiw	r24, 0x0a	; 10
     260:	08 95       	ret
     262:	44 96       	adiw	r24, 0x14	; 20
     264:	08 95       	ret
     266:	4e 96       	adiw	r24, 0x1e	; 30
     268:	08 95       	ret
     26a:	88 96       	adiw	r24, 0x28	; 40
     26c:	08 95       	ret
     26e:	c2 96       	adiw	r24, 0x32	; 50
     270:	08 95       	ret
     272:	cc 96       	adiw	r24, 0x3c	; 60
     274:	08 95       	ret
     276:	8a 5b       	subi	r24, 0xBA	; 186
     278:	9f 4f       	sbci	r25, 0xFF	; 255
     27a:	08 95       	ret
     27c:	80 5b       	subi	r24, 0xB0	; 176
     27e:	9f 4f       	sbci	r25, 0xFF	; 255
     280:	08 95       	ret
     282:	86 5a       	subi	r24, 0xA6	; 166
     284:	9f 4f       	sbci	r25, 0xFF	; 255
     286:	08 95       	ret
     288:	80 e0       	ldi	r24, 0x00	; 0
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	08 95       	ret

0000028e <asciiHexToHex>:
     28e:	e8 2f       	mov	r30, r24
     290:	86 2f       	mov	r24, r22
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	c1 97       	sbiw	r24, 0x31	; 49
     296:	86 31       	cpi	r24, 0x16	; 22
     298:	91 05       	cpc	r25, r1
     29a:	90 f5       	brcc	.+100    	; 0x300 <asciiHexToHex+0x72>
     29c:	83 5d       	subi	r24, 0xD3	; 211
     29e:	9f 4f       	sbci	r25, 0xFF	; 255
     2a0:	8f 93       	push	r24
     2a2:	9f 93       	push	r25
     2a4:	08 95       	ret
     2a6:	81 e0       	ldi	r24, 0x01	; 1
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	2c c0       	rjmp	.+88     	; 0x304 <asciiHexToHex+0x76>
     2ac:	82 e0       	ldi	r24, 0x02	; 2
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	29 c0       	rjmp	.+82     	; 0x304 <asciiHexToHex+0x76>
     2b2:	83 e0       	ldi	r24, 0x03	; 3
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	26 c0       	rjmp	.+76     	; 0x304 <asciiHexToHex+0x76>
     2b8:	84 e0       	ldi	r24, 0x04	; 4
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	23 c0       	rjmp	.+70     	; 0x304 <asciiHexToHex+0x76>
     2be:	85 e0       	ldi	r24, 0x05	; 5
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	20 c0       	rjmp	.+64     	; 0x304 <asciiHexToHex+0x76>
     2c4:	86 e0       	ldi	r24, 0x06	; 6
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	1d c0       	rjmp	.+58     	; 0x304 <asciiHexToHex+0x76>
     2ca:	87 e0       	ldi	r24, 0x07	; 7
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	1a c0       	rjmp	.+52     	; 0x304 <asciiHexToHex+0x76>
     2d0:	88 e0       	ldi	r24, 0x08	; 8
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	17 c0       	rjmp	.+46     	; 0x304 <asciiHexToHex+0x76>
     2d6:	89 e0       	ldi	r24, 0x09	; 9
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	14 c0       	rjmp	.+40     	; 0x304 <asciiHexToHex+0x76>
     2dc:	8a e0       	ldi	r24, 0x0A	; 10
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	11 c0       	rjmp	.+34     	; 0x304 <asciiHexToHex+0x76>
     2e2:	8b e0       	ldi	r24, 0x0B	; 11
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	0e c0       	rjmp	.+28     	; 0x304 <asciiHexToHex+0x76>
     2e8:	8c e0       	ldi	r24, 0x0C	; 12
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	0b c0       	rjmp	.+22     	; 0x304 <asciiHexToHex+0x76>
     2ee:	8d e0       	ldi	r24, 0x0D	; 13
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	08 c0       	rjmp	.+16     	; 0x304 <asciiHexToHex+0x76>
     2f4:	8e e0       	ldi	r24, 0x0E	; 14
     2f6:	90 e0       	ldi	r25, 0x00	; 0
     2f8:	05 c0       	rjmp	.+10     	; 0x304 <asciiHexToHex+0x76>
     2fa:	8f e0       	ldi	r24, 0x0F	; 15
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	02 c0       	rjmp	.+4      	; 0x304 <asciiHexToHex+0x76>
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	4e 2f       	mov	r20, r30
     306:	50 e0       	ldi	r21, 0x00	; 0
     308:	fa 01       	movw	r30, r20
     30a:	f0 97       	sbiw	r30, 0x30	; 48
     30c:	e7 31       	cpi	r30, 0x17	; 23
     30e:	f1 05       	cpc	r31, r1
     310:	50 f5       	brcc	.+84     	; 0x366 <asciiHexToHex+0xd8>
     312:	ed 5b       	subi	r30, 0xBD	; 189
     314:	ff 4f       	sbci	r31, 0xFF	; 255
     316:	09 94       	ijmp
     318:	40 96       	adiw	r24, 0x10	; 16
     31a:	08 95       	ret
     31c:	80 96       	adiw	r24, 0x20	; 32
     31e:	08 95       	ret
     320:	c0 96       	adiw	r24, 0x30	; 48
     322:	08 95       	ret
     324:	80 5c       	subi	r24, 0xC0	; 192
     326:	9f 4f       	sbci	r25, 0xFF	; 255
     328:	08 95       	ret
     32a:	80 5b       	subi	r24, 0xB0	; 176
     32c:	9f 4f       	sbci	r25, 0xFF	; 255
     32e:	08 95       	ret
     330:	80 5a       	subi	r24, 0xA0	; 160
     332:	9f 4f       	sbci	r25, 0xFF	; 255
     334:	08 95       	ret
     336:	80 59       	subi	r24, 0x90	; 144
     338:	9f 4f       	sbci	r25, 0xFF	; 255
     33a:	08 95       	ret
     33c:	80 58       	subi	r24, 0x80	; 128
     33e:	9f 4f       	sbci	r25, 0xFF	; 255
     340:	08 95       	ret
     342:	80 57       	subi	r24, 0x70	; 112
     344:	9f 4f       	sbci	r25, 0xFF	; 255
     346:	08 95       	ret
     348:	80 eb       	ldi	r24, 0xB0	; 176
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	08 95       	ret
     34e:	80 ec       	ldi	r24, 0xC0	; 192
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	08 95       	ret
     354:	80 ed       	ldi	r24, 0xD0	; 208
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	08 95       	ret
     35a:	80 ee       	ldi	r24, 0xE0	; 224
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	08 95       	ret
     360:	80 ef       	ldi	r24, 0xF0	; 240
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	08 95       	ret
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	08 95       	ret
     36c:	80 ea       	ldi	r24, 0xA0	; 160
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	08 95       	ret

00000372 <delay_ms>:
     372:	ab 01       	movw	r20, r22
     374:	bc 01       	movw	r22, r24
     376:	41 15       	cp	r20, r1
     378:	51 05       	cpc	r21, r1
     37a:	61 05       	cpc	r22, r1
     37c:	71 05       	cpc	r23, r1
     37e:	61 f4       	brne	.+24     	; 0x398 <delay_ms+0x26>
     380:	08 95       	ret
     382:	00 00       	nop
     384:	01 96       	adiw	r24, 0x01	; 1
     386:	8a 39       	cpi	r24, 0x9A	; 154
     388:	21 e0       	ldi	r18, 0x01	; 1
     38a:	92 07       	cpc	r25, r18
     38c:	d1 f7       	brne	.-12     	; 0x382 <delay_ms+0x10>
     38e:	41 50       	subi	r20, 0x01	; 1
     390:	51 09       	sbc	r21, r1
     392:	61 09       	sbc	r22, r1
     394:	71 09       	sbc	r23, r1
     396:	19 f0       	breq	.+6      	; 0x39e <delay_ms+0x2c>
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	f2 cf       	rjmp	.-28     	; 0x382 <delay_ms+0x10>
     39e:	08 95       	ret

000003a0 <redBlink>:
     3a0:	cf 93       	push	r28
     3a2:	c8 2f       	mov	r28, r24
     3a4:	42 9a       	sbi	0x08, 2	; 8
     3a6:	88 23       	and	r24, r24
     3a8:	71 f0       	breq	.+28     	; 0x3c6 <redBlink+0x26>
     3aa:	4a 98       	cbi	0x09, 2	; 9
     3ac:	6a e0       	ldi	r22, 0x0A	; 10
     3ae:	70 e0       	ldi	r23, 0x00	; 0
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	de df       	rcall	.-68     	; 0x372 <delay_ms>
     3b6:	4a 9a       	sbi	0x09, 2	; 9
     3b8:	62 e3       	ldi	r22, 0x32	; 50
     3ba:	70 e0       	ldi	r23, 0x00	; 0
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	d8 df       	rcall	.-80     	; 0x372 <delay_ms>
     3c2:	c1 50       	subi	r28, 0x01	; 1
     3c4:	91 f7       	brne	.-28     	; 0x3aa <redBlink+0xa>
     3c6:	42 98       	cbi	0x08, 2	; 8
     3c8:	e2 e5       	ldi	r30, 0x52	; 82
     3ca:	f4 e0       	ldi	r31, 0x04	; 4
     3cc:	80 81       	ld	r24, Z
     3ce:	88 60       	ori	r24, 0x08	; 8
     3d0:	80 83       	st	Z, r24
     3d2:	cf 91       	pop	r28
     3d4:	08 95       	ret

000003d6 <redBlinkLong>:
     3d6:	cf 93       	push	r28
     3d8:	c8 2f       	mov	r28, r24
     3da:	42 9a       	sbi	0x08, 2	; 8
     3dc:	88 23       	and	r24, r24
     3de:	71 f0       	breq	.+28     	; 0x3fc <redBlinkLong+0x26>
     3e0:	4a 98       	cbi	0x09, 2	; 9
     3e2:	6c e2       	ldi	r22, 0x2C	; 44
     3e4:	71 e0       	ldi	r23, 0x01	; 1
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	c3 df       	rcall	.-122    	; 0x372 <delay_ms>
     3ec:	4a 9a       	sbi	0x09, 2	; 9
     3ee:	62 e3       	ldi	r22, 0x32	; 50
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	80 e0       	ldi	r24, 0x00	; 0
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	bd df       	rcall	.-134    	; 0x372 <delay_ms>
     3f8:	c1 50       	subi	r28, 0x01	; 1
     3fa:	91 f7       	brne	.-28     	; 0x3e0 <redBlinkLong+0xa>
     3fc:	42 98       	cbi	0x08, 2	; 8
     3fe:	e2 e5       	ldi	r30, 0x52	; 82
     400:	f4 e0       	ldi	r31, 0x04	; 4
     402:	80 81       	ld	r24, Z
     404:	88 60       	ori	r24, 0x08	; 8
     406:	80 83       	st	Z, r24
     408:	cf 91       	pop	r28
     40a:	08 95       	ret

0000040c <myDelay_hus>:
     40c:	ab 01       	movw	r20, r22
     40e:	bc 01       	movw	r22, r24
     410:	41 15       	cp	r20, r1
     412:	51 05       	cpc	r21, r1
     414:	61 05       	cpc	r22, r1
     416:	71 05       	cpc	r23, r1
     418:	59 f4       	brne	.+22     	; 0x430 <myDelay_hus+0x24>
     41a:	08 95       	ret
     41c:	00 00       	nop
     41e:	01 96       	adiw	r24, 0x01	; 1
     420:	8e 32       	cpi	r24, 0x2E	; 46
     422:	91 05       	cpc	r25, r1
     424:	d9 f7       	brne	.-10     	; 0x41c <myDelay_hus+0x10>
     426:	41 50       	subi	r20, 0x01	; 1
     428:	51 09       	sbc	r21, r1
     42a:	61 09       	sbc	r22, r1
     42c:	71 09       	sbc	r23, r1
     42e:	19 f0       	breq	.+6      	; 0x436 <myDelay_hus+0x2a>
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	f3 cf       	rjmp	.-26     	; 0x41c <myDelay_hus+0x10>
     436:	08 95       	ret

00000438 <usart_put_string>:
     438:	66 23       	and	r22, r22
     43a:	71 f0       	breq	.+28     	; 0x458 <usart_put_string+0x20>
     43c:	dc 01       	movw	r26, r24
     43e:	9c 01       	movw	r18, r24
     440:	26 0f       	add	r18, r22
     442:	31 1d       	adc	r19, r1
     444:	e0 e0       	ldi	r30, 0x00	; 0
     446:	f8 e0       	ldi	r31, 0x08	; 8
     448:	94 81       	ldd	r25, Z+4	; 0x04
     44a:	95 ff       	sbrs	r25, 5
     44c:	fd cf       	rjmp	.-6      	; 0x448 <usart_put_string+0x10>
     44e:	9d 91       	ld	r25, X+
     450:	92 83       	std	Z+2, r25	; 0x02
     452:	a2 17       	cp	r26, r18
     454:	b3 07       	cpc	r27, r19
     456:	c1 f7       	brne	.-16     	; 0x448 <usart_put_string+0x10>
     458:	08 95       	ret

0000045a <initGPSuBlox>:
     45a:	cf 93       	push	r28
     45c:	df 93       	push	r29
     45e:	cd b7       	in	r28, 0x3d	; 61
     460:	de b7       	in	r29, 0x3e	; 62
     462:	c1 59       	subi	r28, 0x91	; 145
     464:	d1 09       	sbc	r29, r1
     466:	cd bf       	out	0x3d, r28	; 61
     468:	de bf       	out	0x3e, r29	; 62
     46a:	68 ee       	ldi	r22, 0xE8	; 232
     46c:	73 e0       	ldi	r23, 0x03	; 3
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	7f df       	rcall	.-258    	; 0x372 <delay_ms>
     474:	8d e1       	ldi	r24, 0x1D	; 29
     476:	e6 e1       	ldi	r30, 0x16	; 22
     478:	fc e9       	ldi	r31, 0x9C	; 156
     47a:	de 01       	movw	r26, r28
     47c:	11 96       	adiw	r26, 0x01	; 1
     47e:	01 90       	ld	r0, Z+
     480:	0d 92       	st	X+, r0
     482:	8a 95       	dec	r24
     484:	e1 f7       	brne	.-8      	; 0x47e <initGPSuBlox+0x24>
     486:	6d e1       	ldi	r22, 0x1D	; 29
     488:	ce 01       	movw	r24, r28
     48a:	01 96       	adiw	r24, 0x01	; 1
     48c:	d5 df       	rcall	.-86     	; 0x438 <usart_put_string>
     48e:	8d e1       	ldi	r24, 0x1D	; 29
     490:	e3 e3       	ldi	r30, 0x33	; 51
     492:	fc e9       	ldi	r31, 0x9C	; 156
     494:	de 01       	movw	r26, r28
     496:	5e 96       	adiw	r26, 0x1e	; 30
     498:	01 90       	ld	r0, Z+
     49a:	0d 92       	st	X+, r0
     49c:	8a 95       	dec	r24
     49e:	e1 f7       	brne	.-8      	; 0x498 <initGPSuBlox+0x3e>
     4a0:	6d e1       	ldi	r22, 0x1D	; 29
     4a2:	ce 01       	movw	r24, r28
     4a4:	4e 96       	adiw	r24, 0x1e	; 30
     4a6:	c8 df       	rcall	.-112    	; 0x438 <usart_put_string>
     4a8:	8d e1       	ldi	r24, 0x1D	; 29
     4aa:	e0 e5       	ldi	r30, 0x50	; 80
     4ac:	fc e9       	ldi	r31, 0x9C	; 156
     4ae:	de 01       	movw	r26, r28
     4b0:	db 96       	adiw	r26, 0x3b	; 59
     4b2:	01 90       	ld	r0, Z+
     4b4:	0d 92       	st	X+, r0
     4b6:	8a 95       	dec	r24
     4b8:	e1 f7       	brne	.-8      	; 0x4b2 <initGPSuBlox+0x58>
     4ba:	6d e1       	ldi	r22, 0x1D	; 29
     4bc:	ce 01       	movw	r24, r28
     4be:	cb 96       	adiw	r24, 0x3b	; 59
     4c0:	bb df       	rcall	.-138    	; 0x438 <usart_put_string>
     4c2:	8d e1       	ldi	r24, 0x1D	; 29
     4c4:	ed e6       	ldi	r30, 0x6D	; 109
     4c6:	fc e9       	ldi	r31, 0x9C	; 156
     4c8:	de 01       	movw	r26, r28
     4ca:	a8 5a       	subi	r26, 0xA8	; 168
     4cc:	bf 4f       	sbci	r27, 0xFF	; 255
     4ce:	01 90       	ld	r0, Z+
     4d0:	0d 92       	st	X+, r0
     4d2:	8a 95       	dec	r24
     4d4:	e1 f7       	brne	.-8      	; 0x4ce <initGPSuBlox+0x74>
     4d6:	6d e1       	ldi	r22, 0x1D	; 29
     4d8:	ce 01       	movw	r24, r28
     4da:	88 5a       	subi	r24, 0xA8	; 168
     4dc:	9f 4f       	sbci	r25, 0xFF	; 255
     4de:	ac df       	rcall	.-168    	; 0x438 <usart_put_string>
     4e0:	8d e1       	ldi	r24, 0x1D	; 29
     4e2:	ea e8       	ldi	r30, 0x8A	; 138
     4e4:	fc e9       	ldi	r31, 0x9C	; 156
     4e6:	de 01       	movw	r26, r28
     4e8:	ab 58       	subi	r26, 0x8B	; 139
     4ea:	bf 4f       	sbci	r27, 0xFF	; 255
     4ec:	01 90       	ld	r0, Z+
     4ee:	0d 92       	st	X+, r0
     4f0:	8a 95       	dec	r24
     4f2:	e1 f7       	brne	.-8      	; 0x4ec <initGPSuBlox+0x92>
     4f4:	6d e1       	ldi	r22, 0x1D	; 29
     4f6:	ce 01       	movw	r24, r28
     4f8:	8b 58       	subi	r24, 0x8B	; 139
     4fa:	9f 4f       	sbci	r25, 0xFF	; 255
     4fc:	9d df       	rcall	.-198    	; 0x438 <usart_put_string>
     4fe:	cf 56       	subi	r28, 0x6F	; 111
     500:	df 4f       	sbci	r29, 0xFF	; 255
     502:	cd bf       	out	0x3d, r28	; 61
     504:	de bf       	out	0x3e, r29	; 62
     506:	df 91       	pop	r29
     508:	cf 91       	pop	r28
     50a:	08 95       	ret

0000050c <clrRx>:
/***********************************************************************
* Clear Rx Buff and initialize the pointer
***********************************************************************/
void clrRx (void){
  int i;
	p_GPSrcvData = g_GPSrcv_buffer;
     50c:	82 e0       	ldi	r24, 0x02	; 2
     50e:	9e e3       	ldi	r25, 0x3E	; 62
     510:	80 93 f9 3e 	sts	0x3EF9, r24	; 0x803ef9 <p_GPSrcvData>
     514:	90 93 fa 3e 	sts	0x3EFA, r25	; 0x803efa <p_GPSrcvData+0x1>
   for(i=0;i<GPS_BUFFER_SIZE;i++){
     518:	80 e0       	ldi	r24, 0x00	; 0
     51a:	90 e0       	ldi	r25, 0x00	; 0
     p_GPSrcvData[i]='X';
     51c:	28 e5       	ldi	r18, 0x58	; 88
     51e:	e0 91 f9 3e 	lds	r30, 0x3EF9	; 0x803ef9 <p_GPSrcvData>
     522:	f0 91 fa 3e 	lds	r31, 0x3EFA	; 0x803efa <p_GPSrcvData+0x1>
     526:	e8 0f       	add	r30, r24
     528:	f9 1f       	adc	r31, r25
     52a:	20 83       	st	Z, r18
* Clear Rx Buff and initialize the pointer
***********************************************************************/
void clrRx (void){
  int i;
	p_GPSrcvData = g_GPSrcv_buffer;
   for(i=0;i<GPS_BUFFER_SIZE;i++){
     52c:	01 96       	adiw	r24, 0x01	; 1
     52e:	86 3b       	cpi	r24, 0xB6	; 182
     530:	91 05       	cpc	r25, r1
     532:	a9 f7       	brne	.-22     	; 0x51e <clrRx+0x12>
     p_GPSrcvData[i]='X';
     }
	p_GPSrcvData = g_GPSrcv_buffer;
     534:	82 e0       	ldi	r24, 0x02	; 2
     536:	9e e3       	ldi	r25, 0x3E	; 62
     538:	80 93 f9 3e 	sts	0x3EF9, r24	; 0x803ef9 <p_GPSrcvData>
     53c:	90 93 fa 3e 	sts	0x3EFA, r25	; 0x803efa <p_GPSrcvData+0x1>
     540:	08 95       	ret

00000542 <gpsReqDateUblox>:
	if((gpsReqDateUblox()==0)&&((*(GPSSearchPtr+10))!='X'))return 0;else return 666;
}
/***********************************************************************/
/*  GPS Req Date uBlox
/***********************************************************************/
short gpsReqDateUblox (void){
     542:	bf 92       	push	r11
     544:	cf 92       	push	r12
     546:	df 92       	push	r13
     548:	ef 92       	push	r14
     54a:	ff 92       	push	r15
     54c:	0f 93       	push	r16
     54e:	1f 93       	push	r17
     550:	cf 93       	push	r28
     552:	df 93       	push	r29
     554:	cd b7       	in	r28, 0x3d	; 61
     556:	de b7       	in	r29, 0x3e	; 62
     558:	6f 97       	sbiw	r28, 0x1f	; 31
     55a:	cd bf       	out	0x3d, r28	; 61
     55c:	de bf       	out	0x3e, r29	; 62
	char i=5;
	char uartIters;
	char saveBatt;
	unsigned char validDate, numCommas=0;
	char stuffToSend[] = {'$','G','N','G','N','Q',',','Z','D','A','*',0x32,0x32,0x0D,0x0A};
     55e:	8f e0       	ldi	r24, 0x0F	; 15
     560:	e7 ea       	ldi	r30, 0xA7	; 167
     562:	fc e9       	ldi	r31, 0x9C	; 156
     564:	de 01       	movw	r26, r28
     566:	11 96       	adiw	r26, 0x01	; 1
     568:	01 90       	ld	r0, Z+
     56a:	0d 92       	st	X+, r0
     56c:	8a 95       	dec	r24
     56e:	e1 f7       	brne	.-8      	; 0x568 <gpsReqDateUblox+0x26>
     570:	04 e0       	ldi	r16, 0x04	; 4
	char validCtr=0;
     572:	b1 2c       	mov	r11, r1
	char gpsChecksum;

	for(i=0;i<4;i++){//try it four times. This value must match the size of dateGoodTestX[4]
		usart_put_string(stuffToSend,15);
		clrRx();
		USART0.CTRLA |= USART_RXCIE_bm;
     574:	c1 2c       	mov	r12, r1
     576:	68 94       	set
     578:	dd 24       	eor	r13, r13
     57a:	d3 f8       	bld	r13, 3
     57c:	0f 2e       	mov	r0, r31
     57e:	f9 eb       	ldi	r31, 0xB9	; 185
     580:	ef 2e       	mov	r14, r31
     582:	fe e3       	ldi	r31, 0x3E	; 62
     584:	ff 2e       	mov	r15, r31
     586:	f0 2d       	mov	r31, r0
	char dayHighTest[4];
	char *checksumPtr;
	char gpsChecksum;

	for(i=0;i<4;i++){//try it four times. This value must match the size of dateGoodTestX[4]
		usart_put_string(stuffToSend,15);
     588:	6f e0       	ldi	r22, 0x0F	; 15
     58a:	ce 01       	movw	r24, r28
     58c:	01 96       	adiw	r24, 0x01	; 1
     58e:	54 df       	rcall	.-344    	; 0x438 <usart_put_string>
		clrRx();
     590:	bd df       	rcall	.-134    	; 0x50c <clrRx>
		USART0.CTRLA |= USART_RXCIE_bm;
     592:	f6 01       	movw	r30, r12
     594:	85 81       	ldd	r24, Z+5	; 0x05
     596:	80 68       	ori	r24, 0x80	; 128
     598:	85 83       	std	Z+5, r24	; 0x05
		endOfLineFlag=0;
     59a:	10 92 f2 3e 	sts	0x3EF2, r1	; 0x803ef2 <endOfLineFlag>
		ENABLE_INTERRUPTS();
     59e:	78 94       	sei
		uartIters=0;
		while((endOfLineFlag==0)&&(uartIters<15)){
     5a0:	80 91 f2 3e 	lds	r24, 0x3EF2	; 0x803ef2 <endOfLineFlag>
     5a4:	81 11       	cpse	r24, r1
     5a6:	09 c0       	rjmp	.+18     	; 0x5ba <gpsReqDateUblox+0x78>
			delay_ms(100);
     5a8:	64 e6       	ldi	r22, 0x64	; 100
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	e0 de       	rcall	.-576    	; 0x372 <delay_ms>
     5b2:	1f e0       	ldi	r17, 0x0F	; 15
     5b4:	11 50       	subi	r17, 0x01	; 1
		clrRx();
		USART0.CTRLA |= USART_RXCIE_bm;
		endOfLineFlag=0;
		ENABLE_INTERRUPTS();
		uartIters=0;
		while((endOfLineFlag==0)&&(uartIters<15)){
     5b6:	09 f0       	breq	.+2      	; 0x5ba <gpsReqDateUblox+0x78>
     5b8:	08 c1       	rjmp	.+528    	; 0x7ca <gpsReqDateUblox+0x288>
			delay_ms(100);
			uartIters++;
		}
		timeToFix++;
     5ba:	80 91 f0 3e 	lds	r24, 0x3EF0	; 0x803ef0 <timeToFix>
     5be:	90 91 f1 3e 	lds	r25, 0x3EF1	; 0x803ef1 <timeToFix+0x1>
     5c2:	01 96       	adiw	r24, 0x01	; 1
     5c4:	80 93 f0 3e 	sts	0x3EF0, r24	; 0x803ef0 <timeToFix>
     5c8:	90 93 f1 3e 	sts	0x3EF1, r25	; 0x803ef1 <timeToFix+0x1>
		if(((timeToFix>MAX_GPS_ACQ)&&(mState!=INITIAL_GPS))||(timeToFix>MAX_INITIAL_GPS_ACQ)){
     5cc:	81 3f       	cpi	r24, 0xF1	; 241
     5ce:	91 05       	cpc	r25, r1
     5d0:	24 f0       	brlt	.+8      	; 0x5da <gpsReqDateUblox+0x98>
     5d2:	20 91 f8 3e 	lds	r18, 0x3EF8	; 0x803ef8 <mState>
     5d6:	27 30       	cpi	r18, 0x07	; 7
     5d8:	19 f4       	brne	.+6      	; 0x5e0 <gpsReqDateUblox+0x9e>
     5da:	85 3a       	cpi	r24, 0xA5	; 165
     5dc:	91 40       	sbci	r25, 0x01	; 1
     5de:	34 f0       	brlt	.+12     	; 0x5ec <gpsReqDateUblox+0xaa>
			uBloxStatus=666;
     5e0:	8a e9       	ldi	r24, 0x9A	; 154
     5e2:	80 93 fb 3e 	sts	0x3EFB, r24	; 0x803efb <uBloxStatus>
			return 666;
     5e6:	8a e9       	ldi	r24, 0x9A	; 154
     5e8:	92 e0       	ldi	r25, 0x02	; 2
     5ea:	f5 c0       	rjmp	.+490    	; 0x7d6 <gpsReqDateUblox+0x294>
		}
	  	USART0.CTRLA &= ~USART_RXCIE_bm;//DISABLE Rx Interrupt
     5ec:	f6 01       	movw	r30, r12
     5ee:	85 81       	ldd	r24, Z+5	; 0x05
     5f0:	8f 77       	andi	r24, 0x7F	; 127
     5f2:	85 83       	std	Z+5, r24	; 0x05
		if(searchRcvBuffuBlox('Z','D','A')==0){
     5f4:	41 e4       	ldi	r20, 0x41	; 65
     5f6:	64 e4       	ldi	r22, 0x44	; 68
     5f8:	8a e5       	ldi	r24, 0x5A	; 90
     5fa:	d6 dd       	rcall	.-1108   	; 0x1a8 <searchRcvBuffuBlox>
     5fc:	89 2b       	or	r24, r25
     5fe:	09 f0       	breq	.+2      	; 0x602 <gpsReqDateUblox+0xc0>
     600:	66 c0       	rjmp	.+204    	; 0x6ce <gpsReqDateUblox+0x18c>
			checksumPtr=GPSSearchPtr-2;
     602:	20 91 fc 3e 	lds	r18, 0x3EFC	; 0x803efc <GPSSearchPtr>
     606:	30 91 fd 3e 	lds	r19, 0x3EFD	; 0x803efd <GPSSearchPtr+0x1>
     60a:	d9 01       	movw	r26, r18
     60c:	12 97       	sbiw	r26, 0x02	; 2
			gpsChecksum=0;
			while((checksumPtr<=g_GPSrcv_buffer+GPS_BUFFER_SIZE)&&(*checksumPtr!='*')){
     60e:	fe e3       	ldi	r31, 0x3E	; 62
     610:	a8 3b       	cpi	r26, 0xB8	; 184
     612:	bf 07       	cpc	r27, r31
     614:	09 f0       	breq	.+2      	; 0x618 <gpsReqDateUblox+0xd6>
     616:	78 f4       	brcc	.+30     	; 0x636 <gpsReqDateUblox+0xf4>
     618:	fd 01       	movw	r30, r26
     61a:	80 81       	ld	r24, Z
     61c:	8a 32       	cpi	r24, 0x2A	; 42
     61e:	69 f0       	breq	.+26     	; 0x63a <gpsReqDateUblox+0xf8>
     620:	31 96       	adiw	r30, 0x01	; 1
     622:	10 e0       	ldi	r17, 0x00	; 0
				gpsChecksum^=*checksumPtr++;
     624:	df 01       	movw	r26, r30
     626:	18 27       	eor	r17, r24
		}
	  	USART0.CTRLA &= ~USART_RXCIE_bm;//DISABLE Rx Interrupt
		if(searchRcvBuffuBlox('Z','D','A')==0){
			checksumPtr=GPSSearchPtr-2;
			gpsChecksum=0;
			while((checksumPtr<=g_GPSrcv_buffer+GPS_BUFFER_SIZE)&&(*checksumPtr!='*')){
     628:	ee 16       	cp	r14, r30
     62a:	ff 06       	cpc	r15, r31
     62c:	39 f0       	breq	.+14     	; 0x63c <gpsReqDateUblox+0xfa>
     62e:	81 91       	ld	r24, Z+
     630:	8a 32       	cpi	r24, 0x2A	; 42
     632:	c1 f7       	brne	.-16     	; 0x624 <gpsReqDateUblox+0xe2>
     634:	03 c0       	rjmp	.+6      	; 0x63c <gpsReqDateUblox+0xfa>
			return 666;
		}
	  	USART0.CTRLA &= ~USART_RXCIE_bm;//DISABLE Rx Interrupt
		if(searchRcvBuffuBlox('Z','D','A')==0){
			checksumPtr=GPSSearchPtr-2;
			gpsChecksum=0;
     636:	10 e0       	ldi	r17, 0x00	; 0
     638:	01 c0       	rjmp	.+2      	; 0x63c <gpsReqDateUblox+0xfa>
     63a:	10 e0       	ldi	r17, 0x00	; 0
			while((checksumPtr<=g_GPSrcv_buffer+GPS_BUFFER_SIZE)&&(*checksumPtr!='*')){
				gpsChecksum^=*checksumPtr++;
			}
			if(gpsChecksum==asciiHexToHex(*(checksumPtr+1),*(checksumPtr+2))){
     63c:	12 96       	adiw	r26, 0x02	; 2
     63e:	6c 91       	ld	r22, X
     640:	12 97       	sbiw	r26, 0x02	; 2
     642:	11 96       	adiw	r26, 0x01	; 1
     644:	8c 91       	ld	r24, X
     646:	23 de       	rcall	.-954    	; 0x28e <asciiHexToHex>
     648:	21 2f       	mov	r18, r17
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	28 17       	cp	r18, r24
     64e:	39 07       	cpc	r19, r25
     650:	f1 f5       	brne	.+124    	; 0x6ce <gpsReqDateUblox+0x18c>
     652:	34 c0       	rjmp	.+104    	; 0x6bc <gpsReqDateUblox+0x17a>
				numCommas=0;
				while (GPSSearchPtr < &(g_GPSrcv_buffer[GPS_BUFFER_SIZE])){
					GPSSearchPtr++;
     654:	cf 01       	movw	r24, r30
     656:	01 96       	adiw	r24, 0x01	; 1
     658:	80 93 fc 3e 	sts	0x3EFC, r24	; 0x803efc <GPSSearchPtr>
     65c:	90 93 fd 3e 	sts	0x3EFD, r25	; 0x803efd <GPSSearchPtr+0x1>
					if(*GPSSearchPtr == ','){
     660:	81 81       	ldd	r24, Z+1	; 0x01
     662:	8c 32       	cpi	r24, 0x2C	; 44
     664:	61 f5       	brne	.+88     	; 0x6be <gpsReqDateUblox+0x17c>
						numCommas++;
     666:	2f 5f       	subi	r18, 0xFF	; 255
						if(numCommas==2){
     668:	22 30       	cpi	r18, 0x02	; 2
     66a:	49 f5       	brne	.+82     	; 0x6be <gpsReqDateUblox+0x17c>
							if(((*(GPSSearchPtr+1))==',')||((*(GPSSearchPtr+5))=='X'))break;
     66c:	22 81       	ldd	r18, Z+2	; 0x02
     66e:	2c 32       	cpi	r18, 0x2C	; 44
     670:	71 f1       	breq	.+92     	; 0x6ce <gpsReqDateUblox+0x18c>
     672:	36 81       	ldd	r19, Z+6	; 0x06
     674:	38 35       	cpi	r19, 0x58	; 88
     676:	59 f1       	breq	.+86     	; 0x6ce <gpsReqDateUblox+0x18c>
							else{
								monthLowTest[validCtr]=(*(GPSSearchPtr+5));
     678:	8b 2d       	mov	r24, r11
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	a4 e1       	ldi	r26, 0x14	; 20
     67e:	b0 e0       	ldi	r27, 0x00	; 0
     680:	ac 0f       	add	r26, r28
     682:	bd 1f       	adc	r27, r29
     684:	a8 0f       	add	r26, r24
     686:	b9 1f       	adc	r27, r25
     688:	3c 93       	st	X, r19
								monthHighTest[validCtr]=(*(GPSSearchPtr+4));
     68a:	a0 e1       	ldi	r26, 0x10	; 16
     68c:	b0 e0       	ldi	r27, 0x00	; 0
     68e:	ac 0f       	add	r26, r28
     690:	bd 1f       	adc	r27, r29
     692:	a8 0f       	add	r26, r24
     694:	b9 1f       	adc	r27, r25
     696:	35 81       	ldd	r19, Z+5	; 0x05
     698:	3c 93       	st	X, r19
								dayLowTest[validCtr]=(*(GPSSearchPtr+2));
     69a:	a8 e1       	ldi	r26, 0x18	; 24
     69c:	b0 e0       	ldi	r27, 0x00	; 0
     69e:	ac 0f       	add	r26, r28
     6a0:	bd 1f       	adc	r27, r29
     6a2:	a8 0f       	add	r26, r24
     6a4:	b9 1f       	adc	r27, r25
     6a6:	33 81       	ldd	r19, Z+3	; 0x03
     6a8:	3c 93       	st	X, r19
								dayHighTest[validCtr]=(*(GPSSearchPtr+1));
     6aa:	ec e1       	ldi	r30, 0x1C	; 28
     6ac:	f0 e0       	ldi	r31, 0x00	; 0
     6ae:	ec 0f       	add	r30, r28
     6b0:	fd 1f       	adc	r31, r29
     6b2:	e8 0f       	add	r30, r24
     6b4:	f9 1f       	adc	r31, r25
     6b6:	20 83       	st	Z, r18
								validCtr++;
     6b8:	b3 94       	inc	r11
								break;
     6ba:	09 c0       	rjmp	.+18     	; 0x6ce <gpsReqDateUblox+0x18c>
     6bc:	20 e0       	ldi	r18, 0x00	; 0
			while((checksumPtr<=g_GPSrcv_buffer+GPS_BUFFER_SIZE)&&(*checksumPtr!='*')){
				gpsChecksum^=*checksumPtr++;
			}
			if(gpsChecksum==asciiHexToHex(*(checksumPtr+1),*(checksumPtr+2))){
				numCommas=0;
				while (GPSSearchPtr < &(g_GPSrcv_buffer[GPS_BUFFER_SIZE])){
     6be:	e0 91 fc 3e 	lds	r30, 0x3EFC	; 0x803efc <GPSSearchPtr>
     6c2:	f0 91 fd 3e 	lds	r31, 0x3EFD	; 0x803efd <GPSSearchPtr+0x1>
     6c6:	8e e3       	ldi	r24, 0x3E	; 62
     6c8:	e8 3b       	cpi	r30, 0xB8	; 184
     6ca:	f8 07       	cpc	r31, r24
     6cc:	18 f2       	brcs	.-122    	; 0x654 <gpsReqDateUblox+0x112>
     6ce:	01 50       	subi	r16, 0x01	; 1
	char dayLowTest[4];
	char dayHighTest[4];
	char *checksumPtr;
	char gpsChecksum;

	for(i=0;i<4;i++){//try it four times. This value must match the size of dateGoodTestX[4]
     6d0:	09 f0       	breq	.+2      	; 0x6d4 <gpsReqDateUblox+0x192>
     6d2:	5a cf       	rjmp	.-332    	; 0x588 <gpsReqDateUblox+0x46>
		}//end of good checksum
	}//end of 'ZDA'
	}//end of if 3 of 4 are good, including the last one

validCtr=0;
if(monthLowTest[3]==monthLowTest[2])validCtr++;
     6d4:	1f 89       	ldd	r17, Y+23	; 0x17
		}
		}//end of good checksum
	}//end of 'ZDA'
	}//end of if 3 of 4 are good, including the last one

validCtr=0;
     6d6:	81 e0       	ldi	r24, 0x01	; 1
     6d8:	9e 89       	ldd	r25, Y+22	; 0x16
     6da:	91 13       	cpse	r25, r17
     6dc:	80 e0       	ldi	r24, 0x00	; 0
if(monthLowTest[3]==monthLowTest[2])validCtr++;
if(monthLowTest[3]==monthLowTest[1])validCtr++;
     6de:	9d 89       	ldd	r25, Y+21	; 0x15
     6e0:	19 13       	cpse	r17, r25
     6e2:	01 c0       	rjmp	.+2      	; 0x6e6 <gpsReqDateUblox+0x1a4>
     6e4:	8f 5f       	subi	r24, 0xFF	; 255
if(monthLowTest[3]==monthLowTest[0])validCtr++;
     6e6:	9c 89       	ldd	r25, Y+20	; 0x14
     6e8:	19 13       	cpse	r17, r25
     6ea:	01 c0       	rjmp	.+2      	; 0x6ee <gpsReqDateUblox+0x1ac>
     6ec:	8f 5f       	subi	r24, 0xFF	; 255
if(validCtr<3)return 666;
     6ee:	83 30       	cpi	r24, 0x03	; 3
     6f0:	08 f4       	brcc	.+2      	; 0x6f4 <gpsReqDateUblox+0x1b2>
     6f2:	5c c0       	rjmp	.+184    	; 0x7ac <gpsReqDateUblox+0x26a>
validCtr=0;
if(monthHighTest[3]==monthHighTest[2])validCtr++;
     6f4:	0b 89       	ldd	r16, Y+19	; 0x13
validCtr=0;
if(monthLowTest[3]==monthLowTest[2])validCtr++;
if(monthLowTest[3]==monthLowTest[1])validCtr++;
if(monthLowTest[3]==monthLowTest[0])validCtr++;
if(validCtr<3)return 666;
validCtr=0;
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	9a 89       	ldd	r25, Y+18	; 0x12
     6fa:	90 13       	cpse	r25, r16
     6fc:	80 e0       	ldi	r24, 0x00	; 0
if(monthHighTest[3]==monthHighTest[2])validCtr++;
if(monthHighTest[3]==monthHighTest[1])validCtr++;
     6fe:	99 89       	ldd	r25, Y+17	; 0x11
     700:	09 13       	cpse	r16, r25
     702:	01 c0       	rjmp	.+2      	; 0x706 <gpsReqDateUblox+0x1c4>
     704:	8f 5f       	subi	r24, 0xFF	; 255
if(monthHighTest[3]==monthHighTest[0])validCtr++;
     706:	98 89       	ldd	r25, Y+16	; 0x10
     708:	09 13       	cpse	r16, r25
     70a:	01 c0       	rjmp	.+2      	; 0x70e <gpsReqDateUblox+0x1cc>
     70c:	8f 5f       	subi	r24, 0xFF	; 255
if(validCtr<3)return 666;
     70e:	83 30       	cpi	r24, 0x03	; 3
     710:	08 f4       	brcc	.+2      	; 0x714 <gpsReqDateUblox+0x1d2>
     712:	4f c0       	rjmp	.+158    	; 0x7b2 <gpsReqDateUblox+0x270>
validCtr=0;
if(dayLowTest[3]==dayLowTest[2])validCtr++;
     714:	fb 8c       	ldd	r15, Y+27	; 0x1b
validCtr=0;
if(monthHighTest[3]==monthHighTest[2])validCtr++;
if(monthHighTest[3]==monthHighTest[1])validCtr++;
if(monthHighTest[3]==monthHighTest[0])validCtr++;
if(validCtr<3)return 666;
validCtr=0;
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	9a 8d       	ldd	r25, Y+26	; 0x1a
     71a:	9f 11       	cpse	r25, r15
     71c:	80 e0       	ldi	r24, 0x00	; 0
if(dayLowTest[3]==dayLowTest[2])validCtr++;
if(dayLowTest[3]==dayLowTest[1])validCtr++;
     71e:	99 8d       	ldd	r25, Y+25	; 0x19
     720:	f9 12       	cpse	r15, r25
     722:	01 c0       	rjmp	.+2      	; 0x726 <gpsReqDateUblox+0x1e4>
     724:	8f 5f       	subi	r24, 0xFF	; 255
if(dayLowTest[3]==dayLowTest[0])validCtr++;
     726:	98 8d       	ldd	r25, Y+24	; 0x18
     728:	f9 12       	cpse	r15, r25
     72a:	01 c0       	rjmp	.+2      	; 0x72e <gpsReqDateUblox+0x1ec>
     72c:	8f 5f       	subi	r24, 0xFF	; 255
if(validCtr<3)return 666;
     72e:	83 30       	cpi	r24, 0x03	; 3
     730:	08 f4       	brcc	.+2      	; 0x734 <gpsReqDateUblox+0x1f2>
     732:	42 c0       	rjmp	.+132    	; 0x7b8 <gpsReqDateUblox+0x276>
validCtr=0;
if(dayHighTest[3]==dayHighTest[2])validCtr++;
     734:	ef 8c       	ldd	r14, Y+31	; 0x1f
validCtr=0;
if(dayLowTest[3]==dayLowTest[2])validCtr++;
if(dayLowTest[3]==dayLowTest[1])validCtr++;
if(dayLowTest[3]==dayLowTest[0])validCtr++;
if(validCtr<3)return 666;
validCtr=0;
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	9e 8d       	ldd	r25, Y+30	; 0x1e
     73a:	9e 11       	cpse	r25, r14
     73c:	80 e0       	ldi	r24, 0x00	; 0
if(dayHighTest[3]==dayHighTest[2])validCtr++;
if(dayHighTest[3]==dayHighTest[1])validCtr++;
     73e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     740:	e9 12       	cpse	r14, r25
     742:	01 c0       	rjmp	.+2      	; 0x746 <gpsReqDateUblox+0x204>
     744:	8f 5f       	subi	r24, 0xFF	; 255
if(dayHighTest[3]==dayHighTest[0])validCtr++;
     746:	9c 8d       	ldd	r25, Y+28	; 0x1c
     748:	e9 12       	cpse	r14, r25
     74a:	01 c0       	rjmp	.+2      	; 0x74e <gpsReqDateUblox+0x20c>
     74c:	8f 5f       	subi	r24, 0xFF	; 255
if(validCtr<3)return 666;
     74e:	83 30       	cpi	r24, 0x03	; 3
     750:	b0 f1       	brcs	.+108    	; 0x7be <gpsReqDateUblox+0x27c>
saveBatt=gpsParams[16];
     752:	20 91 e4 3e 	lds	r18, 0x3EE4	; 0x803ee4 <gpsParams+0x10>
     756:	e4 ed       	ldi	r30, 0xD4	; 212
     758:	fe e3       	ldi	r31, 0x3E	; 62
     75a:	80 ef       	ldi	r24, 0xF0	; 240
     75c:	9e e3       	ldi	r25, 0x3E	; 62
for(validCtr=0;validCtr<SIZEOFGPSPARAMS;validCtr++){
	gpsParams[validCtr]=0;
     75e:	11 92       	st	Z+, r1
if(dayHighTest[3]==dayHighTest[2])validCtr++;
if(dayHighTest[3]==dayHighTest[1])validCtr++;
if(dayHighTest[3]==dayHighTest[0])validCtr++;
if(validCtr<3)return 666;
saveBatt=gpsParams[16];
for(validCtr=0;validCtr<SIZEOFGPSPARAMS;validCtr++){
     760:	e8 17       	cp	r30, r24
     762:	f9 07       	cpc	r31, r25
     764:	e1 f7       	brne	.-8      	; 0x75e <gpsReqDateUblox+0x21c>
	gpsParams[validCtr]=0;
}
gpsParams[16]=saveBatt;
     766:	20 93 e4 3e 	sts	0x3EE4, r18	; 0x803ee4 <gpsParams+0x10>
if((dayLowTest[3])!=','){
     76a:	9c e2       	ldi	r25, 0x2C	; 44
     76c:	f9 16       	cp	r15, r25
     76e:	51 f1       	breq	.+84     	; 0x7c4 <gpsReqDateUblox+0x282>
	gpsParams[0]=((char)(asciiToHex(0x30,*(GPSSearchPtr+10)))<<4)		   /*last digit of year*/
     770:	e0 91 fc 3e 	lds	r30, 0x3EFC	; 0x803efc <GPSSearchPtr>
     774:	f0 91 fd 3e 	lds	r31, 0x3EFD	; 0x803efd <GPSSearchPtr+0x1>
     778:	62 85       	ldd	r22, Z+10	; 0x0a
     77a:	80 e3       	ldi	r24, 0x30	; 48
     77c:	3d dd       	rcall	.-1414   	; 0x1f8 <asciiToHex>
     77e:	d8 2e       	mov	r13, r24
	+asciiToHex(monthHighTest[3],monthLowTest[3]);		/*month uBlox*/
     780:	61 2f       	mov	r22, r17
     782:	80 2f       	mov	r24, r16
     784:	39 dd       	rcall	.-1422   	; 0x1f8 <asciiToHex>
for(validCtr=0;validCtr<SIZEOFGPSPARAMS;validCtr++){
	gpsParams[validCtr]=0;
}
gpsParams[16]=saveBatt;
if((dayLowTest[3])!=','){
	gpsParams[0]=((char)(asciiToHex(0x30,*(GPSSearchPtr+10)))<<4)		   /*last digit of year*/
     786:	04 ed       	ldi	r16, 0xD4	; 212
     788:	1e e3       	ldi	r17, 0x3E	; 62
     78a:	e0 e1       	ldi	r30, 0x10	; 16
     78c:	de 9e       	mul	r13, r30
     78e:	80 0d       	add	r24, r0
     790:	11 24       	eor	r1, r1
     792:	f8 01       	movw	r30, r16
     794:	80 83       	st	Z, r24
	+asciiToHex(monthHighTest[3],monthLowTest[3]);		/*month uBlox*/
	gpsParams[1]=(asciiToHex(dayHighTest[3],dayLowTest[3]))<<3; 	/*day uBlox*/
     796:	6f 2d       	mov	r22, r15
     798:	8e 2d       	mov	r24, r14
     79a:	2e dd       	rcall	.-1444   	; 0x1f8 <asciiToHex>
     79c:	88 0f       	add	r24, r24
     79e:	88 0f       	add	r24, r24
     7a0:	88 0f       	add	r24, r24
     7a2:	f8 01       	movw	r30, r16
     7a4:	81 83       	std	Z+1, r24	; 0x01
	return 0;
     7a6:	80 e0       	ldi	r24, 0x00	; 0
     7a8:	90 e0       	ldi	r25, 0x00	; 0
     7aa:	15 c0       	rjmp	.+42     	; 0x7d6 <gpsReqDateUblox+0x294>

validCtr=0;
if(monthLowTest[3]==monthLowTest[2])validCtr++;
if(monthLowTest[3]==monthLowTest[1])validCtr++;
if(monthLowTest[3]==monthLowTest[0])validCtr++;
if(validCtr<3)return 666;
     7ac:	8a e9       	ldi	r24, 0x9A	; 154
     7ae:	92 e0       	ldi	r25, 0x02	; 2
     7b0:	12 c0       	rjmp	.+36     	; 0x7d6 <gpsReqDateUblox+0x294>
validCtr=0;
if(monthHighTest[3]==monthHighTest[2])validCtr++;
if(monthHighTest[3]==monthHighTest[1])validCtr++;
if(monthHighTest[3]==monthHighTest[0])validCtr++;
if(validCtr<3)return 666;
     7b2:	8a e9       	ldi	r24, 0x9A	; 154
     7b4:	92 e0       	ldi	r25, 0x02	; 2
     7b6:	0f c0       	rjmp	.+30     	; 0x7d6 <gpsReqDateUblox+0x294>
validCtr=0;
if(dayLowTest[3]==dayLowTest[2])validCtr++;
if(dayLowTest[3]==dayLowTest[1])validCtr++;
if(dayLowTest[3]==dayLowTest[0])validCtr++;
if(validCtr<3)return 666;
     7b8:	8a e9       	ldi	r24, 0x9A	; 154
     7ba:	92 e0       	ldi	r25, 0x02	; 2
     7bc:	0c c0       	rjmp	.+24     	; 0x7d6 <gpsReqDateUblox+0x294>
validCtr=0;
if(dayHighTest[3]==dayHighTest[2])validCtr++;
if(dayHighTest[3]==dayHighTest[1])validCtr++;
if(dayHighTest[3]==dayHighTest[0])validCtr++;
if(validCtr<3)return 666;
     7be:	8a e9       	ldi	r24, 0x9A	; 154
     7c0:	92 e0       	ldi	r25, 0x02	; 2
     7c2:	09 c0       	rjmp	.+18     	; 0x7d6 <gpsReqDateUblox+0x294>
	gpsParams[0]=((char)(asciiToHex(0x30,*(GPSSearchPtr+10)))<<4)		   /*last digit of year*/
	+asciiToHex(monthHighTest[3],monthLowTest[3]);		/*month uBlox*/
	gpsParams[1]=(asciiToHex(dayHighTest[3],dayLowTest[3]))<<3; 	/*day uBlox*/
	return 0;
	}else{
	return 666;
     7c4:	8a e9       	ldi	r24, 0x9A	; 154
     7c6:	92 e0       	ldi	r25, 0x02	; 2
     7c8:	06 c0       	rjmp	.+12     	; 0x7d6 <gpsReqDateUblox+0x294>
		USART0.CTRLA |= USART_RXCIE_bm;
		endOfLineFlag=0;
		ENABLE_INTERRUPTS();
		uartIters=0;
		while((endOfLineFlag==0)&&(uartIters<15)){
			delay_ms(100);
     7ca:	64 e6       	ldi	r22, 0x64	; 100
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	cf dd       	rcall	.-1122   	; 0x372 <delay_ms>
     7d4:	ef ce       	rjmp	.-546    	; 0x5b4 <gpsReqDateUblox+0x72>
	gpsParams[1]=(asciiToHex(dayHighTest[3],dayLowTest[3]))<<3; 	/*day uBlox*/
	return 0;
	}else{
	return 666;
}
}
     7d6:	6f 96       	adiw	r28, 0x1f	; 31
     7d8:	cd bf       	out	0x3d, r28	; 61
     7da:	de bf       	out	0x3e, r29	; 62
     7dc:	df 91       	pop	r29
     7de:	cf 91       	pop	r28
     7e0:	1f 91       	pop	r17
     7e2:	0f 91       	pop	r16
     7e4:	ff 90       	pop	r15
     7e6:	ef 90       	pop	r14
     7e8:	df 90       	pop	r13
     7ea:	cf 90       	pop	r12
     7ec:	bf 90       	pop	r11
     7ee:	08 95       	ret

000007f0 <GPSgetDate>:
}
/***********************************************************************/
/*  GPS Try 3 Req Date uBlox
/***********************************************************************/
short GPSgetDate (void){
	if((gpsReqDateUblox()==0)&&((*(GPSSearchPtr+10))!='X'))return 0;
     7f0:	a8 de       	rcall	.-688    	; 0x542 <gpsReqDateUblox>
     7f2:	00 97       	sbiw	r24, 0x00	; 0
     7f4:	39 f4       	brne	.+14     	; 0x804 <GPSgetDate+0x14>
     7f6:	e0 91 fc 3e 	lds	r30, 0x3EFC	; 0x803efc <GPSSearchPtr>
     7fa:	f0 91 fd 3e 	lds	r31, 0x3EFD	; 0x803efd <GPSSearchPtr+0x1>
     7fe:	22 85       	ldd	r18, Z+10	; 0x0a
     800:	28 35       	cpi	r18, 0x58	; 88
     802:	21 f5       	brne	.+72     	; 0x84c <GPSgetDate+0x5c>
	if((gpsReqDateUblox()==0)&&((*(GPSSearchPtr+10))!='X'))return 0;//might not need these repeats now that checksum has been added
     804:	9e de       	rcall	.-708    	; 0x542 <gpsReqDateUblox>
     806:	00 97       	sbiw	r24, 0x00	; 0
     808:	39 f4       	brne	.+14     	; 0x818 <GPSgetDate+0x28>
     80a:	e0 91 fc 3e 	lds	r30, 0x3EFC	; 0x803efc <GPSSearchPtr>
     80e:	f0 91 fd 3e 	lds	r31, 0x3EFD	; 0x803efd <GPSSearchPtr+0x1>
     812:	22 85       	ldd	r18, Z+10	; 0x0a
     814:	28 35       	cpi	r18, 0x58	; 88
     816:	d1 f4       	brne	.+52     	; 0x84c <GPSgetDate+0x5c>
	if((gpsReqDateUblox()==0)&&((*(GPSSearchPtr+10))!='X'))return 0;
     818:	94 de       	rcall	.-728    	; 0x542 <gpsReqDateUblox>
     81a:	00 97       	sbiw	r24, 0x00	; 0
     81c:	39 f4       	brne	.+14     	; 0x82c <GPSgetDate+0x3c>
     81e:	e0 91 fc 3e 	lds	r30, 0x3EFC	; 0x803efc <GPSSearchPtr>
     822:	f0 91 fd 3e 	lds	r31, 0x3EFD	; 0x803efd <GPSSearchPtr+0x1>
     826:	22 85       	ldd	r18, Z+10	; 0x0a
     828:	28 35       	cpi	r18, 0x58	; 88
     82a:	81 f4       	brne	.+32     	; 0x84c <GPSgetDate+0x5c>
	if((gpsReqDateUblox()==0)&&((*(GPSSearchPtr+10))!='X'))return 0;else return 666;
     82c:	8a de       	rcall	.-748    	; 0x542 <gpsReqDateUblox>
     82e:	00 97       	sbiw	r24, 0x00	; 0
     830:	41 f4       	brne	.+16     	; 0x842 <GPSgetDate+0x52>
     832:	e0 91 fc 3e 	lds	r30, 0x3EFC	; 0x803efc <GPSSearchPtr>
     836:	f0 91 fd 3e 	lds	r31, 0x3EFD	; 0x803efd <GPSSearchPtr+0x1>
     83a:	22 85       	ldd	r18, Z+10	; 0x0a
     83c:	28 35       	cpi	r18, 0x58	; 88
     83e:	31 f4       	brne	.+12     	; 0x84c <GPSgetDate+0x5c>
     840:	03 c0       	rjmp	.+6      	; 0x848 <GPSgetDate+0x58>
     842:	8a e9       	ldi	r24, 0x9A	; 154
     844:	92 e0       	ldi	r25, 0x02	; 2
     846:	08 95       	ret
     848:	8a e9       	ldi	r24, 0x9A	; 154
     84a:	92 e0       	ldi	r25, 0x02	; 2
}
     84c:	08 95       	ret

0000084e <gpsReqStatusUblox>:
}
}
/***********************************************************************/
/*  GPS Req Status
/***********************************************************************/
short gpsReqStatusUblox (void){
     84e:	cf 92       	push	r12
     850:	df 92       	push	r13
     852:	ef 92       	push	r14
     854:	ff 92       	push	r15
     856:	0f 93       	push	r16
     858:	1f 93       	push	r17
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
	char i=5;
	unsigned char validLoc, numCommas=0;
	validLoc=0;
	uBloxStatus=0;
     85e:	10 92 fb 3e 	sts	0x3EFB, r1	; 0x803efb <uBloxStatus>
     862:	68 94       	set
     864:	cc 24       	eor	r12, r12
     866:	c2 f8       	bld	r12, 2
/*  GPS Req Status
/***********************************************************************/
short gpsReqStatusUblox (void){
	char i=5;
	unsigned char validLoc, numCommas=0;
	validLoc=0;
     868:	d1 2c       	mov	r13, r1
	char gpsChecksum;
	char uartIters;

	for(i=4;i>0;i--){//try it four times
		clrRx();
		USART0.CTRLA |= USART_RXCIE_bm;
     86a:	e1 2c       	mov	r14, r1
     86c:	68 94       	set
     86e:	ff 24       	eor	r15, r15
     870:	f3 f8       	bld	r15, 3
     872:	09 eb       	ldi	r16, 0xB9	; 185
     874:	1e e3       	ldi	r17, 0x3E	; 62
	char *checksumPtr;
	char gpsChecksum;
	char uartIters;

	for(i=4;i>0;i--){//try it four times
		clrRx();
     876:	4a de       	rcall	.-876    	; 0x50c <clrRx>
		USART0.CTRLA |= USART_RXCIE_bm;
     878:	e7 01       	movw	r28, r14
     87a:	8d 81       	ldd	r24, Y+5	; 0x05
     87c:	80 68       	ori	r24, 0x80	; 128
     87e:	8d 83       	std	Y+5, r24	; 0x05
		endOfLineFlag=0;
     880:	10 92 f2 3e 	sts	0x3EF2, r1	; 0x803ef2 <endOfLineFlag>
		ENABLE_INTERRUPTS();
     884:	78 94       	sei
		uartIters=0;
		while((endOfLineFlag==0)&&(uartIters<15)){
     886:	80 91 f2 3e 	lds	r24, 0x3EF2	; 0x803ef2 <endOfLineFlag>
     88a:	81 11       	cpse	r24, r1
     88c:	09 c0       	rjmp	.+18     	; 0x8a0 <gpsReqStatusUblox+0x52>
			delay_ms(100);
     88e:	64 e6       	ldi	r22, 0x64	; 100
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	80 e0       	ldi	r24, 0x00	; 0
     894:	90 e0       	ldi	r25, 0x00	; 0
     896:	6d dd       	rcall	.-1318   	; 0x372 <delay_ms>
     898:	cf e0       	ldi	r28, 0x0F	; 15
     89a:	c1 50       	subi	r28, 0x01	; 1
		clrRx();
		USART0.CTRLA |= USART_RXCIE_bm;
		endOfLineFlag=0;
		ENABLE_INTERRUPTS();
		uartIters=0;
		while((endOfLineFlag==0)&&(uartIters<15)){
     89c:	09 f0       	breq	.+2      	; 0x8a0 <gpsReqStatusUblox+0x52>
     89e:	80 c0       	rjmp	.+256    	; 0x9a0 <gpsReqStatusUblox+0x152>
			delay_ms(100);
			uartIters++;
		}
		timeToFix++;
     8a0:	80 91 f0 3e 	lds	r24, 0x3EF0	; 0x803ef0 <timeToFix>
     8a4:	90 91 f1 3e 	lds	r25, 0x3EF1	; 0x803ef1 <timeToFix+0x1>
     8a8:	01 96       	adiw	r24, 0x01	; 1
     8aa:	80 93 f0 3e 	sts	0x3EF0, r24	; 0x803ef0 <timeToFix>
     8ae:	90 93 f1 3e 	sts	0x3EF1, r25	; 0x803ef1 <timeToFix+0x1>
		if(((timeToFix>MAX_GPS_ACQ)&&(mState!=INITIAL_GPS))||(timeToFix>MAX_INITIAL_GPS_ACQ)){
     8b2:	81 3f       	cpi	r24, 0xF1	; 241
     8b4:	91 05       	cpc	r25, r1
     8b6:	24 f0       	brlt	.+8      	; 0x8c0 <gpsReqStatusUblox+0x72>
     8b8:	20 91 f8 3e 	lds	r18, 0x3EF8	; 0x803ef8 <mState>
     8bc:	27 30       	cpi	r18, 0x07	; 7
     8be:	19 f4       	brne	.+6      	; 0x8c6 <gpsReqStatusUblox+0x78>
     8c0:	85 3a       	cpi	r24, 0xA5	; 165
     8c2:	91 40       	sbci	r25, 0x01	; 1
     8c4:	34 f0       	brlt	.+12     	; 0x8d2 <gpsReqStatusUblox+0x84>
			uBloxStatus=666;
     8c6:	8a e9       	ldi	r24, 0x9A	; 154
     8c8:	80 93 fb 3e 	sts	0x3EFB, r24	; 0x803efb <uBloxStatus>
			return 666;
     8cc:	8a e9       	ldi	r24, 0x9A	; 154
     8ce:	92 e0       	ldi	r25, 0x02	; 2
     8d0:	6d c0       	rjmp	.+218    	; 0x9ac <gpsReqStatusUblox+0x15e>
		}
	  	USART0.CTRLA &= ~USART_RXCIE_bm;//DISABLE Rx Interrupt
     8d2:	f7 01       	movw	r30, r14
     8d4:	85 81       	ldd	r24, Z+5	; 0x05
     8d6:	8f 77       	andi	r24, 0x7F	; 127
     8d8:	85 83       	std	Z+5, r24	; 0x05
		if(searchRcvBuffuBlox('R','M','C')==0){
     8da:	43 e4       	ldi	r20, 0x43	; 67
     8dc:	6d e4       	ldi	r22, 0x4D	; 77
     8de:	82 e5       	ldi	r24, 0x52	; 82
     8e0:	63 dc       	rcall	.-1850   	; 0x1a8 <searchRcvBuffuBlox>
     8e2:	89 2b       	or	r24, r25
     8e4:	09 f0       	breq	.+2      	; 0x8e8 <gpsReqStatusUblox+0x9a>
     8e6:	43 c0       	rjmp	.+134    	; 0x96e <gpsReqStatusUblox+0x120>
			checksumPtr=GPSSearchPtr-2;
     8e8:	e0 91 fc 3e 	lds	r30, 0x3EFC	; 0x803efc <GPSSearchPtr>
     8ec:	f0 91 fd 3e 	lds	r31, 0x3EFD	; 0x803efd <GPSSearchPtr+0x1>
     8f0:	df 01       	movw	r26, r30
     8f2:	12 97       	sbiw	r26, 0x02	; 2
			gpsChecksum=0;
			while((checksumPtr<=g_GPSrcv_buffer+GPS_BUFFER_SIZE)&&(*checksumPtr!='*')){
     8f4:	2e e3       	ldi	r18, 0x3E	; 62
     8f6:	a8 3b       	cpi	r26, 0xB8	; 184
     8f8:	b2 07       	cpc	r27, r18
     8fa:	09 f0       	breq	.+2      	; 0x8fe <gpsReqStatusUblox+0xb0>
     8fc:	78 f4       	brcc	.+30     	; 0x91c <gpsReqStatusUblox+0xce>
     8fe:	ed 01       	movw	r28, r26
     900:	88 81       	ld	r24, Y
     902:	8a 32       	cpi	r24, 0x2A	; 42
     904:	69 f0       	breq	.+26     	; 0x920 <gpsReqStatusUblox+0xd2>
     906:	31 97       	sbiw	r30, 0x01	; 1
     908:	c0 e0       	ldi	r28, 0x00	; 0
				gpsChecksum^=*checksumPtr++;
     90a:	df 01       	movw	r26, r30
     90c:	c8 27       	eor	r28, r24
		}
	  	USART0.CTRLA &= ~USART_RXCIE_bm;//DISABLE Rx Interrupt
		if(searchRcvBuffuBlox('R','M','C')==0){
			checksumPtr=GPSSearchPtr-2;
			gpsChecksum=0;
			while((checksumPtr<=g_GPSrcv_buffer+GPS_BUFFER_SIZE)&&(*checksumPtr!='*')){
     90e:	e0 17       	cp	r30, r16
     910:	f1 07       	cpc	r31, r17
     912:	39 f0       	breq	.+14     	; 0x922 <gpsReqStatusUblox+0xd4>
     914:	81 91       	ld	r24, Z+
     916:	8a 32       	cpi	r24, 0x2A	; 42
     918:	c1 f7       	brne	.-16     	; 0x90a <gpsReqStatusUblox+0xbc>
     91a:	03 c0       	rjmp	.+6      	; 0x922 <gpsReqStatusUblox+0xd4>
			return 666;
		}
	  	USART0.CTRLA &= ~USART_RXCIE_bm;//DISABLE Rx Interrupt
		if(searchRcvBuffuBlox('R','M','C')==0){
			checksumPtr=GPSSearchPtr-2;
			gpsChecksum=0;
     91c:	c0 e0       	ldi	r28, 0x00	; 0
     91e:	01 c0       	rjmp	.+2      	; 0x922 <gpsReqStatusUblox+0xd4>
     920:	c0 e0       	ldi	r28, 0x00	; 0
			while((checksumPtr<=g_GPSrcv_buffer+GPS_BUFFER_SIZE)&&(*checksumPtr!='*')){
				gpsChecksum^=*checksumPtr++;
			}
			if(gpsChecksum==asciiHexToHex(*(checksumPtr+1),*(checksumPtr+2))){
     922:	12 96       	adiw	r26, 0x02	; 2
     924:	6c 91       	ld	r22, X
     926:	12 97       	sbiw	r26, 0x02	; 2
     928:	11 96       	adiw	r26, 0x01	; 1
     92a:	8c 91       	ld	r24, X
     92c:	b0 dc       	rcall	.-1696   	; 0x28e <asciiHexToHex>
     92e:	2c 2f       	mov	r18, r28
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	28 17       	cp	r18, r24
     934:	39 07       	cpc	r19, r25
     936:	d9 f4       	brne	.+54     	; 0x96e <gpsReqStatusUblox+0x120>
     938:	11 c0       	rjmp	.+34     	; 0x95c <gpsReqStatusUblox+0x10e>
				numCommas=0;
				while (GPSSearchPtr < &(g_GPSrcv_buffer[GPS_BUFFER_SIZE])){
					GPSSearchPtr++;
     93a:	cf 01       	movw	r24, r30
     93c:	01 96       	adiw	r24, 0x01	; 1
     93e:	80 93 fc 3e 	sts	0x3EFC, r24	; 0x803efc <GPSSearchPtr>
     942:	90 93 fd 3e 	sts	0x3EFD, r25	; 0x803efd <GPSSearchPtr+0x1>
					if(*GPSSearchPtr == ','){
     946:	81 81       	ldd	r24, Z+1	; 0x01
     948:	8c 32       	cpi	r24, 0x2C	; 44
     94a:	49 f4       	brne	.+18     	; 0x95e <gpsReqStatusUblox+0x110>
						numCommas++;
     94c:	2f 5f       	subi	r18, 0xFF	; 255
						if(numCommas==2){
     94e:	22 30       	cpi	r18, 0x02	; 2
     950:	31 f4       	brne	.+12     	; 0x95e <gpsReqStatusUblox+0x110>
							if(((*(GPSSearchPtr+1))==',')||((*(GPSSearchPtr+1))=='X'))break;
     952:	82 81       	ldd	r24, Z+2	; 0x02
     954:	81 34       	cpi	r24, 0x41	; 65
     956:	59 f4       	brne	.+22     	; 0x96e <gpsReqStatusUblox+0x120>
							else{
								if(*(GPSSearchPtr+1)=='A')
									validLoc++;
     958:	d3 94       	inc	r13
     95a:	09 c0       	rjmp	.+18     	; 0x96e <gpsReqStatusUblox+0x120>
     95c:	20 e0       	ldi	r18, 0x00	; 0
			while((checksumPtr<=g_GPSrcv_buffer+GPS_BUFFER_SIZE)&&(*checksumPtr!='*')){
				gpsChecksum^=*checksumPtr++;
			}
			if(gpsChecksum==asciiHexToHex(*(checksumPtr+1),*(checksumPtr+2))){
				numCommas=0;
				while (GPSSearchPtr < &(g_GPSrcv_buffer[GPS_BUFFER_SIZE])){
     95e:	e0 91 fc 3e 	lds	r30, 0x3EFC	; 0x803efc <GPSSearchPtr>
     962:	f0 91 fd 3e 	lds	r31, 0x3EFD	; 0x803efd <GPSSearchPtr+0x1>
     966:	de e3       	ldi	r29, 0x3E	; 62
     968:	e8 3b       	cpi	r30, 0xB8	; 184
     96a:	fd 07       	cpc	r31, r29
     96c:	30 f3       	brcs	.-52     	; 0x93a <gpsReqStatusUblox+0xec>
     96e:	ca 94       	dec	r12
	uBloxStatus=0;
	char *checksumPtr;
	char gpsChecksum;
	char uartIters;

	for(i=4;i>0;i--){//try it four times
     970:	c1 10       	cpse	r12, r1
     972:	81 cf       	rjmp	.-254    	; 0x876 <gpsReqStatusUblox+0x28>
					}//end of WHILE LOOP, searching buffer
				}//end of if good checksum from uBlox
			}//end of found RMC
	}//end of FOR LOOP, if 3 of 4 are good, including the last one

	if((validLoc>=2)&&(*(GPSSearchPtr+1)=='A')){  //gets here pretty quick after status goes to 'A'
     974:	e1 e0       	ldi	r30, 0x01	; 1
     976:	ed 15       	cp	r30, r13
     978:	68 f4       	brcc	.+26     	; 0x994 <gpsReqStatusUblox+0x146>
     97a:	e0 91 fc 3e 	lds	r30, 0x3EFC	; 0x803efc <GPSSearchPtr>
     97e:	f0 91 fd 3e 	lds	r31, 0x3EFD	; 0x803efd <GPSSearchPtr+0x1>
     982:	81 81       	ldd	r24, Z+1	; 0x01
     984:	81 34       	cpi	r24, 0x41	; 65
     986:	31 f4       	brne	.+12     	; 0x994 <gpsReqStatusUblox+0x146>
		uBloxStatus=41;
     988:	89 e2       	ldi	r24, 0x29	; 41
     98a:	80 93 fb 3e 	sts	0x3EFB, r24	; 0x803efb <uBloxStatus>
		return 0;
     98e:	80 e0       	ldi	r24, 0x00	; 0
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	0c c0       	rjmp	.+24     	; 0x9ac <gpsReqStatusUblox+0x15e>
	}else{
		uBloxStatus=666;
     994:	8a e9       	ldi	r24, 0x9A	; 154
     996:	80 93 fb 3e 	sts	0x3EFB, r24	; 0x803efb <uBloxStatus>
		return 666;
     99a:	8a e9       	ldi	r24, 0x9A	; 154
     99c:	92 e0       	ldi	r25, 0x02	; 2
     99e:	06 c0       	rjmp	.+12     	; 0x9ac <gpsReqStatusUblox+0x15e>
		USART0.CTRLA |= USART_RXCIE_bm;
		endOfLineFlag=0;
		ENABLE_INTERRUPTS();
		uartIters=0;
		while((endOfLineFlag==0)&&(uartIters<15)){
			delay_ms(100);
     9a0:	64 e6       	ldi	r22, 0x64	; 100
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	e4 dc       	rcall	.-1592   	; 0x372 <delay_ms>
     9aa:	77 cf       	rjmp	.-274    	; 0x89a <gpsReqStatusUblox+0x4c>
		return 0;
	}else{
		uBloxStatus=666;
		return 666;
	}
}
     9ac:	df 91       	pop	r29
     9ae:	cf 91       	pop	r28
     9b0:	1f 91       	pop	r17
     9b2:	0f 91       	pop	r16
     9b4:	ff 90       	pop	r15
     9b6:	ef 90       	pop	r14
     9b8:	df 90       	pop	r13
     9ba:	cf 90       	pop	r12
     9bc:	08 95       	ret

000009be <gpsReqLocUblox>:
	if((gpsReqLocUblox()==0)&&((*(GPSSearchPtr+43))!='X')&&(gpsParams[15]>3))return 0;else return 666;
}
/***********************************************************************/
/*  GPS Req Number of Satellites
/***********************************************************************/
short gpsReqLocUblox (void){
     9be:	7f 92       	push	r7
     9c0:	8f 92       	push	r8
     9c2:	9f 92       	push	r9
     9c4:	af 92       	push	r10
     9c6:	bf 92       	push	r11
     9c8:	cf 92       	push	r12
     9ca:	df 92       	push	r13
     9cc:	ef 92       	push	r14
     9ce:	ff 92       	push	r15
     9d0:	0f 93       	push	r16
     9d2:	1f 93       	push	r17
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	cd b7       	in	r28, 0x3d	; 61
     9da:	de b7       	in	r29, 0x3e	; 62
     9dc:	af 97       	sbiw	r28, 0x2f	; 47
     9de:	cd bf       	out	0x3d, r28	; 61
     9e0:	de bf       	out	0x3e, r29	; 62
	char i;
	unsigned char validDate, numCommas=0;
	char stuffToSend[] = {'$','G','N','G','N','Q',',','G','N','S','*',0x32,0x37,0x0D,0x0A};
     9e2:	8f e0       	ldi	r24, 0x0F	; 15
     9e4:	e6 eb       	ldi	r30, 0xB6	; 182
     9e6:	fc e9       	ldi	r31, 0x9C	; 156
     9e8:	de 01       	movw	r26, r28
     9ea:	11 96       	adiw	r26, 0x01	; 1
     9ec:	01 90       	ld	r0, Z+
     9ee:	0d 92       	st	X+, r0
     9f0:	8a 95       	dec	r24
     9f2:	e1 f7       	brne	.-8      	; 0x9ec <gpsReqLocUblox+0x2e>
	char minHighTest[8];
	char *checksumPtr;
	char gpsChecksum;
	char uartIters;

	hourLowTest[7]=1;hourLowTest[2]=2;hourLowTest[1]=3;//force fail if stuck
     9f4:	21 e0       	ldi	r18, 0x01	; 1
     9f6:	2f 8f       	std	Y+31, r18	; 0x1f
     9f8:	92 e0       	ldi	r25, 0x02	; 2
     9fa:	9a 8f       	std	Y+26, r25	; 0x1a
     9fc:	83 e0       	ldi	r24, 0x03	; 3
     9fe:	89 8f       	std	Y+25, r24	; 0x19
	hourHighTest[7]=1;hourHighTest[2]=2;hourHighTest[1]=3;//force fail if stuck
     a00:	2f 8b       	std	Y+23, r18	; 0x17
     a02:	9a 8b       	std	Y+18, r25	; 0x12
     a04:	89 8b       	std	Y+17, r24	; 0x11
	minLowTest[7]=1;minLowTest[2]=2;minLowTest[1]=3;//force fail if stuck
     a06:	2f a3       	std	Y+39, r18	; 0x27
     a08:	9a a3       	std	Y+34, r25	; 0x22
     a0a:	89 a3       	std	Y+33, r24	; 0x21
     a0c:	68 94       	set
     a0e:	bb 24       	eor	r11, r11
     a10:	b3 f8       	bld	r11, 3
/***********************************************************************/
short gpsReqLocUblox (void){
	char i;
	unsigned char validDate, numCommas=0;
	char stuffToSend[] = {'$','G','N','G','N','Q',',','G','N','S','*',0x32,0x37,0x0D,0x0A};
	char validCtr=0;
     a12:	a1 2c       	mov	r10, r1
	hourHighTest[7]=1;hourHighTest[2]=2;hourHighTest[1]=3;//force fail if stuck
	minLowTest[7]=1;minLowTest[2]=2;minLowTest[1]=3;//force fail if stuck
	for(i=8;i>0;i--){//try it four times.This value must match the size of monthHourLowTest[4]
		usart_put_string(stuffToSend,15);
		clrRx();
		USART0.CTRLA |= USART_RXCIE_bm;
     a14:	c1 2c       	mov	r12, r1
     a16:	68 94       	set
     a18:	dd 24       	eor	r13, r13
     a1a:	d3 f8       	bld	r13, 3
     a1c:	0f 2e       	mov	r0, r31
     a1e:	f9 eb       	ldi	r31, 0xB9	; 185
     a20:	ef 2e       	mov	r14, r31
     a22:	fe e3       	ldi	r31, 0x3E	; 62
     a24:	ff 2e       	mov	r15, r31
     a26:	f0 2d       	mov	r31, r0

	hourLowTest[7]=1;hourLowTest[2]=2;hourLowTest[1]=3;//force fail if stuck
	hourHighTest[7]=1;hourHighTest[2]=2;hourHighTest[1]=3;//force fail if stuck
	minLowTest[7]=1;minLowTest[2]=2;minLowTest[1]=3;//force fail if stuck
	for(i=8;i>0;i--){//try it four times.This value must match the size of monthHourLowTest[4]
		usart_put_string(stuffToSend,15);
     a28:	6f e0       	ldi	r22, 0x0F	; 15
     a2a:	ce 01       	movw	r24, r28
     a2c:	01 96       	adiw	r24, 0x01	; 1
     a2e:	04 dd       	rcall	.-1528   	; 0x438 <usart_put_string>
		clrRx();
     a30:	6d dd       	rcall	.-1318   	; 0x50c <clrRx>
		USART0.CTRLA |= USART_RXCIE_bm;
     a32:	d6 01       	movw	r26, r12
     a34:	15 96       	adiw	r26, 0x05	; 5
     a36:	8c 91       	ld	r24, X
     a38:	15 97       	sbiw	r26, 0x05	; 5
     a3a:	80 68       	ori	r24, 0x80	; 128
     a3c:	15 96       	adiw	r26, 0x05	; 5
     a3e:	8c 93       	st	X, r24
		endOfLineFlag=0;
     a40:	10 92 f2 3e 	sts	0x3EF2, r1	; 0x803ef2 <endOfLineFlag>
		ENABLE_INTERRUPTS();
     a44:	78 94       	sei
		uartIters=0;
		while((endOfLineFlag==0)&&(uartIters<15)){
     a46:	80 91 f2 3e 	lds	r24, 0x3EF2	; 0x803ef2 <endOfLineFlag>
     a4a:	81 11       	cpse	r24, r1
     a4c:	09 c0       	rjmp	.+18     	; 0xa60 <gpsReqLocUblox+0xa2>
			delay_ms(100);
     a4e:	64 e6       	ldi	r22, 0x64	; 100
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	8d dc       	rcall	.-1766   	; 0x372 <delay_ms>
     a58:	1f e0       	ldi	r17, 0x0F	; 15
     a5a:	11 50       	subi	r17, 0x01	; 1
		clrRx();
		USART0.CTRLA |= USART_RXCIE_bm;
		endOfLineFlag=0;
		ENABLE_INTERRUPTS();
		uartIters=0;
		while((endOfLineFlag==0)&&(uartIters<15)){
     a5c:	09 f0       	breq	.+2      	; 0xa60 <gpsReqLocUblox+0xa2>
     a5e:	d7 c1       	rjmp	.+942    	; 0xe0e <gpsReqLocUblox+0x450>
			delay_ms(100);
			uartIters++;
		}
		if(((timeToFix>MAX_GPS_ACQ)&&(mState!=INITIAL_GPS))||(timeToFix>MAX_INITIAL_GPS_ACQ)){
     a60:	00 91 f0 3e 	lds	r16, 0x3EF0	; 0x803ef0 <timeToFix>
     a64:	10 91 f1 3e 	lds	r17, 0x3EF1	; 0x803ef1 <timeToFix+0x1>
     a68:	01 3f       	cpi	r16, 0xF1	; 241
     a6a:	11 05       	cpc	r17, r1
     a6c:	24 f0       	brlt	.+8      	; 0xa76 <gpsReqLocUblox+0xb8>
     a6e:	80 91 f8 3e 	lds	r24, 0x3EF8	; 0x803ef8 <mState>
     a72:	87 30       	cpi	r24, 0x07	; 7
     a74:	21 f4       	brne	.+8      	; 0xa7e <gpsReqLocUblox+0xc0>
     a76:	05 3a       	cpi	r16, 0xA5	; 165
     a78:	b1 e0       	ldi	r27, 0x01	; 1
     a7a:	1b 07       	cpc	r17, r27
     a7c:	34 f0       	brlt	.+12     	; 0xa8a <gpsReqLocUblox+0xcc>
			uBloxStatus=666;
     a7e:	8a e9       	ldi	r24, 0x9A	; 154
     a80:	80 93 fb 3e 	sts	0x3EFB, r24	; 0x803efb <uBloxStatus>
			return 666;
     a84:	8a e9       	ldi	r24, 0x9A	; 154
     a86:	92 e0       	ldi	r25, 0x02	; 2
     a88:	c8 c1       	rjmp	.+912    	; 0xe1a <gpsReqLocUblox+0x45c>
		}
		timeToFix++;
     a8a:	0f 5f       	subi	r16, 0xFF	; 255
     a8c:	1f 4f       	sbci	r17, 0xFF	; 255
     a8e:	91 2e       	mov	r9, r17
     a90:	00 93 f0 3e 	sts	0x3EF0, r16	; 0x803ef0 <timeToFix>
     a94:	10 93 f1 3e 	sts	0x3EF1, r17	; 0x803ef1 <timeToFix+0x1>
	  	USART0.CTRLA &= ~USART_RXCIE_bm;//DISABLE Rx Interrupt
     a98:	f6 01       	movw	r30, r12
     a9a:	85 81       	ldd	r24, Z+5	; 0x05
     a9c:	8f 77       	andi	r24, 0x7F	; 127
     a9e:	85 83       	std	Z+5, r24	; 0x05
		if(searchRcvBuffuBlox('G','N','S')==0){
     aa0:	43 e5       	ldi	r20, 0x53	; 83
     aa2:	6e e4       	ldi	r22, 0x4E	; 78
     aa4:	87 e4       	ldi	r24, 0x47	; 71
     aa6:	80 db       	rcall	.-2304   	; 0x1a8 <searchRcvBuffuBlox>
     aa8:	89 2b       	or	r24, r25
     aaa:	09 f0       	breq	.+2      	; 0xaae <gpsReqLocUblox+0xf0>
     aac:	7a c0       	rjmp	.+244    	; 0xba2 <gpsReqLocUblox+0x1e4>
			checksumPtr=GPSSearchPtr-2;
     aae:	20 91 fc 3e 	lds	r18, 0x3EFC	; 0x803efc <GPSSearchPtr>
     ab2:	30 91 fd 3e 	lds	r19, 0x3EFD	; 0x803efd <GPSSearchPtr+0x1>
     ab6:	d9 01       	movw	r26, r18
     ab8:	12 97       	sbiw	r26, 0x02	; 2
			gpsChecksum=0;
			while((checksumPtr<=g_GPSrcv_buffer+GPS_BUFFER_SIZE)&&(*checksumPtr!='*')){
     aba:	fe e3       	ldi	r31, 0x3E	; 62
     abc:	a8 3b       	cpi	r26, 0xB8	; 184
     abe:	bf 07       	cpc	r27, r31
     ac0:	09 f0       	breq	.+2      	; 0xac4 <gpsReqLocUblox+0x106>
     ac2:	78 f4       	brcc	.+30     	; 0xae2 <gpsReqLocUblox+0x124>
     ac4:	fd 01       	movw	r30, r26
     ac6:	80 81       	ld	r24, Z
     ac8:	8a 32       	cpi	r24, 0x2A	; 42
     aca:	69 f0       	breq	.+26     	; 0xae6 <gpsReqLocUblox+0x128>
     acc:	31 96       	adiw	r30, 0x01	; 1
     ace:	81 2c       	mov	r8, r1
				gpsChecksum^=*checksumPtr++;
     ad0:	df 01       	movw	r26, r30
     ad2:	88 26       	eor	r8, r24
		timeToFix++;
	  	USART0.CTRLA &= ~USART_RXCIE_bm;//DISABLE Rx Interrupt
		if(searchRcvBuffuBlox('G','N','S')==0){
			checksumPtr=GPSSearchPtr-2;
			gpsChecksum=0;
			while((checksumPtr<=g_GPSrcv_buffer+GPS_BUFFER_SIZE)&&(*checksumPtr!='*')){
     ad4:	ee 15       	cp	r30, r14
     ad6:	ff 05       	cpc	r31, r15
     ad8:	39 f0       	breq	.+14     	; 0xae8 <gpsReqLocUblox+0x12a>
     ada:	81 91       	ld	r24, Z+
     adc:	8a 32       	cpi	r24, 0x2A	; 42
     ade:	c1 f7       	brne	.-16     	; 0xad0 <gpsReqLocUblox+0x112>
     ae0:	03 c0       	rjmp	.+6      	; 0xae8 <gpsReqLocUblox+0x12a>
		}
		timeToFix++;
	  	USART0.CTRLA &= ~USART_RXCIE_bm;//DISABLE Rx Interrupt
		if(searchRcvBuffuBlox('G','N','S')==0){
			checksumPtr=GPSSearchPtr-2;
			gpsChecksum=0;
     ae2:	81 2c       	mov	r8, r1
     ae4:	01 c0       	rjmp	.+2      	; 0xae8 <gpsReqLocUblox+0x12a>
     ae6:	81 2c       	mov	r8, r1
			while((checksumPtr<=g_GPSrcv_buffer+GPS_BUFFER_SIZE)&&(*checksumPtr!='*')){
				gpsChecksum^=*checksumPtr++;
			}

			if(gpsChecksum==asciiHexToHex(*(checksumPtr+1),*(checksumPtr+2))){
     ae8:	12 96       	adiw	r26, 0x02	; 2
     aea:	6c 91       	ld	r22, X
     aec:	12 97       	sbiw	r26, 0x02	; 2
     aee:	11 96       	adiw	r26, 0x01	; 1
     af0:	8c 91       	ld	r24, X
     af2:	cd db       	rcall	.-2150   	; 0x28e <asciiHexToHex>
     af4:	28 2d       	mov	r18, r8
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	09 f0       	breq	.+2      	; 0xb00 <gpsReqLocUblox+0x142>
     afe:	51 c0       	rjmp	.+162    	; 0xba2 <gpsReqLocUblox+0x1e4>
     b00:	46 c0       	rjmp	.+140    	; 0xb8e <gpsReqLocUblox+0x1d0>
				numCommas=0;
				while (GPSSearchPtr < &(g_GPSrcv_buffer[GPS_BUFFER_SIZE])){
				GPSSearchPtr++;
     b02:	cf 01       	movw	r24, r30
     b04:	01 96       	adiw	r24, 0x01	; 1
     b06:	80 93 fc 3e 	sts	0x3EFC, r24	; 0x803efc <GPSSearchPtr>
     b0a:	90 93 fd 3e 	sts	0x3EFD, r25	; 0x803efd <GPSSearchPtr+0x1>
					if(*GPSSearchPtr == ','){
     b0e:	81 81       	ldd	r24, Z+1	; 0x01
     b10:	8c 32       	cpi	r24, 0x2C	; 44
     b12:	f1 f5       	brne	.+124    	; 0xb90 <gpsReqLocUblox+0x1d2>
						numCommas++;
     b14:	2f 5f       	subi	r18, 0xFF	; 255
						if(numCommas==2){
     b16:	22 30       	cpi	r18, 0x02	; 2
     b18:	d9 f5       	brne	.+118    	; 0xb90 <gpsReqLocUblox+0x1d2>
							if(((*(GPSSearchPtr+1))==',')||((*(GPSSearchPtr+1))=='X'))break;
     b1a:	82 81       	ldd	r24, Z+2	; 0x02
     b1c:	8c 32       	cpi	r24, 0x2C	; 44
     b1e:	09 f4       	brne	.+2      	; 0xb22 <gpsReqLocUblox+0x164>
     b20:	40 c0       	rjmp	.+128    	; 0xba2 <gpsReqLocUblox+0x1e4>
     b22:	88 35       	cpi	r24, 0x58	; 88
     b24:	f1 f1       	breq	.+124    	; 0xba2 <gpsReqLocUblox+0x1e4>
							else{
								hourLowTest[validCtr]=(*(GPSSearchPtr-8));
     b26:	8a 2d       	mov	r24, r10
     b28:	90 e0       	ldi	r25, 0x00	; 0
     b2a:	48 e1       	ldi	r20, 0x18	; 24
     b2c:	50 e0       	ldi	r21, 0x00	; 0
     b2e:	4c 0f       	add	r20, r28
     b30:	5d 1f       	adc	r21, r29
     b32:	48 0f       	add	r20, r24
     b34:	59 1f       	adc	r21, r25
     b36:	9f 01       	movw	r18, r30
     b38:	27 50       	subi	r18, 0x07	; 7
     b3a:	31 09       	sbc	r19, r1
     b3c:	d9 01       	movw	r26, r18
     b3e:	2c 91       	ld	r18, X
     b40:	da 01       	movw	r26, r20
     b42:	2c 93       	st	X, r18
								hourHighTest[validCtr]=(*(GPSSearchPtr-9));
     b44:	40 e1       	ldi	r20, 0x10	; 16
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	4c 0f       	add	r20, r28
     b4a:	5d 1f       	adc	r21, r29
     b4c:	48 0f       	add	r20, r24
     b4e:	59 1f       	adc	r21, r25
     b50:	9f 01       	movw	r18, r30
     b52:	28 50       	subi	r18, 0x08	; 8
     b54:	31 09       	sbc	r19, r1
     b56:	d9 01       	movw	r26, r18
     b58:	2c 91       	ld	r18, X
     b5a:	da 01       	movw	r26, r20
     b5c:	2c 93       	st	X, r18
								minLowTest[validCtr]=(*(GPSSearchPtr-6));
     b5e:	40 e2       	ldi	r20, 0x20	; 32
     b60:	50 e0       	ldi	r21, 0x00	; 0
     b62:	4c 0f       	add	r20, r28
     b64:	5d 1f       	adc	r21, r29
     b66:	48 0f       	add	r20, r24
     b68:	59 1f       	adc	r21, r25
     b6a:	9f 01       	movw	r18, r30
     b6c:	25 50       	subi	r18, 0x05	; 5
     b6e:	31 09       	sbc	r19, r1
     b70:	d9 01       	movw	r26, r18
     b72:	2c 91       	ld	r18, X
     b74:	da 01       	movw	r26, r20
     b76:	2c 93       	st	X, r18
								minHighTest[validCtr]=(*(GPSSearchPtr-7));
     b78:	a8 e2       	ldi	r26, 0x28	; 40
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	ac 0f       	add	r26, r28
     b7e:	bd 1f       	adc	r27, r29
     b80:	a8 0f       	add	r26, r24
     b82:	b9 1f       	adc	r27, r25
     b84:	36 97       	sbiw	r30, 0x06	; 6
     b86:	20 81       	ld	r18, Z
     b88:	2c 93       	st	X, r18
								validCtr++;
     b8a:	a3 94       	inc	r10
								break;
     b8c:	0a c0       	rjmp	.+20     	; 0xba2 <gpsReqLocUblox+0x1e4>
     b8e:	20 e0       	ldi	r18, 0x00	; 0
				gpsChecksum^=*checksumPtr++;
			}

			if(gpsChecksum==asciiHexToHex(*(checksumPtr+1),*(checksumPtr+2))){
				numCommas=0;
				while (GPSSearchPtr < &(g_GPSrcv_buffer[GPS_BUFFER_SIZE])){
     b90:	e0 91 fc 3e 	lds	r30, 0x3EFC	; 0x803efc <GPSSearchPtr>
     b94:	f0 91 fd 3e 	lds	r31, 0x3EFD	; 0x803efd <GPSSearchPtr+0x1>
     b98:	be e3       	ldi	r27, 0x3E	; 62
     b9a:	e8 3b       	cpi	r30, 0xB8	; 184
     b9c:	fb 07       	cpc	r31, r27
     b9e:	08 f4       	brcc	.+2      	; 0xba2 <gpsReqLocUblox+0x1e4>
     ba0:	b0 cf       	rjmp	.-160    	; 0xb02 <gpsReqLocUblox+0x144>
     ba2:	ba 94       	dec	r11
	char uartIters;

	hourLowTest[7]=1;hourLowTest[2]=2;hourLowTest[1]=3;//force fail if stuck
	hourHighTest[7]=1;hourHighTest[2]=2;hourHighTest[1]=3;//force fail if stuck
	minLowTest[7]=1;minLowTest[2]=2;minLowTest[1]=3;//force fail if stuck
	for(i=8;i>0;i--){//try it four times.This value must match the size of monthHourLowTest[4]
     ba4:	b1 10       	cpse	r11, r1
     ba6:	40 cf       	rjmp	.-384    	; 0xa28 <gpsReqLocUblox+0x6a>
				}
		  }//end of good checksum
		}//end of 'GNS'
	}//end of if 7 of 8 are good, including the last one
	validCtr=0;
	if(hourLowTest[7]==hourLowTest[6])validCtr++;
     ba8:	6f 8d       	ldd	r22, Y+31	; 0x1f
					}
				}
		  }//end of good checksum
		}//end of 'GNS'
	}//end of if 7 of 8 are good, including the last one
	validCtr=0;
     baa:	81 e0       	ldi	r24, 0x01	; 1
     bac:	9e 8d       	ldd	r25, Y+30	; 0x1e
     bae:	96 13       	cpse	r25, r22
     bb0:	80 e0       	ldi	r24, 0x00	; 0
	if(hourLowTest[7]==hourLowTest[6])validCtr++;
	if(hourLowTest[7]==hourLowTest[5])validCtr++;
     bb2:	9d 8d       	ldd	r25, Y+29	; 0x1d
     bb4:	69 13       	cpse	r22, r25
     bb6:	01 c0       	rjmp	.+2      	; 0xbba <gpsReqLocUblox+0x1fc>
     bb8:	8f 5f       	subi	r24, 0xFF	; 255
	if(hourLowTest[7]==hourLowTest[4])validCtr++;
     bba:	9c 8d       	ldd	r25, Y+28	; 0x1c
     bbc:	69 13       	cpse	r22, r25
     bbe:	01 c0       	rjmp	.+2      	; 0xbc2 <gpsReqLocUblox+0x204>
     bc0:	8f 5f       	subi	r24, 0xFF	; 255
	if(hourLowTest[7]==hourLowTest[3])validCtr++;
     bc2:	9b 8d       	ldd	r25, Y+27	; 0x1b
     bc4:	69 13       	cpse	r22, r25
     bc6:	01 c0       	rjmp	.+2      	; 0xbca <gpsReqLocUblox+0x20c>
     bc8:	8f 5f       	subi	r24, 0xFF	; 255
	if(hourLowTest[7]==hourLowTest[2])validCtr++;
     bca:	9a 8d       	ldd	r25, Y+26	; 0x1a
     bcc:	69 13       	cpse	r22, r25
     bce:	01 c0       	rjmp	.+2      	; 0xbd2 <gpsReqLocUblox+0x214>
     bd0:	8f 5f       	subi	r24, 0xFF	; 255
	if(hourLowTest[7]==hourLowTest[1])validCtr++;
     bd2:	99 8d       	ldd	r25, Y+25	; 0x19
     bd4:	69 13       	cpse	r22, r25
     bd6:	01 c0       	rjmp	.+2      	; 0xbda <gpsReqLocUblox+0x21c>
     bd8:	8f 5f       	subi	r24, 0xFF	; 255
	if(hourLowTest[7]==hourLowTest[0])validCtr++;
     bda:	98 8d       	ldd	r25, Y+24	; 0x18
     bdc:	69 13       	cpse	r22, r25
     bde:	01 c0       	rjmp	.+2      	; 0xbe2 <gpsReqLocUblox+0x224>
     be0:	8f 5f       	subi	r24, 0xFF	; 255
	if(validCtr<6)return 666;
     be2:	86 30       	cpi	r24, 0x06	; 6
     be4:	08 f4       	brcc	.+2      	; 0xbe8 <gpsReqLocUblox+0x22a>
     be6:	04 c1       	rjmp	.+520    	; 0xdf0 <gpsReqLocUblox+0x432>
	validCtr=0;
	if(hourHighTest[7]==hourHighTest[6])validCtr++;
     be8:	8f 89       	ldd	r24, Y+23	; 0x17
	if(hourLowTest[7]==hourLowTest[3])validCtr++;
	if(hourLowTest[7]==hourLowTest[2])validCtr++;
	if(hourLowTest[7]==hourLowTest[1])validCtr++;
	if(hourLowTest[7]==hourLowTest[0])validCtr++;
	if(validCtr<6)return 666;
	validCtr=0;
     bea:	91 e0       	ldi	r25, 0x01	; 1
     bec:	2e 89       	ldd	r18, Y+22	; 0x16
     bee:	28 13       	cpse	r18, r24
     bf0:	90 e0       	ldi	r25, 0x00	; 0
	if(hourHighTest[7]==hourHighTest[6])validCtr++;
	if(hourHighTest[7]==hourHighTest[5])validCtr++;
     bf2:	2d 89       	ldd	r18, Y+21	; 0x15
     bf4:	82 13       	cpse	r24, r18
     bf6:	01 c0       	rjmp	.+2      	; 0xbfa <gpsReqLocUblox+0x23c>
     bf8:	9f 5f       	subi	r25, 0xFF	; 255
	if(hourHighTest[7]==hourHighTest[4])validCtr++;
     bfa:	2c 89       	ldd	r18, Y+20	; 0x14
     bfc:	82 13       	cpse	r24, r18
     bfe:	01 c0       	rjmp	.+2      	; 0xc02 <gpsReqLocUblox+0x244>
     c00:	9f 5f       	subi	r25, 0xFF	; 255
	if(hourHighTest[7]==hourHighTest[3])validCtr++;
     c02:	2b 89       	ldd	r18, Y+19	; 0x13
     c04:	82 13       	cpse	r24, r18
     c06:	01 c0       	rjmp	.+2      	; 0xc0a <gpsReqLocUblox+0x24c>
     c08:	9f 5f       	subi	r25, 0xFF	; 255
	if(hourHighTest[7]==hourHighTest[2])validCtr++;
     c0a:	2a 89       	ldd	r18, Y+18	; 0x12
     c0c:	82 13       	cpse	r24, r18
     c0e:	01 c0       	rjmp	.+2      	; 0xc12 <gpsReqLocUblox+0x254>
     c10:	9f 5f       	subi	r25, 0xFF	; 255
	if(hourHighTest[7]==hourHighTest[1])validCtr++;
     c12:	29 89       	ldd	r18, Y+17	; 0x11
     c14:	82 13       	cpse	r24, r18
     c16:	01 c0       	rjmp	.+2      	; 0xc1a <gpsReqLocUblox+0x25c>
     c18:	9f 5f       	subi	r25, 0xFF	; 255
	if(hourHighTest[7]==hourHighTest[0])validCtr++;
     c1a:	28 89       	ldd	r18, Y+16	; 0x10
     c1c:	82 13       	cpse	r24, r18
     c1e:	01 c0       	rjmp	.+2      	; 0xc22 <gpsReqLocUblox+0x264>
     c20:	9f 5f       	subi	r25, 0xFF	; 255
	if(validCtr<6)return 666;
     c22:	96 30       	cpi	r25, 0x06	; 6
     c24:	08 f4       	brcc	.+2      	; 0xc28 <gpsReqLocUblox+0x26a>
     c26:	e7 c0       	rjmp	.+462    	; 0xdf6 <gpsReqLocUblox+0x438>
	validCtr=0;
	if(minHighTest[7]==minHighTest[6])validCtr++;
     c28:	cf a4       	ldd	r12, Y+47	; 0x2f
	if(hourHighTest[7]==hourHighTest[3])validCtr++;
	if(hourHighTest[7]==hourHighTest[2])validCtr++;
	if(hourHighTest[7]==hourHighTest[1])validCtr++;
	if(hourHighTest[7]==hourHighTest[0])validCtr++;
	if(validCtr<6)return 666;
	validCtr=0;
     c2a:	91 e0       	ldi	r25, 0x01	; 1
     c2c:	2e a5       	ldd	r18, Y+46	; 0x2e
     c2e:	2c 11       	cpse	r18, r12
     c30:	90 e0       	ldi	r25, 0x00	; 0
	if(minHighTest[7]==minHighTest[6])validCtr++;
	if(minHighTest[7]==minHighTest[5])validCtr++;
     c32:	2d a5       	ldd	r18, Y+45	; 0x2d
     c34:	c2 12       	cpse	r12, r18
     c36:	01 c0       	rjmp	.+2      	; 0xc3a <gpsReqLocUblox+0x27c>
     c38:	9f 5f       	subi	r25, 0xFF	; 255
	if(minHighTest[7]==minHighTest[4])validCtr++;
     c3a:	2c a5       	ldd	r18, Y+44	; 0x2c
     c3c:	c2 12       	cpse	r12, r18
     c3e:	01 c0       	rjmp	.+2      	; 0xc42 <gpsReqLocUblox+0x284>
     c40:	9f 5f       	subi	r25, 0xFF	; 255
	if(minHighTest[7]==minHighTest[3])validCtr++;
     c42:	2b a5       	ldd	r18, Y+43	; 0x2b
     c44:	c2 12       	cpse	r12, r18
     c46:	01 c0       	rjmp	.+2      	; 0xc4a <gpsReqLocUblox+0x28c>
     c48:	9f 5f       	subi	r25, 0xFF	; 255
	if(minHighTest[7]==minHighTest[2])validCtr++;
     c4a:	2a a5       	ldd	r18, Y+42	; 0x2a
     c4c:	c2 12       	cpse	r12, r18
     c4e:	01 c0       	rjmp	.+2      	; 0xc52 <gpsReqLocUblox+0x294>
     c50:	9f 5f       	subi	r25, 0xFF	; 255
	if(minHighTest[7]==minHighTest[1])validCtr++;
     c52:	29 a5       	ldd	r18, Y+41	; 0x29
     c54:	c2 12       	cpse	r12, r18
     c56:	01 c0       	rjmp	.+2      	; 0xc5a <gpsReqLocUblox+0x29c>
     c58:	9f 5f       	subi	r25, 0xFF	; 255
	if(minHighTest[7]==minHighTest[0])validCtr++;
     c5a:	28 a5       	ldd	r18, Y+40	; 0x28
     c5c:	c2 12       	cpse	r12, r18
     c5e:	01 c0       	rjmp	.+2      	; 0xc62 <gpsReqLocUblox+0x2a4>
     c60:	9f 5f       	subi	r25, 0xFF	; 255
	if(validCtr<6)return 666;
     c62:	96 30       	cpi	r25, 0x06	; 6
     c64:	08 f4       	brcc	.+2      	; 0xc68 <gpsReqLocUblox+0x2aa>
     c66:	ca c0       	rjmp	.+404    	; 0xdfc <gpsReqLocUblox+0x43e>
	validCtr=0;
	if(minLowTest[7]==minLowTest[6])validCtr++;
     c68:	df a0       	ldd	r13, Y+39	; 0x27
	if(minHighTest[7]==minHighTest[3])validCtr++;
	if(minHighTest[7]==minHighTest[2])validCtr++;
	if(minHighTest[7]==minHighTest[1])validCtr++;
	if(minHighTest[7]==minHighTest[0])validCtr++;
	if(validCtr<6)return 666;
	validCtr=0;
     c6a:	91 e0       	ldi	r25, 0x01	; 1
     c6c:	2e a1       	ldd	r18, Y+38	; 0x26
     c6e:	2d 11       	cpse	r18, r13
     c70:	90 e0       	ldi	r25, 0x00	; 0
	if(minLowTest[7]==minLowTest[6])validCtr++;
	if(minLowTest[7]==minLowTest[5])validCtr++;
     c72:	2d a1       	ldd	r18, Y+37	; 0x25
     c74:	d2 12       	cpse	r13, r18
     c76:	01 c0       	rjmp	.+2      	; 0xc7a <gpsReqLocUblox+0x2bc>
     c78:	9f 5f       	subi	r25, 0xFF	; 255
	if(minLowTest[7]==minLowTest[4])validCtr++;
     c7a:	2c a1       	ldd	r18, Y+36	; 0x24
     c7c:	d2 12       	cpse	r13, r18
     c7e:	01 c0       	rjmp	.+2      	; 0xc82 <gpsReqLocUblox+0x2c4>
     c80:	9f 5f       	subi	r25, 0xFF	; 255
	if(minLowTest[7]==minLowTest[3])validCtr++;
     c82:	2b a1       	ldd	r18, Y+35	; 0x23
     c84:	d2 12       	cpse	r13, r18
     c86:	01 c0       	rjmp	.+2      	; 0xc8a <gpsReqLocUblox+0x2cc>
     c88:	9f 5f       	subi	r25, 0xFF	; 255
	if(minLowTest[7]==minLowTest[2])validCtr++;
     c8a:	2a a1       	ldd	r18, Y+34	; 0x22
     c8c:	d2 12       	cpse	r13, r18
     c8e:	01 c0       	rjmp	.+2      	; 0xc92 <gpsReqLocUblox+0x2d4>
     c90:	9f 5f       	subi	r25, 0xFF	; 255
	if(minLowTest[7]==minLowTest[1])validCtr++;
     c92:	29 a1       	ldd	r18, Y+33	; 0x21
     c94:	d2 12       	cpse	r13, r18
     c96:	01 c0       	rjmp	.+2      	; 0xc9a <gpsReqLocUblox+0x2dc>
     c98:	9f 5f       	subi	r25, 0xFF	; 255
	if(minLowTest[7]==minLowTest[0])validCtr++;
     c9a:	28 a1       	ldd	r18, Y+32	; 0x20
     c9c:	d2 12       	cpse	r13, r18
     c9e:	01 c0       	rjmp	.+2      	; 0xca2 <gpsReqLocUblox+0x2e4>
     ca0:	9f 5f       	subi	r25, 0xFF	; 255
	if(validCtr<6)return 666;
     ca2:	96 30       	cpi	r25, 0x06	; 6
     ca4:	08 f4       	brcc	.+2      	; 0xca8 <gpsReqLocUblox+0x2ea>
     ca6:	ad c0       	rjmp	.+346    	; 0xe02 <gpsReqLocUblox+0x444>

	if((minLowTest[7])!=','){
     ca8:	ec e2       	ldi	r30, 0x2C	; 44
     caa:	de 16       	cp	r13, r30
     cac:	09 f4       	brne	.+2      	; 0xcb0 <gpsReqLocUblox+0x2f2>
     cae:	ac c0       	rjmp	.+344    	; 0xe08 <gpsReqLocUblox+0x44a>
	char gotHour=(asciiToHex(hourHighTest[7],hourLowTest[7]));
     cb0:	a3 da       	rcall	.-2746   	; 0x1f8 <asciiToHex>
     cb2:	78 2e       	mov	r7, r24
	char gotSecs=(asciiToHex((*(GPSSearchPtr+31)),(*(GPSSearchPtr+32))));  ///uBLOX sats
     cb4:	e0 90 fc 3e 	lds	r14, 0x3EFC	; 0x803efc <GPSSearchPtr>
     cb8:	f0 90 fd 3e 	lds	r15, 0x3EFD	; 0x803efd <GPSSearchPtr+0x1>
     cbc:	d7 01       	movw	r26, r14
     cbe:	90 96       	adiw	r26, 0x20	; 32
     cc0:	6c 91       	ld	r22, X
     cc2:	90 97       	sbiw	r26, 0x20	; 32
     cc4:	5f 96       	adiw	r26, 0x1f	; 31
     cc6:	8c 91       	ld	r24, X
     cc8:	97 da       	rcall	.-2770   	; 0x1f8 <asciiToHex>
     cca:	88 2e       	mov	r8, r24
	gpsParams[1]+=(gotHour>>2);
     ccc:	0f 2e       	mov	r0, r31
     cce:	f4 ed       	ldi	r31, 0xD4	; 212
     cd0:	af 2e       	mov	r10, r31
     cd2:	fe e3       	ldi	r31, 0x3E	; 62
     cd4:	bf 2e       	mov	r11, r31
     cd6:	f0 2d       	mov	r31, r0
     cd8:	87 2d       	mov	r24, r7
     cda:	86 95       	lsr	r24
     cdc:	86 95       	lsr	r24
     cde:	f5 01       	movw	r30, r10
     ce0:	91 81       	ldd	r25, Z+1	; 0x01
     ce2:	89 0f       	add	r24, r25
     ce4:	81 83       	std	Z+1, r24	; 0x01
	gpsParams[2]=gotHour<<6;
	gpsParams[2]+=asciiToHex(minHighTest[7],minLowTest[7]);
     ce6:	6d 2d       	mov	r22, r13
     ce8:	8c 2d       	mov	r24, r12
     cea:	86 da       	rcall	.-2804   	; 0x1f8 <asciiToHex>
     cec:	f0 e4       	ldi	r31, 0x40	; 64
     cee:	7f 9e       	mul	r7, r31
     cf0:	80 0d       	add	r24, r0
     cf2:	11 24       	eor	r1, r1
     cf4:	d5 01       	movw	r26, r10
     cf6:	12 96       	adiw	r26, 0x02	; 2
     cf8:	8c 93       	st	X, r24
	gpsParams[3]+=((char)(asciiToHex((*(GPSSearchPtr-5)),(*(GPSSearchPtr-4)))));	/*Seconds*/
     cfa:	d7 01       	movw	r26, r14
     cfc:	14 97       	sbiw	r26, 0x04	; 4
     cfe:	f7 01       	movw	r30, r14
     d00:	35 97       	sbiw	r30, 0x05	; 5
     d02:	6c 91       	ld	r22, X
     d04:	80 81       	ld	r24, Z
     d06:	78 da       	rcall	.-2832   	; 0x1f8 <asciiToHex>
     d08:	f5 01       	movw	r30, r10
     d0a:	93 81       	ldd	r25, Z+3	; 0x03
     d0c:	89 0f       	add	r24, r25
     d0e:	83 83       	std	Z+3, r24	; 0x03
	if (((char)(*(GPSSearchPtr+12)))=='N')gpsParams[4]|=0x80;//LAT SIGN. gpsParams were initialized to zero in getDate
     d10:	d7 01       	movw	r26, r14
     d12:	1c 96       	adiw	r26, 0x0c	; 12
     d14:	8c 91       	ld	r24, X
     d16:	8e 34       	cpi	r24, 0x4E	; 78
     d18:	19 f4       	brne	.+6      	; 0xd20 <gpsReqLocUblox+0x362>
     d1a:	84 81       	ldd	r24, Z+4	; 0x04
     d1c:	80 68       	ori	r24, 0x80	; 128
     d1e:	84 83       	std	Z+4, r24	; 0x04

	gpsParams[4]+=((char)(asciiToHex((*(GPSSearchPtr+1)),(*(GPSSearchPtr+2)))));	/*LAT WHOLE uBlox*/
     d20:	f7 01       	movw	r30, r14
     d22:	62 81       	ldd	r22, Z+2	; 0x02
     d24:	81 81       	ldd	r24, Z+1	; 0x01
     d26:	68 da       	rcall	.-2864   	; 0x1f8 <asciiToHex>
     d28:	0f 2e       	mov	r0, r31
     d2a:	f4 ed       	ldi	r31, 0xD4	; 212
     d2c:	cf 2e       	mov	r12, r31
     d2e:	fe e3       	ldi	r31, 0x3E	; 62
     d30:	df 2e       	mov	r13, r31
     d32:	f0 2d       	mov	r31, r0
     d34:	d6 01       	movw	r26, r12
     d36:	14 96       	adiw	r26, 0x04	; 4
     d38:	9c 91       	ld	r25, X
     d3a:	14 97       	sbiw	r26, 0x04	; 4
     d3c:	89 0f       	add	r24, r25
     d3e:	14 96       	adiw	r26, 0x04	; 4
     d40:	8c 93       	st	X, r24

	gpsParams[5]=asciiToHex(((*(GPSSearchPtr+3))),((unsigned int)(*(GPSSearchPtr+4))));//LAT FRAC
     d42:	f7 01       	movw	r30, r14
     d44:	64 81       	ldd	r22, Z+4	; 0x04
     d46:	83 81       	ldd	r24, Z+3	; 0x03
     d48:	57 da       	rcall	.-2898   	; 0x1f8 <asciiToHex>
     d4a:	d6 01       	movw	r26, r12
     d4c:	15 96       	adiw	r26, 0x05	; 5
     d4e:	8c 93       	st	X, r24
	gpsParams[6]=asciiToHex(((*(GPSSearchPtr+6))),((unsigned int)(*(GPSSearchPtr+7))));
     d50:	f7 01       	movw	r30, r14
     d52:	67 81       	ldd	r22, Z+7	; 0x07
     d54:	86 81       	ldd	r24, Z+6	; 0x06
     d56:	50 da       	rcall	.-2912   	; 0x1f8 <asciiToHex>
     d58:	d6 01       	movw	r26, r12
     d5a:	16 96       	adiw	r26, 0x06	; 6
     d5c:	8c 93       	st	X, r24
	gpsParams[7]=asciiToHex(((*(GPSSearchPtr+8))),((unsigned int)(*(GPSSearchPtr+9))));
     d5e:	f7 01       	movw	r30, r14
     d60:	61 85       	ldd	r22, Z+9	; 0x09
     d62:	80 85       	ldd	r24, Z+8	; 0x08
     d64:	49 da       	rcall	.-2926   	; 0x1f8 <asciiToHex>
     d66:	d6 01       	movw	r26, r12
     d68:	17 96       	adiw	r26, 0x07	; 7
     d6a:	8c 93       	st	X, r24

	if (((char)(*(GPSSearchPtr+26)))=='E')gpsParams[8]|=0x40;//LONG SIGN. gpsParams were initialized to zero in getDate
     d6c:	f7 01       	movw	r30, r14
     d6e:	82 8d       	ldd	r24, Z+26	; 0x1a
     d70:	85 34       	cpi	r24, 0x45	; 69
     d72:	21 f4       	brne	.+8      	; 0xd7c <gpsReqLocUblox+0x3be>
     d74:	f6 01       	movw	r30, r12
     d76:	80 85       	ldd	r24, Z+8	; 0x08
     d78:	80 64       	ori	r24, 0x40	; 64
     d7a:	80 87       	std	Z+8, r24	; 0x08
	if (((char)(*(GPSSearchPtr+14)))=='1')gpsParams[9]=100; /*high digit of Long whole uBlox*/
     d7c:	d7 01       	movw	r26, r14
     d7e:	1e 96       	adiw	r26, 0x0e	; 14
     d80:	8c 91       	ld	r24, X
     d82:	81 33       	cpi	r24, 0x31	; 49
     d84:	19 f4       	brne	.+6      	; 0xd8c <gpsReqLocUblox+0x3ce>
     d86:	84 e6       	ldi	r24, 0x64	; 100
     d88:	80 93 dd 3e 	sts	0x3EDD, r24	; 0x803edd <gpsParams+0x9>
	gpsParams[9]+=((char)(asciiToHex((*(GPSSearchPtr+15)),(*(GPSSearchPtr+16)))));	/*LONG WHOLE uBlox*/
     d8c:	f7 01       	movw	r30, r14
     d8e:	60 89       	ldd	r22, Z+16	; 0x10
     d90:	87 85       	ldd	r24, Z+15	; 0x0f
     d92:	32 da       	rcall	.-2972   	; 0x1f8 <asciiToHex>
     d94:	0f 2e       	mov	r0, r31
     d96:	f4 ed       	ldi	r31, 0xD4	; 212
     d98:	cf 2e       	mov	r12, r31
     d9a:	fe e3       	ldi	r31, 0x3E	; 62
     d9c:	df 2e       	mov	r13, r31
     d9e:	f0 2d       	mov	r31, r0
     da0:	d6 01       	movw	r26, r12
     da2:	19 96       	adiw	r26, 0x09	; 9
     da4:	9c 91       	ld	r25, X
     da6:	19 97       	sbiw	r26, 0x09	; 9
     da8:	89 0f       	add	r24, r25
     daa:	19 96       	adiw	r26, 0x09	; 9
     dac:	8c 93       	st	X, r24

	gpsParams[10]=asciiToHex(((*(GPSSearchPtr+17))),((unsigned int)(*(GPSSearchPtr+18))));//LONG FRAC
     dae:	f7 01       	movw	r30, r14
     db0:	62 89       	ldd	r22, Z+18	; 0x12
     db2:	81 89       	ldd	r24, Z+17	; 0x11
     db4:	21 da       	rcall	.-3006   	; 0x1f8 <asciiToHex>
     db6:	d6 01       	movw	r26, r12
     db8:	1a 96       	adiw	r26, 0x0a	; 10
     dba:	8c 93       	st	X, r24
	gpsParams[11]=asciiToHex(((*(GPSSearchPtr+20))),((unsigned int)(*(GPSSearchPtr+21))));
     dbc:	f7 01       	movw	r30, r14
     dbe:	65 89       	ldd	r22, Z+21	; 0x15
     dc0:	84 89       	ldd	r24, Z+20	; 0x14
     dc2:	1a da       	rcall	.-3020   	; 0x1f8 <asciiToHex>
     dc4:	d6 01       	movw	r26, r12
     dc6:	1b 96       	adiw	r26, 0x0b	; 11
     dc8:	8c 93       	st	X, r24
	gpsParams[12]=asciiToHex(((*(GPSSearchPtr+22))),((unsigned int)(*(GPSSearchPtr+23))));
     dca:	f7 01       	movw	r30, r14
     dcc:	67 89       	ldd	r22, Z+23	; 0x17
     dce:	86 89       	ldd	r24, Z+22	; 0x16
     dd0:	13 da       	rcall	.-3034   	; 0x1f8 <asciiToHex>
     dd2:	d6 01       	movw	r26, r12
     dd4:	1c 96       	adiw	r26, 0x0c	; 12
     dd6:	8c 93       	st	X, r24
     dd8:	1c 97       	sbiw	r26, 0x0c	; 12

	gpsParams[13]=timeToFix>>8;
     dda:	1d 96       	adiw	r26, 0x0d	; 13
     ddc:	9c 92       	st	X, r9
     dde:	1d 97       	sbiw	r26, 0x0d	; 13
	gpsParams[14]=timeToFix&0x00FF;
     de0:	1e 96       	adiw	r26, 0x0e	; 14
     de2:	0c 93       	st	X, r16
     de4:	1e 97       	sbiw	r26, 0x0e	; 14
	gpsParams[15]=(char)(asciiToHex((*(GPSSearchPtr+31)),(*(GPSSearchPtr+32))));  ///uBLOX sats
     de6:	1f 96       	adiw	r26, 0x0f	; 15
     de8:	8c 92       	st	X, r8


	return 0;
     dea:	80 e0       	ldi	r24, 0x00	; 0
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	15 c0       	rjmp	.+42     	; 0xe1a <gpsReqLocUblox+0x45c>
	if(hourLowTest[7]==hourLowTest[4])validCtr++;
	if(hourLowTest[7]==hourLowTest[3])validCtr++;
	if(hourLowTest[7]==hourLowTest[2])validCtr++;
	if(hourLowTest[7]==hourLowTest[1])validCtr++;
	if(hourLowTest[7]==hourLowTest[0])validCtr++;
	if(validCtr<6)return 666;
     df0:	8a e9       	ldi	r24, 0x9A	; 154
     df2:	92 e0       	ldi	r25, 0x02	; 2
     df4:	12 c0       	rjmp	.+36     	; 0xe1a <gpsReqLocUblox+0x45c>
	if(hourHighTest[7]==hourHighTest[4])validCtr++;
	if(hourHighTest[7]==hourHighTest[3])validCtr++;
	if(hourHighTest[7]==hourHighTest[2])validCtr++;
	if(hourHighTest[7]==hourHighTest[1])validCtr++;
	if(hourHighTest[7]==hourHighTest[0])validCtr++;
	if(validCtr<6)return 666;
     df6:	8a e9       	ldi	r24, 0x9A	; 154
     df8:	92 e0       	ldi	r25, 0x02	; 2
     dfa:	0f c0       	rjmp	.+30     	; 0xe1a <gpsReqLocUblox+0x45c>
	if(minHighTest[7]==minHighTest[4])validCtr++;
	if(minHighTest[7]==minHighTest[3])validCtr++;
	if(minHighTest[7]==minHighTest[2])validCtr++;
	if(minHighTest[7]==minHighTest[1])validCtr++;
	if(minHighTest[7]==minHighTest[0])validCtr++;
	if(validCtr<6)return 666;
     dfc:	8a e9       	ldi	r24, 0x9A	; 154
     dfe:	92 e0       	ldi	r25, 0x02	; 2
     e00:	0c c0       	rjmp	.+24     	; 0xe1a <gpsReqLocUblox+0x45c>
	if(minLowTest[7]==minLowTest[4])validCtr++;
	if(minLowTest[7]==minLowTest[3])validCtr++;
	if(minLowTest[7]==minLowTest[2])validCtr++;
	if(minLowTest[7]==minLowTest[1])validCtr++;
	if(minLowTest[7]==minLowTest[0])validCtr++;
	if(validCtr<6)return 666;
     e02:	8a e9       	ldi	r24, 0x9A	; 154
     e04:	92 e0       	ldi	r25, 0x02	; 2
     e06:	09 c0       	rjmp	.+18     	; 0xe1a <gpsReqLocUblox+0x45c>
	gpsParams[14]=timeToFix&0x00FF;
	gpsParams[15]=(char)(asciiToHex((*(GPSSearchPtr+31)),(*(GPSSearchPtr+32))));  ///uBLOX sats


	return 0;
}else return 666;
     e08:	8a e9       	ldi	r24, 0x9A	; 154
     e0a:	92 e0       	ldi	r25, 0x02	; 2
     e0c:	06 c0       	rjmp	.+12     	; 0xe1a <gpsReqLocUblox+0x45c>
		USART0.CTRLA |= USART_RXCIE_bm;
		endOfLineFlag=0;
		ENABLE_INTERRUPTS();
		uartIters=0;
		while((endOfLineFlag==0)&&(uartIters<15)){
			delay_ms(100);
     e0e:	64 e6       	ldi	r22, 0x64	; 100
     e10:	70 e0       	ldi	r23, 0x00	; 0
     e12:	80 e0       	ldi	r24, 0x00	; 0
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	ad da       	rcall	.-2726   	; 0x372 <delay_ms>
     e18:	20 ce       	rjmp	.-960    	; 0xa5a <gpsReqLocUblox+0x9c>
	gpsParams[15]=(char)(asciiToHex((*(GPSSearchPtr+31)),(*(GPSSearchPtr+32))));  ///uBLOX sats


	return 0;
}else return 666;
}
     e1a:	af 96       	adiw	r28, 0x2f	; 47
     e1c:	cd bf       	out	0x3d, r28	; 61
     e1e:	de bf       	out	0x3e, r29	; 62
     e20:	df 91       	pop	r29
     e22:	cf 91       	pop	r28
     e24:	1f 91       	pop	r17
     e26:	0f 91       	pop	r16
     e28:	ff 90       	pop	r15
     e2a:	ef 90       	pop	r14
     e2c:	df 90       	pop	r13
     e2e:	cf 90       	pop	r12
     e30:	bf 90       	pop	r11
     e32:	af 90       	pop	r10
     e34:	9f 90       	pop	r9
     e36:	8f 90       	pop	r8
     e38:	7f 90       	pop	r7
     e3a:	08 95       	ret

00000e3c <GPSgetTime>:
}
/***********************************************************************/
/*  GPS Try 5 Req Loc uBlox
/***********************************************************************/
short GPSgetTime(void){
	if((gpsReqLocUblox()==0)&&((*(GPSSearchPtr+43))!='X')&&(gpsParams[15]>3))return 0;
     e3c:	c0 dd       	rcall	.-1152   	; 0x9be <gpsReqLocUblox>
     e3e:	00 97       	sbiw	r24, 0x00	; 0
     e40:	61 f4       	brne	.+24     	; 0xe5a <GPSgetTime+0x1e>
     e42:	e0 91 fc 3e 	lds	r30, 0x3EFC	; 0x803efc <GPSSearchPtr>
     e46:	f0 91 fd 3e 	lds	r31, 0x3EFD	; 0x803efd <GPSSearchPtr+0x1>
     e4a:	23 a5       	ldd	r18, Z+43	; 0x2b
     e4c:	28 35       	cpi	r18, 0x58	; 88
     e4e:	29 f0       	breq	.+10     	; 0xe5a <GPSgetTime+0x1e>
     e50:	20 91 e3 3e 	lds	r18, 0x3EE3	; 0x803ee3 <gpsParams+0xf>
     e54:	24 30       	cpi	r18, 0x04	; 4
     e56:	08 f0       	brcs	.+2      	; 0xe5a <GPSgetTime+0x1e>
     e58:	41 c0       	rjmp	.+130    	; 0xedc <GPSgetTime+0xa0>
	if((gpsReqLocUblox()==0)&&((*(GPSSearchPtr+43))!='X')&&(gpsParams[15]>3))return 0;//might not need these repeats now that checksum has been added
     e5a:	b1 dd       	rcall	.-1182   	; 0x9be <gpsReqLocUblox>
     e5c:	00 97       	sbiw	r24, 0x00	; 0
     e5e:	59 f4       	brne	.+22     	; 0xe76 <GPSgetTime+0x3a>
     e60:	e0 91 fc 3e 	lds	r30, 0x3EFC	; 0x803efc <GPSSearchPtr>
     e64:	f0 91 fd 3e 	lds	r31, 0x3EFD	; 0x803efd <GPSSearchPtr+0x1>
     e68:	23 a5       	ldd	r18, Z+43	; 0x2b
     e6a:	28 35       	cpi	r18, 0x58	; 88
     e6c:	21 f0       	breq	.+8      	; 0xe76 <GPSgetTime+0x3a>
     e6e:	20 91 e3 3e 	lds	r18, 0x3EE3	; 0x803ee3 <gpsParams+0xf>
     e72:	24 30       	cpi	r18, 0x04	; 4
     e74:	98 f5       	brcc	.+102    	; 0xedc <GPSgetTime+0xa0>
	if((gpsReqLocUblox()==0)&&((*(GPSSearchPtr+43))!='X')&&(gpsParams[15]>3))return 0;
     e76:	a3 dd       	rcall	.-1210   	; 0x9be <gpsReqLocUblox>
     e78:	00 97       	sbiw	r24, 0x00	; 0
     e7a:	59 f4       	brne	.+22     	; 0xe92 <GPSgetTime+0x56>
     e7c:	e0 91 fc 3e 	lds	r30, 0x3EFC	; 0x803efc <GPSSearchPtr>
     e80:	f0 91 fd 3e 	lds	r31, 0x3EFD	; 0x803efd <GPSSearchPtr+0x1>
     e84:	23 a5       	ldd	r18, Z+43	; 0x2b
     e86:	28 35       	cpi	r18, 0x58	; 88
     e88:	21 f0       	breq	.+8      	; 0xe92 <GPSgetTime+0x56>
     e8a:	20 91 e3 3e 	lds	r18, 0x3EE3	; 0x803ee3 <gpsParams+0xf>
     e8e:	24 30       	cpi	r18, 0x04	; 4
     e90:	28 f5       	brcc	.+74     	; 0xedc <GPSgetTime+0xa0>
	if((gpsReqLocUblox()==0)&&((*(GPSSearchPtr+43))!='X')&&(gpsParams[15]>3))return 0;
     e92:	95 dd       	rcall	.-1238   	; 0x9be <gpsReqLocUblox>
     e94:	00 97       	sbiw	r24, 0x00	; 0
     e96:	59 f4       	brne	.+22     	; 0xeae <GPSgetTime+0x72>
     e98:	e0 91 fc 3e 	lds	r30, 0x3EFC	; 0x803efc <GPSSearchPtr>
     e9c:	f0 91 fd 3e 	lds	r31, 0x3EFD	; 0x803efd <GPSSearchPtr+0x1>
     ea0:	23 a5       	ldd	r18, Z+43	; 0x2b
     ea2:	28 35       	cpi	r18, 0x58	; 88
     ea4:	21 f0       	breq	.+8      	; 0xeae <GPSgetTime+0x72>
     ea6:	20 91 e3 3e 	lds	r18, 0x3EE3	; 0x803ee3 <gpsParams+0xf>
     eaa:	24 30       	cpi	r18, 0x04	; 4
     eac:	b8 f4       	brcc	.+46     	; 0xedc <GPSgetTime+0xa0>
	if((gpsReqLocUblox()==0)&&((*(GPSSearchPtr+43))!='X')&&(gpsParams[15]>3))return 0;else return 666;
     eae:	87 dd       	rcall	.-1266   	; 0x9be <gpsReqLocUblox>
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	61 f4       	brne	.+24     	; 0xecc <GPSgetTime+0x90>
     eb4:	e0 91 fc 3e 	lds	r30, 0x3EFC	; 0x803efc <GPSSearchPtr>
     eb8:	f0 91 fd 3e 	lds	r31, 0x3EFD	; 0x803efd <GPSSearchPtr+0x1>
     ebc:	23 a5       	ldd	r18, Z+43	; 0x2b
     ebe:	28 35       	cpi	r18, 0x58	; 88
     ec0:	41 f0       	breq	.+16     	; 0xed2 <GPSgetTime+0x96>
     ec2:	20 91 e3 3e 	lds	r18, 0x3EE3	; 0x803ee3 <gpsParams+0xf>
     ec6:	24 30       	cpi	r18, 0x04	; 4
     ec8:	38 f0       	brcs	.+14     	; 0xed8 <GPSgetTime+0x9c>
     eca:	08 95       	ret
     ecc:	8a e9       	ldi	r24, 0x9A	; 154
     ece:	92 e0       	ldi	r25, 0x02	; 2
     ed0:	08 95       	ret
     ed2:	8a e9       	ldi	r24, 0x9A	; 154
     ed4:	92 e0       	ldi	r25, 0x02	; 2
     ed6:	08 95       	ret
     ed8:	8a e9       	ldi	r24, 0x9A	; 154
     eda:	92 e0       	ldi	r25, 0x02	; 2
}
     edc:	08 95       	ret

00000ede <chkMagnetFast>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     ede:	05 98       	cbi	0x00, 5	; 0
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     ee0:	04 9a       	sbi	0x00, 4	; 0
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     ee2:	0c 9a       	sbi	0x01, 4	; 1
 /***********************************************************************/
 char chkMagnetFast (void){
	 TPA5_set_dir(PORT_DIR_IN);		//Sense
	 TPA4_set_dir(PORT_DIR_OUT);	//Pwr
	 PORTA_set_pin_level(4, 1);		//Pwr
	 if(PORTA_get_pin_level(5)==0){	//Sense
     ee4:	15 99       	sbic	0x02, 5	; 2
     ee6:	09 c0       	rjmp	.+18     	; 0xefa <chkMagnetFast+0x1c>
	} else {
		VPORTA.OUT &= ~(1 << pin);
     ee8:	0c 98       	cbi	0x01, 4	; 1
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     eea:	e5 e1       	ldi	r30, 0x15	; 21
     eec:	f4 e0       	ldi	r31, 0x04	; 4
     eee:	80 81       	ld	r24, Z
     ef0:	87 7f       	andi	r24, 0xF7	; 247
     ef2:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     ef4:	04 98       	cbi	0x00, 4	; 0
		 PORTA_set_pin_level(4, 0);	//Pwr
		 TPA5_set_pull_mode(PORT_PULL_OFF); //Sense. remove pullup when sw is closed
		 TPA4_set_dir(PORT_DIR_IN); //Pwr
		 return 1;
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	08 95       	ret
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     efa:	e5 e1       	ldi	r30, 0x15	; 21
     efc:	f4 e0       	ldi	r31, 0x04	; 4
     efe:	80 81       	ld	r24, Z
     f00:	88 60       	ori	r24, 0x08	; 8
     f02:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     f04:	04 98       	cbi	0x00, 4	; 0
	 }else{
		 TPA5_set_pull_mode(PORT_PULL_UP); //Sense. use pullup when sw is open
		 TPA4_set_dir(PORT_DIR_IN); //Pwr
		 return 0;
     f06:	80 e0       	ldi	r24, 0x00	; 0
		 }
}
     f08:	08 95       	ret

00000f0a <chkMagnetSlow>:
     f0a:	05 98       	cbi	0x00, 5	; 0
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     f0c:	04 9a       	sbi	0x00, 4	; 0
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     f0e:	0c 9a       	sbi	0x01, 4	; 1
 /***********************************************************************/
 char chkMagnetSlow (void){
	 TPA5_set_dir(PORT_DIR_IN);		//Sense
	 TPA4_set_dir(PORT_DIR_OUT);	//Pwr
	 PORTA_set_pin_level(4, 1);		//Pwr
	 if(PORTA_get_pin_level(5)==0){	//Sense
     f10:	15 99       	sbic	0x02, 5	; 2
     f12:	19 c0       	rjmp	.+50     	; 0xf46 <chkMagnetSlow+0x3c>
	} else {
		VPORTA.OUT &= ~(1 << pin);
     f14:	0c 98       	cbi	0x01, 4	; 1
		 PORTA_set_pin_level(4, 0);	//Pwr
		 delay_ms(150);
     f16:	66 e9       	ldi	r22, 0x96	; 150
     f18:	70 e0       	ldi	r23, 0x00	; 0
     f1a:	80 e0       	ldi	r24, 0x00	; 0
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	29 da       	rcall	.-2990   	; 0x372 <delay_ms>
		 if(PORTA_get_pin_level(5)==0){	//Sense
     f20:	15 99       	sbic	0x02, 5	; 2
     f22:	09 c0       	rjmp	.+18     	; 0xf36 <chkMagnetSlow+0x2c>
     f24:	0c 98       	cbi	0x01, 4	; 1
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     f26:	e5 e1       	ldi	r30, 0x15	; 21
     f28:	f4 e0       	ldi	r31, 0x04	; 4
     f2a:	80 81       	ld	r24, Z
     f2c:	87 7f       	andi	r24, 0xF7	; 247
     f2e:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     f30:	04 98       	cbi	0x00, 4	; 0
			 PORTA_set_pin_level(4, 0);	//Pwr
			 TPA5_set_pull_mode(PORT_PULL_OFF); //Sense. remove pullup when sw is closed
			 TPA4_set_dir(PORT_DIR_IN); //Pwr
			 return 1;
     f32:	81 e0       	ldi	r24, 0x01	; 1
     f34:	08 95       	ret
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     f36:	e5 e1       	ldi	r30, 0x15	; 21
     f38:	f4 e0       	ldi	r31, 0x04	; 4
     f3a:	80 81       	ld	r24, Z
     f3c:	88 60       	ori	r24, 0x08	; 8
     f3e:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     f40:	04 98       	cbi	0x00, 4	; 0
		 }else{
			 TPA5_set_pull_mode(PORT_PULL_UP); //Sense. use pullup when sw is open
			 TPA4_set_dir(PORT_DIR_IN); //Pwr
			 return 0;
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	08 95       	ret
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     f46:	e5 e1       	ldi	r30, 0x15	; 21
     f48:	f4 e0       	ldi	r31, 0x04	; 4
     f4a:	80 81       	ld	r24, Z
     f4c:	88 60       	ori	r24, 0x08	; 8
     f4e:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     f50:	04 98       	cbi	0x00, 4	; 0
			}
		}else{
		TPA5_set_pull_mode(PORT_PULL_UP); //Sense. use pullup when sw is open
		TPA4_set_dir(PORT_DIR_IN); //Pwr
		return 0;
     f52:	80 e0       	ldi	r24, 0x00	; 0
		}
 }
     f54:	08 95       	ret

00000f56 <calcCRC>:
/***********************************************************************/
/*  CRC   tag IDs took 550usec at intern ref clk,0div
/***********************************************************************/
unsigned short calcCRC(char cbuff[], char LEN) {
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	cf 93       	push	r28
     f5c:	df 93       	push	r29
	int i,j;
	unsigned short X = 0xFFFF;
	unsigned short Y = 0x0080;
	unsigned short Z;
	for (i=0;i<LEN;i++){       //for each element
     f5e:	66 23       	and	r22, r22
     f60:	c1 f1       	breq	.+112    	; 0xfd2 <calcCRC+0x7c>
     f62:	ec 01       	movw	r28, r24
     f64:	8c 01       	movw	r16, r24
     f66:	06 0f       	add	r16, r22
     f68:	11 1d       	adc	r17, r1
     f6a:	8f ef       	ldi	r24, 0xFF	; 255
     f6c:	9f ef       	ldi	r25, 0xFF	; 255
     f6e:	1b c0       	rjmp	.+54     	; 0xfa6 <calcCRC+0x50>
	Y = 0x0080;
	for (j=0;j<8;j++){
	Z = X;
	X <<= 1;
     f70:	bc 01       	movw	r22, r24
     f72:	66 0f       	add	r22, r22
     f74:	77 1f       	adc	r23, r23
	if((Y & cbuff[i]) != 0){ X++;};
     f76:	fd 01       	movw	r30, r26
     f78:	e4 23       	and	r30, r20
     f7a:	f5 23       	and	r31, r21
     f7c:	ef 2b       	or	r30, r31
     f7e:	11 f0       	breq	.+4      	; 0xf84 <calcCRC+0x2e>
     f80:	6f 5f       	subi	r22, 0xFF	; 255
     f82:	7f 4f       	sbci	r23, 0xFF	; 255
	Y >>= 1;
     f84:	56 95       	lsr	r21
     f86:	47 95       	ror	r20
	if ((Z & 0x8000) != 0) {X ^= 0x1021; };
     f88:	99 23       	and	r25, r25
     f8a:	34 f4       	brge	.+12     	; 0xf98 <calcCRC+0x42>
     f8c:	cb 01       	movw	r24, r22
     f8e:	e1 e2       	ldi	r30, 0x21	; 33
     f90:	8e 27       	eor	r24, r30
     f92:	e0 e1       	ldi	r30, 0x10	; 16
     f94:	9e 27       	eor	r25, r30
     f96:	01 c0       	rjmp	.+2      	; 0xf9a <calcCRC+0x44>
     f98:	cb 01       	movw	r24, r22
     f9a:	21 50       	subi	r18, 0x01	; 1
     f9c:	31 09       	sbc	r19, r1
	unsigned short X = 0xFFFF;
	unsigned short Y = 0x0080;
	unsigned short Z;
	for (i=0;i<LEN;i++){       //for each element
	Y = 0x0080;
	for (j=0;j<8;j++){
     f9e:	41 f7       	brne	.-48     	; 0xf70 <calcCRC+0x1a>
unsigned short calcCRC(char cbuff[], char LEN) {
	int i,j;
	unsigned short X = 0xFFFF;
	unsigned short Y = 0x0080;
	unsigned short Z;
	for (i=0;i<LEN;i++){       //for each element
     fa0:	0c 17       	cp	r16, r28
     fa2:	1d 07       	cpc	r17, r29
     fa4:	c1 f0       	breq	.+48     	; 0xfd6 <calcCRC+0x80>
	Y = 0x0080;
	for (j=0;j<8;j++){
	Z = X;
	X <<= 1;
	if((Y & cbuff[i]) != 0){ X++;};
     fa6:	a9 91       	ld	r26, Y+
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	28 e0       	ldi	r18, 0x08	; 8
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	40 e8       	ldi	r20, 0x80	; 128
     fb0:	50 e0       	ldi	r21, 0x00	; 0
     fb2:	de cf       	rjmp	.-68     	; 0xf70 <calcCRC+0x1a>
	if ((Z & 0x8000) != 0) {X ^= 0x1021; };
	};   //end 8x
	//    __RESET_WATCHDOG();	/*needed Jan 2014*/
	};    // end for each element
	for (i=0;i<16;i++){
	if ((X & 0x8000) != 0) { X<<=1; X ^= 0x1021; } else X <<= 1;
     fb4:	99 23       	and	r25, r25
     fb6:	3c f4       	brge	.+14     	; 0xfc6 <calcCRC+0x70>
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	41 e2       	ldi	r20, 0x21	; 33
     fbe:	84 27       	eor	r24, r20
     fc0:	40 e1       	ldi	r20, 0x10	; 16
     fc2:	94 27       	eor	r25, r20
     fc4:	02 c0       	rjmp	.+4      	; 0xfca <calcCRC+0x74>
     fc6:	88 0f       	add	r24, r24
     fc8:	99 1f       	adc	r25, r25
     fca:	21 50       	subi	r18, 0x01	; 1
     fcc:	31 09       	sbc	r19, r1
	Y >>= 1;
	if ((Z & 0x8000) != 0) {X ^= 0x1021; };
	};   //end 8x
	//    __RESET_WATCHDOG();	/*needed Jan 2014*/
	};    // end for each element
	for (i=0;i<16;i++){
     fce:	91 f7       	brne	.-28     	; 0xfb4 <calcCRC+0x5e>
     fd0:	05 c0       	rjmp	.+10     	; 0xfdc <calcCRC+0x86>
/***********************************************************************/
/*  CRC   tag IDs took 550usec at intern ref clk,0div
/***********************************************************************/
unsigned short calcCRC(char cbuff[], char LEN) {
	int i,j;
	unsigned short X = 0xFFFF;
     fd2:	8f ef       	ldi	r24, 0xFF	; 255
     fd4:	9f ef       	ldi	r25, 0xFF	; 255
	unsigned short Y = 0x0080;
	unsigned short Z;
	for (i=0;i<LEN;i++){       //for each element
     fd6:	20 e1       	ldi	r18, 0x10	; 16
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	ec cf       	rjmp	.-40     	; 0xfb4 <calcCRC+0x5e>
	};    // end for each element
	for (i=0;i<16;i++){
	if ((X & 0x8000) != 0) { X<<=1; X ^= 0x1021; } else X <<= 1;
	};     //end 16x
	return X;
}
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	1f 91       	pop	r17
     fe2:	0f 91       	pop	r16
     fe4:	08 95       	ret

00000fe6 <getByteFromBig>:
}
/*******************************************
*    GET Byte FROM
********************************************/
char getByteFromBig (void){
	DISABLE_INTERRUPTS();
     fe6:	f8 94       	cli
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     fe8:	20 98       	cbi	0x04, 0	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     fea:	e0 e3       	ldi	r30, 0x30	; 48
     fec:	f4 e0       	ldi	r31, 0x04	; 4
     fee:	80 81       	ld	r24, Z
     ff0:	87 7f       	andi	r24, 0xF7	; 247
     ff2:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     ff4:	43 98       	cbi	0x08, 3	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     ff6:	e3 e5       	ldi	r30, 0x53	; 83
     ff8:	f4 e0       	ldi	r31, 0x04	; 4
     ffa:	80 81       	ld	r24, Z
     ffc:	87 7f       	andi	r24, 0xF7	; 247
     ffe:	80 83       	st	Z, r24

	char bigTinyTimeoutCtr;
	char ret=0;

	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    1000:	53 9b       	sbis	0x0a, 3	; 10
    1002:	05 c0       	rjmp	.+10     	; 0x100e <getByteFromBig+0x28>
    1004:	89 ef       	ldi	r24, 0xF9	; 249
    1006:	53 9b       	sbis	0x0a, 3	; 10
    1008:	02 c0       	rjmp	.+4      	; 0x100e <getByteFromBig+0x28>
    100a:	81 50       	subi	r24, 0x01	; 1
	TPC3_set_pull_mode(PORT_PULL_OFF);

	char bigTinyTimeoutCtr;
	char ret=0;

	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    100c:	e1 f7       	brne	.-8      	; 0x1006 <getByteFromBig+0x20>
	if(PORTC_get_pin_level(3)==0)break;
	if(PORTB_get_pin_level(0)==1)  ret |= 0x80;
    100e:	30 9b       	sbis	0x06, 0	; 6
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <getByteFromBig+0x30>
    1012:	80 e8       	ldi	r24, 0x80	; 128
    1014:	01 c0       	rjmp	.+2      	; 0x1018 <getByteFromBig+0x32>
	TPB0_set_pull_mode(PORT_PULL_OFF);
	TPC3_set_dir(PORT_DIR_IN);
	TPC3_set_pull_mode(PORT_PULL_OFF);

	char bigTinyTimeoutCtr;
	char ret=0;
    1016:	80 e0       	ldi	r24, 0x00	; 0

	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
	if(PORTB_get_pin_level(0)==1)  ret |= 0x80;

	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==1)break;
    1018:	53 99       	sbic	0x0a, 3	; 10
    101a:	68 c0       	rjmp	.+208    	; 0x10ec <getByteFromBig+0x106>
    101c:	99 ef       	ldi	r25, 0xF9	; 249
    101e:	53 99       	sbic	0x0a, 3	; 10
    1020:	65 c0       	rjmp	.+202    	; 0x10ec <getByteFromBig+0x106>
    1022:	91 50       	subi	r25, 0x01	; 1
    1024:	e1 f7       	brne	.-8      	; 0x101e <getByteFromBig+0x38>
    1026:	62 c0       	rjmp	.+196    	; 0x10ec <getByteFromBig+0x106>
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==0)break;
    1028:	53 9b       	sbis	0x0a, 3	; 10
    102a:	02 c0       	rjmp	.+4      	; 0x1030 <getByteFromBig+0x4a>
    102c:	91 50       	subi	r25, 0x01	; 1
    102e:	e1 f7       	brne	.-8      	; 0x1028 <getByteFromBig+0x42>
	if(PORTB_get_pin_level(0)==1)  ret |= 0x40;
    1030:	30 99       	sbic	0x06, 0	; 6
    1032:	80 64       	ori	r24, 0x40	; 64

	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==1)break;
    1034:	53 99       	sbic	0x0a, 3	; 10
    1036:	5e c0       	rjmp	.+188    	; 0x10f4 <getByteFromBig+0x10e>
    1038:	99 ef       	ldi	r25, 0xF9	; 249
    103a:	53 99       	sbic	0x0a, 3	; 10
    103c:	5b c0       	rjmp	.+182    	; 0x10f4 <getByteFromBig+0x10e>
    103e:	91 50       	subi	r25, 0x01	; 1
    1040:	e1 f7       	brne	.-8      	; 0x103a <getByteFromBig+0x54>
    1042:	58 c0       	rjmp	.+176    	; 0x10f4 <getByteFromBig+0x10e>
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==0)break;
    1044:	53 9b       	sbis	0x0a, 3	; 10
    1046:	02 c0       	rjmp	.+4      	; 0x104c <getByteFromBig+0x66>
    1048:	91 50       	subi	r25, 0x01	; 1
    104a:	e1 f7       	brne	.-8      	; 0x1044 <getByteFromBig+0x5e>
	if(PORTB_get_pin_level(0)==1)  ret |= 0x20;
    104c:	30 99       	sbic	0x06, 0	; 6
    104e:	80 62       	ori	r24, 0x20	; 32

	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==1)break;
    1050:	53 99       	sbic	0x0a, 3	; 10
    1052:	54 c0       	rjmp	.+168    	; 0x10fc <getByteFromBig+0x116>
    1054:	99 ef       	ldi	r25, 0xF9	; 249
    1056:	53 99       	sbic	0x0a, 3	; 10
    1058:	51 c0       	rjmp	.+162    	; 0x10fc <getByteFromBig+0x116>
    105a:	91 50       	subi	r25, 0x01	; 1
    105c:	e1 f7       	brne	.-8      	; 0x1056 <getByteFromBig+0x70>
    105e:	4e c0       	rjmp	.+156    	; 0x10fc <getByteFromBig+0x116>
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==0)break;
    1060:	53 9b       	sbis	0x0a, 3	; 10
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <getByteFromBig+0x82>
    1064:	91 50       	subi	r25, 0x01	; 1
    1066:	e1 f7       	brne	.-8      	; 0x1060 <getByteFromBig+0x7a>
	if(PORTB_get_pin_level(0)==1)  ret |= 0x10;
    1068:	30 99       	sbic	0x06, 0	; 6
    106a:	80 61       	ori	r24, 0x10	; 16

	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==1)break;
    106c:	53 99       	sbic	0x0a, 3	; 10
    106e:	4a c0       	rjmp	.+148    	; 0x1104 <getByteFromBig+0x11e>
    1070:	99 ef       	ldi	r25, 0xF9	; 249
    1072:	53 99       	sbic	0x0a, 3	; 10
    1074:	47 c0       	rjmp	.+142    	; 0x1104 <getByteFromBig+0x11e>
    1076:	91 50       	subi	r25, 0x01	; 1
    1078:	e1 f7       	brne	.-8      	; 0x1072 <getByteFromBig+0x8c>
    107a:	44 c0       	rjmp	.+136    	; 0x1104 <getByteFromBig+0x11e>
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==0)break;
    107c:	53 9b       	sbis	0x0a, 3	; 10
    107e:	02 c0       	rjmp	.+4      	; 0x1084 <getByteFromBig+0x9e>
    1080:	91 50       	subi	r25, 0x01	; 1
    1082:	e1 f7       	brne	.-8      	; 0x107c <getByteFromBig+0x96>
	if(PORTB_get_pin_level(0)==1)  ret |= 0x08;
    1084:	30 99       	sbic	0x06, 0	; 6
    1086:	88 60       	ori	r24, 0x08	; 8

	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==1)break;
    1088:	53 99       	sbic	0x0a, 3	; 10
    108a:	40 c0       	rjmp	.+128    	; 0x110c <getByteFromBig+0x126>
    108c:	99 ef       	ldi	r25, 0xF9	; 249
    108e:	53 99       	sbic	0x0a, 3	; 10
    1090:	3d c0       	rjmp	.+122    	; 0x110c <getByteFromBig+0x126>
    1092:	91 50       	subi	r25, 0x01	; 1
    1094:	e1 f7       	brne	.-8      	; 0x108e <getByteFromBig+0xa8>
    1096:	3a c0       	rjmp	.+116    	; 0x110c <getByteFromBig+0x126>
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==0)break;
    1098:	53 9b       	sbis	0x0a, 3	; 10
    109a:	02 c0       	rjmp	.+4      	; 0x10a0 <getByteFromBig+0xba>
    109c:	91 50       	subi	r25, 0x01	; 1
    109e:	e1 f7       	brne	.-8      	; 0x1098 <getByteFromBig+0xb2>
	if(PORTB_get_pin_level(0)==1)  ret |= 0x04;
    10a0:	30 99       	sbic	0x06, 0	; 6
    10a2:	84 60       	ori	r24, 0x04	; 4

	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==1)break;
    10a4:	53 99       	sbic	0x0a, 3	; 10
    10a6:	36 c0       	rjmp	.+108    	; 0x1114 <getByteFromBig+0x12e>
    10a8:	99 ef       	ldi	r25, 0xF9	; 249
    10aa:	53 99       	sbic	0x0a, 3	; 10
    10ac:	33 c0       	rjmp	.+102    	; 0x1114 <getByteFromBig+0x12e>
    10ae:	91 50       	subi	r25, 0x01	; 1
    10b0:	e1 f7       	brne	.-8      	; 0x10aa <getByteFromBig+0xc4>
    10b2:	30 c0       	rjmp	.+96     	; 0x1114 <getByteFromBig+0x12e>
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==0)break;
    10b4:	53 9b       	sbis	0x0a, 3	; 10
    10b6:	02 c0       	rjmp	.+4      	; 0x10bc <getByteFromBig+0xd6>
    10b8:	91 50       	subi	r25, 0x01	; 1
    10ba:	e1 f7       	brne	.-8      	; 0x10b4 <getByteFromBig+0xce>
	if(PORTB_get_pin_level(0)==1)  ret |= 0x02;
    10bc:	30 99       	sbic	0x06, 0	; 6
    10be:	82 60       	ori	r24, 0x02	; 2

	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==1)break;
    10c0:	53 99       	sbic	0x0a, 3	; 10
    10c2:	2c c0       	rjmp	.+88     	; 0x111c <getByteFromBig+0x136>
    10c4:	99 ef       	ldi	r25, 0xF9	; 249
    10c6:	53 99       	sbic	0x0a, 3	; 10
    10c8:	29 c0       	rjmp	.+82     	; 0x111c <getByteFromBig+0x136>
    10ca:	91 50       	subi	r25, 0x01	; 1
    10cc:	e1 f7       	brne	.-8      	; 0x10c6 <getByteFromBig+0xe0>
    10ce:	26 c0       	rjmp	.+76     	; 0x111c <getByteFromBig+0x136>
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==0)break;
    10d0:	53 9b       	sbis	0x0a, 3	; 10
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <getByteFromBig+0xf2>
    10d4:	91 50       	subi	r25, 0x01	; 1
    10d6:	e1 f7       	brne	.-8      	; 0x10d0 <getByteFromBig+0xea>
	if(PORTB_get_pin_level(0))  ret |= 0x01;
    10d8:	30 99       	sbic	0x06, 0	; 6
    10da:	81 60       	ori	r24, 0x01	; 1
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==1)break;
    10dc:	53 99       	sbic	0x0a, 3	; 10
    10de:	22 c0       	rjmp	.+68     	; 0x1124 <getByteFromBig+0x13e>
    10e0:	99 ef       	ldi	r25, 0xF9	; 249
    10e2:	53 99       	sbic	0x0a, 3	; 10
    10e4:	1f c0       	rjmp	.+62     	; 0x1124 <getByteFromBig+0x13e>
    10e6:	91 50       	subi	r25, 0x01	; 1
    10e8:	e1 f7       	brne	.-8      	; 0x10e2 <getByteFromBig+0xfc>
    10ea:	08 95       	ret
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
	if(PORTB_get_pin_level(0)==1)  ret |= 0x80;

	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==1)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==0)break;
    10ec:	53 9b       	sbis	0x0a, 3	; 10
    10ee:	a0 cf       	rjmp	.-192    	; 0x1030 <getByteFromBig+0x4a>
    10f0:	99 ef       	ldi	r25, 0xF9	; 249
    10f2:	9a cf       	rjmp	.-204    	; 0x1028 <getByteFromBig+0x42>
	if(PORTB_get_pin_level(0)==1)  ret |= 0x40;

	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==1)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==0)break;
    10f4:	53 9b       	sbis	0x0a, 3	; 10
    10f6:	aa cf       	rjmp	.-172    	; 0x104c <getByteFromBig+0x66>
    10f8:	99 ef       	ldi	r25, 0xF9	; 249
    10fa:	a4 cf       	rjmp	.-184    	; 0x1044 <getByteFromBig+0x5e>
	if(PORTB_get_pin_level(0)==1)  ret |= 0x20;

	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==1)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==0)break;
    10fc:	53 9b       	sbis	0x0a, 3	; 10
    10fe:	b4 cf       	rjmp	.-152    	; 0x1068 <getByteFromBig+0x82>
    1100:	99 ef       	ldi	r25, 0xF9	; 249
    1102:	ae cf       	rjmp	.-164    	; 0x1060 <getByteFromBig+0x7a>
	if(PORTB_get_pin_level(0)==1)  ret |= 0x10;

	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==1)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==0)break;
    1104:	53 9b       	sbis	0x0a, 3	; 10
    1106:	be cf       	rjmp	.-132    	; 0x1084 <getByteFromBig+0x9e>
    1108:	99 ef       	ldi	r25, 0xF9	; 249
    110a:	b8 cf       	rjmp	.-144    	; 0x107c <getByteFromBig+0x96>
	if(PORTB_get_pin_level(0)==1)  ret |= 0x08;

	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==1)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==0)break;
    110c:	53 9b       	sbis	0x0a, 3	; 10
    110e:	c8 cf       	rjmp	.-112    	; 0x10a0 <getByteFromBig+0xba>
    1110:	99 ef       	ldi	r25, 0xF9	; 249
    1112:	c2 cf       	rjmp	.-124    	; 0x1098 <getByteFromBig+0xb2>
	if(PORTB_get_pin_level(0)==1)  ret |= 0x04;

	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==1)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==0)break;
    1114:	53 9b       	sbis	0x0a, 3	; 10
    1116:	d2 cf       	rjmp	.-92     	; 0x10bc <getByteFromBig+0xd6>
    1118:	99 ef       	ldi	r25, 0xF9	; 249
    111a:	cc cf       	rjmp	.-104    	; 0x10b4 <getByteFromBig+0xce>
	if(PORTB_get_pin_level(0)==1)  ret |= 0x02;

	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==1)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==0)break;
    111c:	53 9b       	sbis	0x0a, 3	; 10
    111e:	dc cf       	rjmp	.-72     	; 0x10d8 <getByteFromBig+0xf2>
    1120:	99 ef       	ldi	r25, 0xF9	; 249
    1122:	d6 cf       	rjmp	.-84     	; 0x10d0 <getByteFromBig+0xea>
	if(PORTB_get_pin_level(0))  ret |= 0x01;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==1)break;

	return ret;
}
    1124:	08 95       	ret

00001126 <sendByteToBig>:
********************************************/
void sendByteToBig (char byteToSendToBig){
	short bigTinyTimeoutCtr;
	short iters;

	if((byteToSendToBig & 0x80)==0)PORTB_set_pin_level(0, 0);
    1126:	88 23       	and	r24, r24
    1128:	14 f0       	brlt	.+4      	; 0x112e <sendByteToBig+0x8>
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    112a:	28 98       	cbi	0x05, 0	; 5
    112c:	93 c0       	rjmp	.+294    	; 0x1254 <sendByteToBig+0x12e>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    112e:	28 9a       	sbi	0x05, 0	; 5
    1130:	91 c0       	rjmp	.+290    	; 0x1254 <sendByteToBig+0x12e>
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    1132:	29 ef       	ldi	r18, 0xF9	; 249
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	53 9b       	sbis	0x0a, 3	; 10
    1138:	8f c0       	rjmp	.+286    	; 0x1258 <sendByteToBig+0x132>
    113a:	21 50       	subi	r18, 0x01	; 1
    113c:	31 09       	sbc	r19, r1
	short bigTinyTimeoutCtr;
	short iters;

	if((byteToSendToBig & 0x80)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    113e:	d9 f7       	brne	.-10     	; 0x1136 <sendByteToBig+0x10>
    1140:	8b c0       	rjmp	.+278    	; 0x1258 <sendByteToBig+0x132>
	if(PORTC_get_pin_level(3)==0)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;
    1142:	53 99       	sbic	0x0a, 3	; 10
    1144:	03 c0       	rjmp	.+6      	; 0x114c <sendByteToBig+0x26>
    1146:	21 50       	subi	r18, 0x01	; 1
    1148:	31 09       	sbc	r19, r1

	if((byteToSendToBig & 0x80)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    114a:	d9 f7       	brne	.-10     	; 0x1142 <sendByteToBig+0x1c>
	if(PORTC_get_pin_level(3)==1)break;

	if((byteToSendToBig & 0x40)==0)PORTB_set_pin_level(0, 0);
    114c:	86 fd       	sbrc	r24, 6
    114e:	02 c0       	rjmp	.+4      	; 0x1154 <sendByteToBig+0x2e>
	} else {
		VPORTB.OUT &= ~(1 << pin);
    1150:	28 98       	cbi	0x05, 0	; 5
    1152:	87 c0       	rjmp	.+270    	; 0x1262 <sendByteToBig+0x13c>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    1154:	28 9a       	sbi	0x05, 0	; 5
    1156:	85 c0       	rjmp	.+266    	; 0x1262 <sendByteToBig+0x13c>
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    1158:	29 ef       	ldi	r18, 0xF9	; 249
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	53 9b       	sbis	0x0a, 3	; 10
    115e:	83 c0       	rjmp	.+262    	; 0x1266 <sendByteToBig+0x140>
    1160:	21 50       	subi	r18, 0x01	; 1
    1162:	31 09       	sbc	r19, r1
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;

	if((byteToSendToBig & 0x40)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    1164:	d9 f7       	brne	.-10     	; 0x115c <sendByteToBig+0x36>
    1166:	7f c0       	rjmp	.+254    	; 0x1266 <sendByteToBig+0x140>
	if(PORTC_get_pin_level(3)==0)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;
    1168:	53 99       	sbic	0x0a, 3	; 10
    116a:	03 c0       	rjmp	.+6      	; 0x1172 <sendByteToBig+0x4c>
    116c:	21 50       	subi	r18, 0x01	; 1
    116e:	31 09       	sbc	r19, r1

	if((byteToSendToBig & 0x40)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    1170:	d9 f7       	brne	.-10     	; 0x1168 <sendByteToBig+0x42>
	if(PORTC_get_pin_level(3)==1)break;

	if((byteToSendToBig & 0x20)==0)PORTB_set_pin_level(0, 0);
    1172:	85 fd       	sbrc	r24, 5
    1174:	02 c0       	rjmp	.+4      	; 0x117a <sendByteToBig+0x54>
	} else {
		VPORTB.OUT &= ~(1 << pin);
    1176:	28 98       	cbi	0x05, 0	; 5
    1178:	7b c0       	rjmp	.+246    	; 0x1270 <sendByteToBig+0x14a>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    117a:	28 9a       	sbi	0x05, 0	; 5
    117c:	79 c0       	rjmp	.+242    	; 0x1270 <sendByteToBig+0x14a>
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    117e:	29 ef       	ldi	r18, 0xF9	; 249
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	53 9b       	sbis	0x0a, 3	; 10
    1184:	77 c0       	rjmp	.+238    	; 0x1274 <sendByteToBig+0x14e>
    1186:	21 50       	subi	r18, 0x01	; 1
    1188:	31 09       	sbc	r19, r1
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;

	if((byteToSendToBig & 0x20)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    118a:	d9 f7       	brne	.-10     	; 0x1182 <sendByteToBig+0x5c>
    118c:	73 c0       	rjmp	.+230    	; 0x1274 <sendByteToBig+0x14e>
	if(PORTC_get_pin_level(3)==0)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;
    118e:	53 99       	sbic	0x0a, 3	; 10
    1190:	03 c0       	rjmp	.+6      	; 0x1198 <sendByteToBig+0x72>
    1192:	21 50       	subi	r18, 0x01	; 1
    1194:	31 09       	sbc	r19, r1

	if((byteToSendToBig & 0x20)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    1196:	d9 f7       	brne	.-10     	; 0x118e <sendByteToBig+0x68>
	if(PORTC_get_pin_level(3)==1)break;

	if((byteToSendToBig & 0x10)==0)PORTB_set_pin_level(0, 0);
    1198:	84 fd       	sbrc	r24, 4
    119a:	02 c0       	rjmp	.+4      	; 0x11a0 <sendByteToBig+0x7a>
	} else {
		VPORTB.OUT &= ~(1 << pin);
    119c:	28 98       	cbi	0x05, 0	; 5
    119e:	6f c0       	rjmp	.+222    	; 0x127e <sendByteToBig+0x158>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    11a0:	28 9a       	sbi	0x05, 0	; 5
    11a2:	6d c0       	rjmp	.+218    	; 0x127e <sendByteToBig+0x158>
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    11a4:	29 ef       	ldi	r18, 0xF9	; 249
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	53 9b       	sbis	0x0a, 3	; 10
    11aa:	6b c0       	rjmp	.+214    	; 0x1282 <sendByteToBig+0x15c>
    11ac:	21 50       	subi	r18, 0x01	; 1
    11ae:	31 09       	sbc	r19, r1
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;

	if((byteToSendToBig & 0x10)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    11b0:	d9 f7       	brne	.-10     	; 0x11a8 <sendByteToBig+0x82>
    11b2:	67 c0       	rjmp	.+206    	; 0x1282 <sendByteToBig+0x15c>
	if(PORTC_get_pin_level(3)==0)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;
    11b4:	53 99       	sbic	0x0a, 3	; 10
    11b6:	03 c0       	rjmp	.+6      	; 0x11be <sendByteToBig+0x98>
    11b8:	21 50       	subi	r18, 0x01	; 1
    11ba:	31 09       	sbc	r19, r1

	if((byteToSendToBig & 0x10)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    11bc:	d9 f7       	brne	.-10     	; 0x11b4 <sendByteToBig+0x8e>
	if(PORTC_get_pin_level(3)==1)break;

	if((byteToSendToBig & 0x08)==0)PORTB_set_pin_level(0, 0);
    11be:	83 fd       	sbrc	r24, 3
    11c0:	02 c0       	rjmp	.+4      	; 0x11c6 <sendByteToBig+0xa0>
	} else {
		VPORTB.OUT &= ~(1 << pin);
    11c2:	28 98       	cbi	0x05, 0	; 5
    11c4:	63 c0       	rjmp	.+198    	; 0x128c <sendByteToBig+0x166>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    11c6:	28 9a       	sbi	0x05, 0	; 5
    11c8:	61 c0       	rjmp	.+194    	; 0x128c <sendByteToBig+0x166>
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    11ca:	29 ef       	ldi	r18, 0xF9	; 249
    11cc:	30 e0       	ldi	r19, 0x00	; 0
    11ce:	53 9b       	sbis	0x0a, 3	; 10
    11d0:	5f c0       	rjmp	.+190    	; 0x1290 <sendByteToBig+0x16a>
    11d2:	21 50       	subi	r18, 0x01	; 1
    11d4:	31 09       	sbc	r19, r1
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;

	if((byteToSendToBig & 0x08)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    11d6:	d9 f7       	brne	.-10     	; 0x11ce <sendByteToBig+0xa8>
    11d8:	5b c0       	rjmp	.+182    	; 0x1290 <sendByteToBig+0x16a>
	if(PORTC_get_pin_level(3)==0)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;
    11da:	53 99       	sbic	0x0a, 3	; 10
    11dc:	03 c0       	rjmp	.+6      	; 0x11e4 <sendByteToBig+0xbe>
    11de:	21 50       	subi	r18, 0x01	; 1
    11e0:	31 09       	sbc	r19, r1

	if((byteToSendToBig & 0x08)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    11e2:	d9 f7       	brne	.-10     	; 0x11da <sendByteToBig+0xb4>
	if(PORTC_get_pin_level(3)==1)break;

	if((byteToSendToBig & 0x04)==0)PORTB_set_pin_level(0, 0);
    11e4:	82 fd       	sbrc	r24, 2
    11e6:	02 c0       	rjmp	.+4      	; 0x11ec <sendByteToBig+0xc6>
	} else {
		VPORTB.OUT &= ~(1 << pin);
    11e8:	28 98       	cbi	0x05, 0	; 5
    11ea:	57 c0       	rjmp	.+174    	; 0x129a <sendByteToBig+0x174>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    11ec:	28 9a       	sbi	0x05, 0	; 5
    11ee:	55 c0       	rjmp	.+170    	; 0x129a <sendByteToBig+0x174>
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    11f0:	29 ef       	ldi	r18, 0xF9	; 249
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	53 9b       	sbis	0x0a, 3	; 10
    11f6:	53 c0       	rjmp	.+166    	; 0x129e <sendByteToBig+0x178>
    11f8:	21 50       	subi	r18, 0x01	; 1
    11fa:	31 09       	sbc	r19, r1
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;

	if((byteToSendToBig & 0x04)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    11fc:	d9 f7       	brne	.-10     	; 0x11f4 <sendByteToBig+0xce>
    11fe:	4f c0       	rjmp	.+158    	; 0x129e <sendByteToBig+0x178>
	if(PORTC_get_pin_level(3)==0)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;
    1200:	53 99       	sbic	0x0a, 3	; 10
    1202:	03 c0       	rjmp	.+6      	; 0x120a <sendByteToBig+0xe4>
    1204:	21 50       	subi	r18, 0x01	; 1
    1206:	31 09       	sbc	r19, r1

	if((byteToSendToBig & 0x04)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    1208:	d9 f7       	brne	.-10     	; 0x1200 <sendByteToBig+0xda>
	if(PORTC_get_pin_level(3)==1)break;

	if((byteToSendToBig & 0x02)==0)PORTB_set_pin_level(0, 0);
    120a:	81 fd       	sbrc	r24, 1
    120c:	02 c0       	rjmp	.+4      	; 0x1212 <sendByteToBig+0xec>
	} else {
		VPORTB.OUT &= ~(1 << pin);
    120e:	28 98       	cbi	0x05, 0	; 5
    1210:	4b c0       	rjmp	.+150    	; 0x12a8 <sendByteToBig+0x182>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    1212:	28 9a       	sbi	0x05, 0	; 5
    1214:	49 c0       	rjmp	.+146    	; 0x12a8 <sendByteToBig+0x182>
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    1216:	29 ef       	ldi	r18, 0xF9	; 249
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	53 9b       	sbis	0x0a, 3	; 10
    121c:	47 c0       	rjmp	.+142    	; 0x12ac <sendByteToBig+0x186>
    121e:	21 50       	subi	r18, 0x01	; 1
    1220:	31 09       	sbc	r19, r1
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;

	if((byteToSendToBig & 0x02)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    1222:	d9 f7       	brne	.-10     	; 0x121a <sendByteToBig+0xf4>
    1224:	43 c0       	rjmp	.+134    	; 0x12ac <sendByteToBig+0x186>
	if(PORTC_get_pin_level(3)==0)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;
    1226:	53 99       	sbic	0x0a, 3	; 10
    1228:	03 c0       	rjmp	.+6      	; 0x1230 <sendByteToBig+0x10a>
    122a:	21 50       	subi	r18, 0x01	; 1
    122c:	31 09       	sbc	r19, r1

	if((byteToSendToBig & 0x02)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    122e:	d9 f7       	brne	.-10     	; 0x1226 <sendByteToBig+0x100>
	if(PORTC_get_pin_level(3)==1)break;

	if((byteToSendToBig & 0x01)==0)PORTB_set_pin_level(0, 0);
    1230:	80 fd       	sbrc	r24, 0
    1232:	02 c0       	rjmp	.+4      	; 0x1238 <sendByteToBig+0x112>
	} else {
		VPORTB.OUT &= ~(1 << pin);
    1234:	28 98       	cbi	0x05, 0	; 5
    1236:	3f c0       	rjmp	.+126    	; 0x12b6 <sendByteToBig+0x190>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    1238:	28 9a       	sbi	0x05, 0	; 5
    123a:	3d c0       	rjmp	.+122    	; 0x12b6 <sendByteToBig+0x190>
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    123c:	89 ef       	ldi	r24, 0xF9	; 249
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	53 9b       	sbis	0x0a, 3	; 10
    1242:	3b c0       	rjmp	.+118    	; 0x12ba <sendByteToBig+0x194>
    1244:	01 97       	sbiw	r24, 0x01	; 1
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;

	if((byteToSendToBig & 0x01)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    1246:	e1 f7       	brne	.-8      	; 0x1240 <sendByteToBig+0x11a>
    1248:	38 c0       	rjmp	.+112    	; 0x12ba <sendByteToBig+0x194>
	if(PORTC_get_pin_level(3)==0)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;
    124a:	53 99       	sbic	0x0a, 3	; 10
    124c:	3b c0       	rjmp	.+118    	; 0x12c4 <sendByteToBig+0x19e>
    124e:	01 97       	sbiw	r24, 0x01	; 1

	if((byteToSendToBig & 0x01)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    1250:	e1 f7       	brne	.-8      	; 0x124a <sendByteToBig+0x124>
    1252:	08 95       	ret
	short iters;

	if((byteToSendToBig & 0x80)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    1254:	53 99       	sbic	0x0a, 3	; 10
    1256:	6d cf       	rjmp	.-294    	; 0x1132 <sendByteToBig+0xc>
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;
    1258:	53 99       	sbic	0x0a, 3	; 10
    125a:	78 cf       	rjmp	.-272    	; 0x114c <sendByteToBig+0x26>
    125c:	29 ef       	ldi	r18, 0xF9	; 249
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	70 cf       	rjmp	.-288    	; 0x1142 <sendByteToBig+0x1c>

	if((byteToSendToBig & 0x40)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    1262:	53 99       	sbic	0x0a, 3	; 10
    1264:	79 cf       	rjmp	.-270    	; 0x1158 <sendByteToBig+0x32>
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;
    1266:	53 99       	sbic	0x0a, 3	; 10
    1268:	84 cf       	rjmp	.-248    	; 0x1172 <sendByteToBig+0x4c>
    126a:	29 ef       	ldi	r18, 0xF9	; 249
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	7c cf       	rjmp	.-264    	; 0x1168 <sendByteToBig+0x42>

	if((byteToSendToBig & 0x20)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    1270:	53 99       	sbic	0x0a, 3	; 10
    1272:	85 cf       	rjmp	.-246    	; 0x117e <sendByteToBig+0x58>
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;
    1274:	53 99       	sbic	0x0a, 3	; 10
    1276:	90 cf       	rjmp	.-224    	; 0x1198 <sendByteToBig+0x72>
    1278:	29 ef       	ldi	r18, 0xF9	; 249
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	88 cf       	rjmp	.-240    	; 0x118e <sendByteToBig+0x68>

	if((byteToSendToBig & 0x10)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    127e:	53 99       	sbic	0x0a, 3	; 10
    1280:	91 cf       	rjmp	.-222    	; 0x11a4 <sendByteToBig+0x7e>
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;
    1282:	53 99       	sbic	0x0a, 3	; 10
    1284:	9c cf       	rjmp	.-200    	; 0x11be <sendByteToBig+0x98>
    1286:	29 ef       	ldi	r18, 0xF9	; 249
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	94 cf       	rjmp	.-216    	; 0x11b4 <sendByteToBig+0x8e>

	if((byteToSendToBig & 0x08)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    128c:	53 99       	sbic	0x0a, 3	; 10
    128e:	9d cf       	rjmp	.-198    	; 0x11ca <sendByteToBig+0xa4>
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;
    1290:	53 99       	sbic	0x0a, 3	; 10
    1292:	a8 cf       	rjmp	.-176    	; 0x11e4 <sendByteToBig+0xbe>
    1294:	29 ef       	ldi	r18, 0xF9	; 249
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	a0 cf       	rjmp	.-192    	; 0x11da <sendByteToBig+0xb4>

	if((byteToSendToBig & 0x04)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    129a:	53 99       	sbic	0x0a, 3	; 10
    129c:	a9 cf       	rjmp	.-174    	; 0x11f0 <sendByteToBig+0xca>
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;
    129e:	53 99       	sbic	0x0a, 3	; 10
    12a0:	b4 cf       	rjmp	.-152    	; 0x120a <sendByteToBig+0xe4>
    12a2:	29 ef       	ldi	r18, 0xF9	; 249
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	ac cf       	rjmp	.-168    	; 0x1200 <sendByteToBig+0xda>

	if((byteToSendToBig & 0x02)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    12a8:	53 99       	sbic	0x0a, 3	; 10
    12aa:	b5 cf       	rjmp	.-150    	; 0x1216 <sendByteToBig+0xf0>
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;
    12ac:	53 99       	sbic	0x0a, 3	; 10
    12ae:	c0 cf       	rjmp	.-128    	; 0x1230 <sendByteToBig+0x10a>
    12b0:	29 ef       	ldi	r18, 0xF9	; 249
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	b8 cf       	rjmp	.-144    	; 0x1226 <sendByteToBig+0x100>

	if((byteToSendToBig & 0x01)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    12b6:	53 99       	sbic	0x0a, 3	; 10
    12b8:	c1 cf       	rjmp	.-126    	; 0x123c <sendByteToBig+0x116>
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;
    12ba:	53 99       	sbic	0x0a, 3	; 10
    12bc:	03 c0       	rjmp	.+6      	; 0x12c4 <sendByteToBig+0x19e>
    12be:	89 ef       	ldi	r24, 0xF9	; 249
    12c0:	90 e0       	ldi	r25, 0x00	; 0
    12c2:	c3 cf       	rjmp	.-122    	; 0x124a <sendByteToBig+0x124>
    12c4:	08 95       	ret

000012c6 <getPacketFromBig>:
	TPC5_set_pull_mode(PORT_PULL_UP);	//unused
}
/*******************************************
*    GET CMD PACKET FROM BIG
********************************************/
char getPacketFromBig (void){
    12c6:	cf 92       	push	r12
    12c8:	df 92       	push	r13
    12ca:	ef 92       	push	r14
    12cc:	ff 92       	push	r15
    12ce:	0f 93       	push	r16
    12d0:	1f 93       	push	r17
    12d2:	cf 93       	push	r28
    12d4:	df 93       	push	r29
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	25 97       	sbiw	r28, 0x05	; 5
    12dc:	cd bf       	out	0x3d, r28	; 61
    12de:	de bf       	out	0x3e, r29	; 62
	unsigned short crcrc;
	char rcdArray[5];
	char iters;
	char minuteCycle;

	DISABLE_INTERRUPTS();
    12e0:	f8 94       	cli
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
    12e2:	20 98       	cbi	0x04, 0	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    12e4:	e0 e3       	ldi	r30, 0x30	; 48
    12e6:	f4 e0       	ldi	r31, 0x04	; 4
    12e8:	80 81       	ld	r24, Z
    12ea:	87 7f       	andi	r24, 0xF7	; 247
    12ec:	80 83       	st	Z, r24
	TPB0_set_dir(PORT_DIR_IN);
	TPB0_set_pull_mode(PORT_PULL_OFF);

	rcdArray[0]=getByteFromBig();
    12ee:	7b de       	rcall	.-778    	; 0xfe6 <getByteFromBig>
    12f0:	08 2f       	mov	r16, r24
    12f2:	89 83       	std	Y+1, r24	; 0x01
	rcdArray[1]=getByteFromBig();
    12f4:	78 de       	rcall	.-784    	; 0xfe6 <getByteFromBig>
    12f6:	d8 2e       	mov	r13, r24
    12f8:	8a 83       	std	Y+2, r24	; 0x02
	rcdArray[2]=getByteFromBig();
    12fa:	75 de       	rcall	.-790    	; 0xfe6 <getByteFromBig>
    12fc:	e8 2e       	mov	r14, r24
    12fe:	8b 83       	std	Y+3, r24	; 0x03
	rcdArray[3]=getByteFromBig();
    1300:	72 de       	rcall	.-796    	; 0xfe6 <getByteFromBig>
    1302:	18 2f       	mov	r17, r24
    1304:	8c 83       	std	Y+4, r24	; 0x04
	rcdArray[4]=getByteFromBig();
    1306:	6f de       	rcall	.-802    	; 0xfe6 <getByteFromBig>
    1308:	f8 2e       	mov	r15, r24
    130a:	8d 83       	std	Y+5, r24	; 0x05

	crcrc=calcCRC(rcdArray,3);
    130c:	63 e0       	ldi	r22, 0x03	; 3
    130e:	ce 01       	movw	r24, r28
    1310:	01 96       	adiw	r24, 0x01	; 1
    1312:	21 de       	rcall	.-958    	; 0xf56 <calcCRC>
	if(crcrc==(rcdArray[3]<<8)+rcdArray[4]){
    1314:	21 2f       	mov	r18, r17
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	32 2f       	mov	r19, r18
    131a:	22 27       	eor	r18, r18
    131c:	2f 0d       	add	r18, r15
    131e:	31 1d       	adc	r19, r1
    1320:	82 17       	cp	r24, r18
    1322:	93 07       	cpc	r25, r19
    1324:	09 f0       	breq	.+2      	; 0x1328 <getPacketFromBig+0x62>
    1326:	6b c0       	rjmp	.+214    	; 0x13fe <getPacketFromBig+0x138>
		rcvdCmd=rcdArray[0];
    1328:	00 93 f3 3e 	sts	0x3EF3, r16	; 0x803ef3 <rcvdCmd>
		minuteCycle=rcdArray[0]&0x07;
		switch (minuteCycle){
    132c:	07 70       	andi	r16, 0x07	; 7
    132e:	02 30       	cpi	r16, 0x02	; 2
    1330:	09 f4       	brne	.+2      	; 0x1334 <getPacketFromBig+0x6e>
    1332:	43 c0       	rjmp	.+134    	; 0x13ba <getPacketFromBig+0xf4>
    1334:	28 f4       	brcc	.+10     	; 0x1340 <getPacketFromBig+0x7a>
    1336:	00 23       	and	r16, r16
    1338:	51 f0       	breq	.+20     	; 0x134e <getPacketFromBig+0x88>
    133a:	01 30       	cpi	r16, 0x01	; 1
    133c:	b1 f1       	breq	.+108    	; 0x13aa <getPacketFromBig+0xe4>
    133e:	55 c0       	rjmp	.+170    	; 0x13ea <getPacketFromBig+0x124>
    1340:	03 30       	cpi	r16, 0x03	; 3
    1342:	09 f4       	brne	.+2      	; 0x1346 <getPacketFromBig+0x80>
    1344:	42 c0       	rjmp	.+132    	; 0x13ca <getPacketFromBig+0x104>
    1346:	04 30       	cpi	r16, 0x04	; 4
    1348:	09 f4       	brne	.+2      	; 0x134c <getPacketFromBig+0x86>
    134a:	47 c0       	rjmp	.+142    	; 0x13da <getPacketFromBig+0x114>
    134c:	4e c0       	rjmp	.+156    	; 0x13ea <getPacketFromBig+0x124>
			case 0://send packet containing the last six minutes to BIG
			motParams[5]=g_motionMinTotal;
    134e:	08 eb       	ldi	r16, 0xB8	; 184
    1350:	1e e3       	ldi	r17, 0x3E	; 62
    1352:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <_edata>
    1356:	f8 01       	movw	r30, r16
    1358:	85 83       	std	Z+5, r24	; 0x05
			motParams[16]=rcdArray[1];
    135a:	d0 8a       	std	Z+16, r13	; 0x10
			motParams[17]=rcdArray[2];
    135c:	e1 8a       	std	Z+17, r14	; 0x11
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    135e:	20 9a       	sbi	0x04, 0	; 4

			TPB0_set_dir(PORT_DIR_OUT);
			crcrc=calcCRC(motParams,21);
    1360:	65 e1       	ldi	r22, 0x15	; 21
    1362:	c8 01       	movw	r24, r16
    1364:	f8 dd       	rcall	.-1040   	; 0xf56 <calcCRC>
			motParams[21]=crcrc>>8;
    1366:	f8 01       	movw	r30, r16
    1368:	95 8b       	std	Z+21, r25	; 0x15
			motParams[22]=crcrc&0x00FF;
    136a:	86 8b       	std	Z+22, r24	; 0x16
			if((motParams[0] & 0x80)==0)PORTB_set_pin_level(0, 0);
    136c:	80 81       	ld	r24, Z
    136e:	88 23       	and	r24, r24
    1370:	14 f0       	brlt	.+4      	; 0x1376 <getPacketFromBig+0xb0>
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    1372:	28 98       	cbi	0x05, 0	; 5
    1374:	4f c0       	rjmp	.+158    	; 0x1414 <getPacketFromBig+0x14e>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    1376:	28 9a       	sbi	0x05, 0	; 5
    1378:	4d c0       	rjmp	.+154    	; 0x1414 <getPacketFromBig+0x14e>
			else PORTB_set_pin_level(0, 1);		//likely don't need this prelim setting of DAT, it sets it again in sendByteToBig()
			for(crcrc=30000;crcrc>0;crcrc--){
				if(PORTC_get_pin_level(3)==0)break;	//wait for V71 clk to go high.
    137a:	8f e2       	ldi	r24, 0x2F	; 47
    137c:	95 e7       	ldi	r25, 0x75	; 117
    137e:	53 9b       	sbis	0x0a, 3	; 10
    1380:	4b c0       	rjmp	.+150    	; 0x1418 <getPacketFromBig+0x152>
    1382:	01 97       	sbiw	r24, 0x01	; 1
			crcrc=calcCRC(motParams,21);
			motParams[21]=crcrc>>8;
			motParams[22]=crcrc&0x00FF;
			if((motParams[0] & 0x80)==0)PORTB_set_pin_level(0, 0);
			else PORTB_set_pin_level(0, 1);		//likely don't need this prelim setting of DAT, it sets it again in sendByteToBig()
			for(crcrc=30000;crcrc>0;crcrc--){
    1384:	e1 f7       	brne	.-8      	; 0x137e <getPacketFromBig+0xb8>
    1386:	48 c0       	rjmp	.+144    	; 0x1418 <getPacketFromBig+0x152>
				if(PORTC_get_pin_level(3)==0)break;	//wait for V71 clk to go high.
			}
			for(iters=0;iters<23;iters++){
				sendByteToBig(motParams[iters]);
    1388:	f7 01       	movw	r30, r14
    138a:	81 91       	ld	r24, Z+
    138c:	7f 01       	movw	r14, r30
    138e:	cb de       	rcall	.-618    	; 0x1126 <sendByteToBig>
			if((motParams[0] & 0x80)==0)PORTB_set_pin_level(0, 0);
			else PORTB_set_pin_level(0, 1);		//likely don't need this prelim setting of DAT, it sets it again in sendByteToBig()
			for(crcrc=30000;crcrc>0;crcrc--){
				if(PORTC_get_pin_level(3)==0)break;	//wait for V71 clk to go high.
			}
			for(iters=0;iters<23;iters++){
    1390:	ce 14       	cp	r12, r14
    1392:	df 04       	cpc	r13, r15
    1394:	c9 f7       	brne	.-14     	; 0x1388 <getPacketFromBig+0xc2>
    1396:	82 ed       	ldi	r24, 0xD2	; 210
    1398:	9e e3       	ldi	r25, 0x3E	; 62
				sendByteToBig(motParams[iters]);
			}
			for (iters=0;iters<SIZEOFMOTPARAMS-2;iters++)motParams[iters]=0;
    139a:	f8 01       	movw	r30, r16
    139c:	11 92       	st	Z+, r1
    139e:	8f 01       	movw	r16, r30
    13a0:	8e 17       	cp	r24, r30
    13a2:	9f 07       	cpc	r25, r31
    13a4:	d1 f7       	brne	.-12     	; 0x139a <getPacketFromBig+0xd4>
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
    13a6:	20 98       	cbi	0x04, 0	; 4
    13a8:	27 c0       	rjmp	.+78     	; 0x13f8 <getPacketFromBig+0x132>

			TPB0_set_dir(PORT_DIR_IN);
			break;
			case 1:
			motParams[0]=g_motionMinTotal;
    13aa:	e8 eb       	ldi	r30, 0xB8	; 184
    13ac:	fe e3       	ldi	r31, 0x3E	; 62
    13ae:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <_edata>
    13b2:	80 83       	st	Z, r24
			motParams[6]=rcdArray[1];
    13b4:	d6 82       	std	Z+6, r13	; 0x06
			motParams[7]=rcdArray[2];
    13b6:	e7 82       	std	Z+7, r14	; 0x07
			break;
    13b8:	1f c0       	rjmp	.+62     	; 0x13f8 <getPacketFromBig+0x132>
			case 2:
			motParams[1]=g_motionMinTotal;
    13ba:	e8 eb       	ldi	r30, 0xB8	; 184
    13bc:	fe e3       	ldi	r31, 0x3E	; 62
    13be:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <_edata>
    13c2:	81 83       	std	Z+1, r24	; 0x01
			motParams[8]=rcdArray[1];
    13c4:	d0 86       	std	Z+8, r13	; 0x08
			motParams[9]=rcdArray[2];
    13c6:	e1 86       	std	Z+9, r14	; 0x09
			break;
    13c8:	17 c0       	rjmp	.+46     	; 0x13f8 <getPacketFromBig+0x132>
			case 3:
			motParams[2]=g_motionMinTotal;
    13ca:	e8 eb       	ldi	r30, 0xB8	; 184
    13cc:	fe e3       	ldi	r31, 0x3E	; 62
    13ce:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <_edata>
    13d2:	82 83       	std	Z+2, r24	; 0x02
			motParams[10]=rcdArray[1];
    13d4:	d2 86       	std	Z+10, r13	; 0x0a
			motParams[11]=rcdArray[2];
    13d6:	e3 86       	std	Z+11, r14	; 0x0b
			break;
    13d8:	0f c0       	rjmp	.+30     	; 0x13f8 <getPacketFromBig+0x132>
			case 4:
			motParams[3]=g_motionMinTotal;
    13da:	e8 eb       	ldi	r30, 0xB8	; 184
    13dc:	fe e3       	ldi	r31, 0x3E	; 62
    13de:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <_edata>
    13e2:	83 83       	std	Z+3, r24	; 0x03
			motParams[12]=rcdArray[1];
    13e4:	d4 86       	std	Z+12, r13	; 0x0c
			motParams[13]=rcdArray[2];
    13e6:	e5 86       	std	Z+13, r14	; 0x0d
			break;
    13e8:	07 c0       	rjmp	.+14     	; 0x13f8 <getPacketFromBig+0x132>
			default:
			motParams[4]=g_motionMinTotal;
    13ea:	e8 eb       	ldi	r30, 0xB8	; 184
    13ec:	fe e3       	ldi	r31, 0x3E	; 62
    13ee:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <_edata>
    13f2:	84 83       	std	Z+4, r24	; 0x04
			motParams[14]=rcdArray[1];
    13f4:	d6 86       	std	Z+14, r13	; 0x0e
			motParams[15]=rcdArray[2];
    13f6:	e7 86       	std	Z+15, r14	; 0x0f
			break;//end of good CRC and last of six minutes
		}
		g_motionMinTotal=0;
    13f8:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <_edata>
    13fc:	03 c0       	rjmp	.+6      	; 0x1404 <getPacketFromBig+0x13e>
	}else rcvdCmd = 0x08;//else if bad CRC
    13fe:	88 e0       	ldi	r24, 0x08	; 8
    1400:	80 93 f3 3e 	sts	0x3EF3, r24	; 0x803ef3 <rcvdCmd>

	PORTC.INTFLAGS |= (1 << 1);
    1404:	e0 e4       	ldi	r30, 0x40	; 64
    1406:	f4 e0       	ldi	r31, 0x04	; 4
    1408:	81 85       	ldd	r24, Z+9	; 0x09
    140a:	82 60       	ori	r24, 0x02	; 2
    140c:	81 87       	std	Z+9, r24	; 0x09

	ENABLE_INTERRUPTS();
    140e:	78 94       	sei
	return rcdArray[0];
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	0c c0       	rjmp	.+24     	; 0x142c <getPacketFromBig+0x166>
			motParams[21]=crcrc>>8;
			motParams[22]=crcrc&0x00FF;
			if((motParams[0] & 0x80)==0)PORTB_set_pin_level(0, 0);
			else PORTB_set_pin_level(0, 1);		//likely don't need this prelim setting of DAT, it sets it again in sendByteToBig()
			for(crcrc=30000;crcrc>0;crcrc--){
				if(PORTC_get_pin_level(3)==0)break;	//wait for V71 clk to go high.
    1414:	53 99       	sbic	0x0a, 3	; 10
    1416:	b1 cf       	rjmp	.-158    	; 0x137a <getPacketFromBig+0xb4>
    1418:	08 eb       	ldi	r16, 0xB8	; 184
    141a:	1e e3       	ldi	r17, 0x3E	; 62
    141c:	0f 2e       	mov	r0, r31
    141e:	ff ec       	ldi	r31, 0xCF	; 207
    1420:	cf 2e       	mov	r12, r31
    1422:	fe e3       	ldi	r31, 0x3E	; 62
    1424:	df 2e       	mov	r13, r31
    1426:	f0 2d       	mov	r31, r0
    1428:	78 01       	movw	r14, r16
    142a:	ae cf       	rjmp	.-164    	; 0x1388 <getPacketFromBig+0xc2>

	PORTC.INTFLAGS |= (1 << 1);

	ENABLE_INTERRUPTS();
	return rcdArray[0];
}
    142c:	25 96       	adiw	r28, 0x05	; 5
    142e:	cd bf       	out	0x3d, r28	; 61
    1430:	de bf       	out	0x3e, r29	; 62
    1432:	df 91       	pop	r29
    1434:	cf 91       	pop	r28
    1436:	1f 91       	pop	r17
    1438:	0f 91       	pop	r16
    143a:	ff 90       	pop	r15
    143c:	ef 90       	pop	r14
    143e:	df 90       	pop	r13
    1440:	cf 90       	pop	r12
    1442:	08 95       	ret

00001444 <send23BytesToBig>:

}
/*******************************************
*    SEND 23 BYTEs TO BIG
********************************************/
void send23BytesToBig(char* packetForBig){
    1444:	0f 93       	push	r16
    1446:	1f 93       	push	r17
    1448:	cf 93       	push	r28
    144a:	df 93       	push	r29
    144c:	8c 01       	movw	r16, r24
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    144e:	20 9a       	sbi	0x04, 0	; 4
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    1450:	43 98       	cbi	0x08, 3	; 8
	unsigned short crcrc;
	char iters;
	TPB0_set_dir(PORT_DIR_OUT);
	TPC3_set_dir(PORT_DIR_IN);
		crcrc=calcCRC(packetForBig,21);
    1452:	65 e1       	ldi	r22, 0x15	; 21
    1454:	80 dd       	rcall	.-1280   	; 0xf56 <calcCRC>
		packetForBig[21]=crcrc>>8;
    1456:	f8 01       	movw	r30, r16
    1458:	95 8b       	std	Z+21, r25	; 0x15
		packetForBig[22]=crcrc&0x00FF;
    145a:	86 8b       	std	Z+22, r24	; 0x16
    145c:	c0 e3       	ldi	r28, 0x30	; 48
    145e:	d5 e7       	ldi	r29, 0x75	; 117
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    1460:	28 98       	cbi	0x05, 0	; 5

		for(crcrc=30000;crcrc>0;crcrc--){
			PORTB_set_pin_level(0,0);
			myDelay_hus(1);
    1462:	61 e0       	ldi	r22, 0x01	; 1
    1464:	70 e0       	ldi	r23, 0x00	; 0
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	d0 d7       	rcall	.+4000   	; 0x240c <__data_load_end+0x747>
			if(PORTC_get_pin_level(3)==0)break;
    146c:	53 9b       	sbis	0x0a, 3	; 10
    146e:	19 c0       	rjmp	.+50     	; 0x14a2 <send23BytesToBig+0x5e>
    1470:	21 97       	sbiw	r28, 0x01	; 1
	TPC3_set_dir(PORT_DIR_IN);
		crcrc=calcCRC(packetForBig,21);
		packetForBig[21]=crcrc>>8;
		packetForBig[22]=crcrc&0x00FF;

		for(crcrc=30000;crcrc>0;crcrc--){
    1472:	b1 f7       	brne	.-20     	; 0x1460 <send23BytesToBig+0x1c>
    1474:	16 c0       	rjmp	.+44     	; 0x14a2 <send23BytesToBig+0x5e>
			if(PORTC_get_pin_level(3)==0)break;
		}

		short bigTinyStartTimeoutCtr;
		for(bigTinyStartTimeoutCtr=30000;bigTinyStartTimeoutCtr>0;bigTinyStartTimeoutCtr--){
			if(PORTC_get_pin_level(3)==0)break;	//wait for V71 clk to go low.
    1476:	8f e2       	ldi	r24, 0x2F	; 47
    1478:	95 e7       	ldi	r25, 0x75	; 117
    147a:	53 9b       	sbis	0x0a, 3	; 10
    147c:	14 c0       	rjmp	.+40     	; 0x14a6 <send23BytesToBig+0x62>
    147e:	01 97       	sbiw	r24, 0x01	; 1
			myDelay_hus(1);
			if(PORTC_get_pin_level(3)==0)break;
		}

		short bigTinyStartTimeoutCtr;
		for(bigTinyStartTimeoutCtr=30000;bigTinyStartTimeoutCtr>0;bigTinyStartTimeoutCtr--){
    1480:	e1 f7       	brne	.-8      	; 0x147a <send23BytesToBig+0x36>
    1482:	11 c0       	rjmp	.+34     	; 0x14a6 <send23BytesToBig+0x62>
			if(PORTC_get_pin_level(3)==0)break;	//wait for V71 clk to go low.
		}
		for(bigTinyStartTimeoutCtr=30000;bigTinyStartTimeoutCtr>0;bigTinyStartTimeoutCtr--){
			if(PORTC_get_pin_level(3)==1)break;	//wait for V71 clk to go high.
    1484:	53 99       	sbic	0x0a, 3	; 10
    1486:	02 c0       	rjmp	.+4      	; 0x148c <send23BytesToBig+0x48>
    1488:	01 97       	sbiw	r24, 0x01	; 1

		short bigTinyStartTimeoutCtr;
		for(bigTinyStartTimeoutCtr=30000;bigTinyStartTimeoutCtr>0;bigTinyStartTimeoutCtr--){
			if(PORTC_get_pin_level(3)==0)break;	//wait for V71 clk to go low.
		}
		for(bigTinyStartTimeoutCtr=30000;bigTinyStartTimeoutCtr>0;bigTinyStartTimeoutCtr--){
    148a:	e1 f7       	brne	.-8      	; 0x1484 <send23BytesToBig+0x40>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    148c:	40 9a       	sbi	0x08, 0	; 8
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
    148e:	48 9a       	sbi	0x09, 0	; 9
    1490:	e8 01       	movw	r28, r16
    1492:	09 5e       	subi	r16, 0xE9	; 233
    1494:	1f 4f       	sbci	r17, 0xFF	; 255

		TPC0_set_dir(PORT_DIR_OUT);			//WU Big
		PORTC_set_pin_level(0, 1);			//End WakeUp

		for(iters=0;iters<23;iters++){
			sendByteToBig(packetForBig[iters]);
    1496:	89 91       	ld	r24, Y+
    1498:	46 de       	rcall	.-884    	; 0x1126 <sendByteToBig>
		}

		TPC0_set_dir(PORT_DIR_OUT);			//WU Big
		PORTC_set_pin_level(0, 1);			//End WakeUp

		for(iters=0;iters<23;iters++){
    149a:	0c 17       	cp	r16, r28
    149c:	1d 07       	cpc	r17, r29
    149e:	d9 f7       	brne	.-10     	; 0x1496 <send23BytesToBig+0x52>
    14a0:	07 c0       	rjmp	.+14     	; 0x14b0 <send23BytesToBig+0x6c>
			if(PORTC_get_pin_level(3)==0)break;
		}

		short bigTinyStartTimeoutCtr;
		for(bigTinyStartTimeoutCtr=30000;bigTinyStartTimeoutCtr>0;bigTinyStartTimeoutCtr--){
			if(PORTC_get_pin_level(3)==0)break;	//wait for V71 clk to go low.
    14a2:	53 99       	sbic	0x0a, 3	; 10
    14a4:	e8 cf       	rjmp	.-48     	; 0x1476 <send23BytesToBig+0x32>
		}
		for(bigTinyStartTimeoutCtr=30000;bigTinyStartTimeoutCtr>0;bigTinyStartTimeoutCtr--){
			if(PORTC_get_pin_level(3)==1)break;	//wait for V71 clk to go high.
    14a6:	53 99       	sbic	0x0a, 3	; 10
    14a8:	f1 cf       	rjmp	.-30     	; 0x148c <send23BytesToBig+0x48>
    14aa:	8f e2       	ldi	r24, 0x2F	; 47
    14ac:	95 e7       	ldi	r25, 0x75	; 117
    14ae:	ea cf       	rjmp	.-44     	; 0x1484 <send23BytesToBig+0x40>
		PORTC_set_pin_level(0, 1);			//End WakeUp

		for(iters=0;iters<23;iters++){
			sendByteToBig(packetForBig[iters]);
		}
}
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	1f 91       	pop	r17
    14b6:	0f 91       	pop	r16
    14b8:	08 95       	ret

000014ba <USART0_ON>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
    14ba:	23 98       	cbi	0x04, 3	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    14bc:	e3 e3       	ldi	r30, 0x33	; 51
    14be:	f4 e0       	ldi	r31, 0x04	; 4
    14c0:	80 81       	ld	r24, Z
    14c2:	87 7f       	andi	r24, 0xF7	; 247
    14c4:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    14c6:	22 9a       	sbi	0x04, 2	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    14c8:	2a 98       	cbi	0x05, 2	; 5
void USART0_ON(void){
	TPB3_set_dir(PORT_DIR_IN);
	TPB3_set_pull_mode(PORT_PULL_OFF);
	TPB2_set_dir(PORT_DIR_OUT);
	TPB2_set_level(0);
	USART0.CTRLB = 0 << USART_MPCM_bp       /* Multi-processor Communication Mode: disabled */
    14ca:	80 ec       	ldi	r24, 0xC0	; 192
    14cc:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
    14d0:	08 95       	ret

000014d2 <openGPSuBlox>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
    14d2:	24 98       	cbi	0x04, 4	; 4
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    14d4:	02 9a       	sbi	0x00, 2	; 0
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    14d6:	0a 9a       	sbi	0x01, 2	; 1
/***********************************************************************/
void openGPSuBlox (void) {
	  TPB4_set_dir(PORT_DIR_IN);	//GPS Reset  this was not connected in 2017 ARG22 board
	  TPA2_set_dir(PORT_DIR_OUT);	//GPS PWRC
	  PORTA_set_pin_level(2, 1);	//GPS PWRC
	  USART0_ON();
    14d8:	f0 df       	rcall	.-32     	; 0x14ba <USART0_ON>
	  p_GPSrcvData = g_GPSrcv_buffer;
    14da:	82 e0       	ldi	r24, 0x02	; 2
    14dc:	9e e3       	ldi	r25, 0x3E	; 62
    14de:	80 93 f9 3e 	sts	0x3EF9, r24	; 0x803ef9 <p_GPSrcvData>
    14e2:	90 93 fa 3e 	sts	0x3EFA, r25	; 0x803efa <p_GPSrcvData+0x1>
    14e6:	08 95       	ret

000014e8 <USART0_OFF>:
	| USART_RXMODE_NORMAL_gc /* Normal mode */
	| 0 << USART_SFDEN_bp    /* Start Frame Detection Enable: disabled */
	| 1 << USART_TXEN_bp;    /* Transmitter Enable: enabled */
}
void USART0_OFF(void){
	USART0.CTRLB = 0 << USART_MPCM_bp       /* Multi-processor Communication Mode: disabled */
    14e8:	10 92 06 08 	sts	0x0806, r1	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    14ec:	23 9a       	sbi	0x04, 3	; 4
    14ee:	22 9a       	sbi	0x04, 2	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    14f0:	2a 98       	cbi	0x05, 2	; 5
    14f2:	2b 98       	cbi	0x05, 3	; 5
    14f4:	08 95       	ret

000014f6 <closeGPS>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    14f6:	02 9a       	sbi	0x00, 2	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    14f8:	0a 98       	cbi	0x01, 2	; 1
void closeGPS (void) {
	  TPA2_set_dir(PORT_DIR_OUT);	//GPS PWRC
	  PORTA_set_pin_level(2, 0);	//GPS PWRC
//	  TPB4_set_dir(PORT_DIR_OUT);	//GPS Reset
//	  PORTB_set_pin_level(4, 0);	//GPS Reset
	  USART0_OFF();
    14fa:	f6 df       	rcall	.-20     	; 0x14e8 <USART0_OFF>
    14fc:	08 95       	ret

000014fe <gTryUblox>:
}else return 666;
}
/***********************************************************************/
/*  Try uBlox GPS.
/*********gpsReqNumSatsUblox**************************************************************/
short gTryUblox (void) {
    14fe:	bf 92       	push	r11
    1500:	cf 92       	push	r12
    1502:	df 92       	push	r13
    1504:	ef 92       	push	r14
    1506:	ff 92       	push	r15
    1508:	0f 93       	push	r16
    150a:	1f 93       	push	r17
    150c:	cf 93       	push	r28
    150e:	df 93       	push	r29
    1510:	68 94       	set
    1512:	dd 24       	eor	r13, r13
    1514:	d3 f8       	bld	r13, 3
		do{
			k=3;
			do{
				delay_ms(250);
				clrRx();
				USART0.CTRLA |= USART_RXCIE_bm;
    1516:	e1 2c       	mov	r14, r1
    1518:	68 94       	set
    151a:	ff 24       	eor	r15, r15
    151c:	f3 f8       	bld	r15, 3
    151e:	0f 2e       	mov	r0, r31
    1520:	fa e9       	ldi	r31, 0x9A	; 154
    1522:	bf 2e       	mov	r11, r31
    1524:	f0 2d       	mov	r31, r0
    1526:	68 94       	set
    1528:	cc 24       	eor	r12, r12
    152a:	c1 f8       	bld	r12, 1
}else return 666;
}
/***********************************************************************/
/*  Try uBlox GPS.
/*********gpsReqNumSatsUblox**************************************************************/
short gTryUblox (void) {
    152c:	d9 ef       	ldi	r29, 0xF9	; 249
    152e:	c3 e0       	ldi	r28, 0x03	; 3
	do{
		j=250;
		do{
			k=3;
			do{
				delay_ms(250);
    1530:	6a ef       	ldi	r22, 0xFA	; 250
    1532:	70 e0       	ldi	r23, 0x00	; 0
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	1c d7       	rcall	.+3640   	; 0x2372 <__data_load_end+0x6ad>
				clrRx();
    153a:	e8 d7       	rcall	.+4048   	; 0x250c <__data_load_end+0x847>
				USART0.CTRLA |= USART_RXCIE_bm;
    153c:	f7 01       	movw	r30, r14
    153e:	85 81       	ldd	r24, Z+5	; 0x05
    1540:	80 68       	ori	r24, 0x80	; 128
    1542:	85 83       	std	Z+5, r24	; 0x05
				ENABLE_INTERRUPTS();
    1544:	78 94       	sei
				probablyOK = gpsReqStatusUblox();//This takes a little more than one sec
    1546:	83 d9       	rcall	.-3322   	; 0x84e <gpsReqStatusUblox>
    1548:	8c 01       	movw	r16, r24
    154a:	c1 50       	subi	r28, 0x01	; 1
				k--;
			}while((k>0)&&(probablyOK == 666)&&(chkMagnetSlow()==0));
    154c:	39 f0       	breq	.+14     	; 0x155c <gTryUblox+0x5e>
    154e:	8a 39       	cpi	r24, 0x9A	; 154
    1550:	92 40       	sbci	r25, 0x02	; 2
    1552:	39 f5       	brne	.+78     	; 0x15a2 <gTryUblox+0xa4>
    1554:	da dc       	rcall	.-1612   	; 0xf0a <chkMagnetSlow>
    1556:	88 23       	and	r24, r24
    1558:	59 f3       	breq	.-42     	; 0x1530 <gTryUblox+0x32>
    155a:	20 c0       	rjmp	.+64     	; 0x159c <gTryUblox+0x9e>
			/*end try*/
			j--;
		}while ((j>1)&&(probablyOK == 666)&&(chkMagnetSlow()==0));  //end 4000x middle loop
    155c:	d2 30       	cpi	r29, 0x02	; 2
    155e:	58 f0       	brcs	.+22     	; 0x1576 <gTryUblox+0x78>
    1560:	0a 39       	cpi	r16, 0x9A	; 154
    1562:	82 e0       	ldi	r24, 0x02	; 2
    1564:	18 07       	cpc	r17, r24
    1566:	79 f4       	brne	.+30     	; 0x1586 <gTryUblox+0x88>
    1568:	d0 dc       	rcall	.-1632   	; 0xf0a <chkMagnetSlow>
    156a:	d1 50       	subi	r29, 0x01	; 1
    156c:	88 23       	and	r24, r24
    156e:	f9 f2       	breq	.-66     	; 0x152e <gTryUblox+0x30>
    1570:	0b 2d       	mov	r16, r11
    1572:	1c 2d       	mov	r17, r12
    1574:	08 c0       	rjmp	.+16     	; 0x1586 <gTryUblox+0x88>

		if(j<=1){
		closeGPS();
    1576:	bf df       	rcall	.-130    	; 0x14f6 <closeGPS>
		delay_ms(1000);
    1578:	68 ee       	ldi	r22, 0xE8	; 232
    157a:	73 e0       	ldi	r23, 0x03	; 3
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	f8 d6       	rcall	.+3568   	; 0x2372 <__data_load_end+0x6ad>
		openGPSuBlox();
    1582:	a7 df       	rcall	.-178    	; 0x14d2 <openGPSuBlox>
		initGPSuBlox();
    1584:	6a d7       	rcall	.+3796   	; 0x245a <__data_load_end+0x795>
    1586:	da 94       	dec	r13
		};
		i--;
	}while((i>0)&&(probablyOK == 666)&&(chkMagnetSlow()==0)); //end 8x outer loop
    1588:	dd 20       	and	r13, r13
    158a:	71 f0       	breq	.+28     	; 0x15a8 <gTryUblox+0xaa>
    158c:	0a 39       	cpi	r16, 0x9A	; 154
    158e:	e2 e0       	ldi	r30, 0x02	; 2
    1590:	1e 07       	cpc	r17, r30
    1592:	51 f4       	brne	.+20     	; 0x15a8 <gTryUblox+0xaa>
    1594:	ba dc       	rcall	.-1676   	; 0xf0a <chkMagnetSlow>
    1596:	88 23       	and	r24, r24
    1598:	49 f2       	breq	.-110    	; 0x152c <gTryUblox+0x2e>
    159a:	06 c0       	rjmp	.+12     	; 0x15a8 <gTryUblox+0xaa>
				probablyOK = gpsReqStatusUblox();//This takes a little more than one sec
				k--;
			}while((k>0)&&(probablyOK == 666)&&(chkMagnetSlow()==0));
			/*end try*/
			j--;
		}while ((j>1)&&(probablyOK == 666)&&(chkMagnetSlow()==0));  //end 4000x middle loop
    159c:	d2 30       	cpi	r29, 0x02	; 2
    159e:	20 f7       	brcc	.-56     	; 0x1568 <gTryUblox+0x6a>
    15a0:	ea cf       	rjmp	.-44     	; 0x1576 <gTryUblox+0x78>
    15a2:	d2 30       	cpi	r29, 0x02	; 2
    15a4:	80 f7       	brcc	.-32     	; 0x1586 <gTryUblox+0x88>
    15a6:	e7 cf       	rjmp	.-50     	; 0x1576 <gTryUblox+0x78>
		};
		i--;
	}while((i>0)&&(probablyOK == 666)&&(chkMagnetSlow()==0)); //end 8x outer loop

	return probablyOK; /*returns value from gpsReqStatusUblox()*/
}/***********************************************************************/
    15a8:	c8 01       	movw	r24, r16
    15aa:	df 91       	pop	r29
    15ac:	cf 91       	pop	r28
    15ae:	1f 91       	pop	r17
    15b0:	0f 91       	pop	r16
    15b2:	ff 90       	pop	r15
    15b4:	ef 90       	pop	r14
    15b6:	df 90       	pop	r13
    15b8:	cf 90       	pop	r12
    15ba:	bf 90       	pop	r11
    15bc:	08 95       	ret

000015be <sleepPins>:
	return X;
}
/*******************************************
*    SLEEP PINS
********************************************/
void sleepPins(void){
    15be:	cf 93       	push	r28
    15c0:	df 93       	push	r29
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    15c2:	00 98       	cbi	0x00, 0	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    15c4:	e0 e1       	ldi	r30, 0x10	; 16
    15c6:	f4 e0       	ldi	r31, 0x04	; 4
    15c8:	80 81       	ld	r24, Z
    15ca:	88 60       	ori	r24, 0x08	; 8
    15cc:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    15ce:	01 98       	cbi	0x00, 1	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    15d0:	e1 e1       	ldi	r30, 0x11	; 17
    15d2:	f4 e0       	ldi	r31, 0x04	; 4
    15d4:	80 81       	ld	r24, Z
    15d6:	88 60       	ori	r24, 0x08	; 8
    15d8:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    15da:	03 98       	cbi	0x00, 3	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    15dc:	e3 e1       	ldi	r30, 0x13	; 19
    15de:	f4 e0       	ldi	r31, 0x04	; 4
    15e0:	80 81       	ld	r24, Z
    15e2:	88 60       	ori	r24, 0x08	; 8
    15e4:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    15e6:	03 98       	cbi	0x00, 3	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    15e8:	80 81       	ld	r24, Z
    15ea:	88 60       	ori	r24, 0x08	; 8
    15ec:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    15ee:	06 98       	cbi	0x00, 6	; 0
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    15f0:	e6 e1       	ldi	r30, 0x16	; 22
    15f2:	f4 e0       	ldi	r31, 0x04	; 4
    15f4:	80 81       	ld	r24, Z
    15f6:	87 7f       	andi	r24, 0xF7	; 247
    15f8:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    15fa:	07 98       	cbi	0x00, 7	; 0
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    15fc:	e7 e1       	ldi	r30, 0x17	; 23
    15fe:	f4 e0       	ldi	r31, 0x04	; 4
    1600:	80 81       	ld	r24, Z
    1602:	88 60       	ori	r24, 0x08	; 8
    1604:	80 83       	st	Z, r24
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
    1606:	20 98       	cbi	0x04, 0	; 4
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    1608:	e0 e3       	ldi	r30, 0x30	; 48
    160a:	f4 e0       	ldi	r31, 0x04	; 4
    160c:	80 81       	ld	r24, Z
    160e:	88 60       	ori	r24, 0x08	; 8
    1610:	80 83       	st	Z, r24
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
    1612:	21 98       	cbi	0x04, 1	; 4
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    1614:	e1 e3       	ldi	r30, 0x31	; 49
    1616:	f4 e0       	ldi	r31, 0x04	; 4
    1618:	80 81       	ld	r24, Z
    161a:	88 60       	ori	r24, 0x08	; 8
    161c:	80 83       	st	Z, r24
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
    161e:	25 98       	cbi	0x04, 5	; 4
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    1620:	e5 e3       	ldi	r30, 0x35	; 53
    1622:	f4 e0       	ldi	r31, 0x04	; 4
    1624:	80 81       	ld	r24, Z
    1626:	88 60       	ori	r24, 0x08	; 8
    1628:	80 83       	st	Z, r24
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
    162a:	26 98       	cbi	0x04, 6	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    162c:	e6 e3       	ldi	r30, 0x36	; 54
    162e:	f4 e0       	ldi	r31, 0x04	; 4
    1630:	80 81       	ld	r24, Z
    1632:	87 7f       	andi	r24, 0xF7	; 247
    1634:	80 83       	st	Z, r24
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    1636:	80 81       	ld	r24, Z
    1638:	88 7f       	andi	r24, 0xF8	; 248
    163a:	82 60       	ori	r24, 0x02	; 2
    163c:	80 83       	st	Z, r24
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
    163e:	27 98       	cbi	0x04, 7	; 4
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    1640:	e7 e3       	ldi	r30, 0x37	; 55
    1642:	f4 e0       	ldi	r31, 0x04	; 4
    1644:	80 81       	ld	r24, Z
    1646:	88 60       	ori	r24, 0x08	; 8
    1648:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    164a:	40 98       	cbi	0x08, 0	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    164c:	e0 e5       	ldi	r30, 0x50	; 80
    164e:	f4 e0       	ldi	r31, 0x04	; 4
    1650:	80 81       	ld	r24, Z
    1652:	88 60       	ori	r24, 0x08	; 8
    1654:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    1656:	41 98       	cbi	0x08, 1	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    1658:	e1 e5       	ldi	r30, 0x51	; 81
    165a:	f4 e0       	ldi	r31, 0x04	; 4
    165c:	80 81       	ld	r24, Z
    165e:	88 60       	ori	r24, 0x08	; 8
    1660:	80 83       	st	Z, r24
 */
static inline void PORTC_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    1662:	80 81       	ld	r24, Z
    1664:	88 7f       	andi	r24, 0xF8	; 248
    1666:	85 60       	ori	r24, 0x05	; 5
    1668:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    166a:	42 98       	cbi	0x08, 2	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    166c:	e2 e5       	ldi	r30, 0x52	; 82
    166e:	f4 e0       	ldi	r31, 0x04	; 4
    1670:	80 81       	ld	r24, Z
    1672:	88 60       	ori	r24, 0x08	; 8
    1674:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    1676:	43 98       	cbi	0x08, 3	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    1678:	e3 e5       	ldi	r30, 0x53	; 83
    167a:	f4 e0       	ldi	r31, 0x04	; 4
    167c:	80 81       	ld	r24, Z
    167e:	88 60       	ori	r24, 0x08	; 8
    1680:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    1682:	44 98       	cbi	0x08, 4	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    1684:	e4 e5       	ldi	r30, 0x54	; 84
    1686:	f4 e0       	ldi	r31, 0x04	; 4
    1688:	80 81       	ld	r24, Z
    168a:	88 60       	ori	r24, 0x08	; 8
    168c:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    168e:	45 98       	cbi	0x08, 5	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    1690:	c5 e5       	ldi	r28, 0x55	; 85
    1692:	d4 e0       	ldi	r29, 0x04	; 4
    1694:	88 81       	ld	r24, Y
    1696:	88 60       	ori	r24, 0x08	; 8
    1698:	88 83       	st	Y, r24
	TPC3_set_pull_mode(PORT_PULL_UP);	//CLK from Big
	TPC4_set_dir(PORT_DIR_IN);			//Sleep to Big
	TPC4_set_pull_mode(PORT_PULL_UP);	//Sleep to Big
	TPC5_set_dir(PORT_DIR_IN);			//unused
	TPC5_set_pull_mode(PORT_PULL_UP);	//unused
	VREF_CTRLB = 0x00;//Disable VREF
    169a:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
	ADC0_CTRLA = 0x00;//ADC off
    169e:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
	closeGPS();//A2,B2,B3,B4
    16a2:	29 df       	rcall	.-430    	; 0x14f6 <closeGPS>
    16a4:	88 81       	ld	r24, Y
    16a6:	88 60       	ori	r24, 0x08	; 8
    16a8:	88 83       	st	Y, r24
	TPC5_set_pull_mode(PORT_PULL_UP);	//unused
}
    16aa:	df 91       	pop	r29
    16ac:	cf 91       	pop	r28
    16ae:	08 95       	ret

000016b0 <getGPS>:
***********************  GPS  ************************************************************************
******************************************************************************************************/
/***********************************************************************/
/*  GET GPS  returns 0 if uBloxStatus = 41 and then got good date and time and sent to BIG
/***********************************************************************/
short getGPS(void){
    16b0:	0f 93       	push	r16
    16b2:	1f 93       	push	r17
    16b4:	cf 93       	push	r28
	unsigned short crcrc;
	char iters;
	openGPSuBlox();
    16b6:	0d df       	rcall	.-486    	; 0x14d2 <openGPSuBlox>
	initGPSuBlox();
    16b8:	d0 d6       	rcall	.+3488   	; 0x245a <__data_load_end+0x795>
	initGPSuBlox();
    16ba:	cf d6       	rcall	.+3486   	; 0x245a <__data_load_end+0x795>
	initGPSuBlox();
    16bc:	ce d6       	rcall	.+3484   	; 0x245a <__data_load_end+0x795>
	timeToFix=0;
    16be:	10 92 f0 3e 	sts	0x3EF0, r1	; 0x803ef0 <timeToFix>
    16c2:	10 92 f1 3e 	sts	0x3EF1, r1	; 0x803ef1 <timeToFix+0x1>
	gpsParams[16]=getBatt();
    16c6:	17 d5       	rcall	.+2606   	; 0x20f6 <__data_load_end+0x431>
    16c8:	80 93 e4 3e 	sts	0x3EE4, r24	; 0x803ee4 <gpsParams+0x10>
	if (gTryUblox()!=0) {
    16cc:	18 df       	rcall	.-464    	; 0x14fe <gTryUblox>
    16ce:	89 2b       	or	r24, r25
    16d0:	89 f0       	breq	.+34     	; 0x16f4 <getGPS+0x44>
		if (chkMagnetSlow()){    // if GPS not good yet and magnet was installed
    16d2:	1b dc       	rcall	.-1994   	; 0xf0a <chkMagnetSlow>
    16d4:	88 23       	and	r24, r24
    16d6:	21 f0       	breq	.+8      	; 0x16e0 <getGPS+0x30>
			mState=FIRST_MAGNETOFF_CHECK;
    16d8:	84 e0       	ldi	r24, 0x04	; 4
    16da:	80 93 f8 3e 	sts	0x3EF8, r24	; 0x803ef8 <mState>
			closeGPS();
    16de:	0b df       	rcall	.-490    	; 0x14f6 <closeGPS>
		}
		closeGPS();
    16e0:	0a df       	rcall	.-492    	; 0x14f6 <closeGPS>
		return 666;
    16e2:	0a e9       	ldi	r16, 0x9A	; 154
    16e4:	12 e0       	ldi	r17, 0x02	; 2
    16e6:	24 c0       	rjmp	.+72     	; 0x1730 <getGPS+0x80>
			iters = 15;
#ifdef DO_DIAGS
	LCDshort(iters,2);
	usart_put_string("GPS RMC \r\n",10);
#endif
			while((iters>0)&&(GPSgetDate()!=0))iters--;
    16e8:	c1 50       	subi	r28, 0x01	; 1
    16ea:	29 f4       	brne	.+10     	; 0x16f6 <getGPS+0x46>
    16ec:	1f c0       	rjmp	.+62     	; 0x172c <getGPS+0x7c>
#ifdef DO_DIAGS
	LCDshort(iters,2);
	usart_put_string("GPS ZDA \r\n",10);
#endif
			while((iters>0)&&(GPSgetTime()!=0))iters--;
    16ee:	c1 11       	cpse	r28, r1
    16f0:	08 c0       	rjmp	.+16     	; 0x1702 <getGPS+0x52>
    16f2:	1a c0       	rjmp	.+52     	; 0x1728 <getGPS+0x78>
    16f4:	cf e0       	ldi	r28, 0x0F	; 15
			iters = 15;
#ifdef DO_DIAGS
	LCDshort(iters,2);
	usart_put_string("GPS RMC \r\n",10);
#endif
			while((iters>0)&&(GPSgetDate()!=0))iters--;
    16f6:	7c d8       	rcall	.-3848   	; 0x7f0 <GPSgetDate>
    16f8:	89 2b       	or	r24, r25
    16fa:	b1 f7       	brne	.-20     	; 0x16e8 <getGPS+0x38>
    16fc:	f8 cf       	rjmp	.-16     	; 0x16ee <getGPS+0x3e>
#ifdef DO_DIAGS
	LCDshort(iters,2);
	usart_put_string("GPS ZDA \r\n",10);
#endif
			while((iters>0)&&(GPSgetTime()!=0))iters--;
    16fe:	c1 50       	subi	r28, 0x01	; 1
    1700:	99 f0       	breq	.+38     	; 0x1728 <getGPS+0x78>
    1702:	9c db       	rcall	.-2248   	; 0xe3c <GPSgetTime>
    1704:	8c 01       	movw	r16, r24
    1706:	89 2b       	or	r24, r25
    1708:	d1 f7       	brne	.-12     	; 0x16fe <getGPS+0x4e>
#ifdef DO_DIAGS
	LCDshort(iters,2);
	usart_put_string("GPS GNS \r\n",10);
#endif
			closeGPS();
    170a:	f5 de       	rcall	.-534    	; 0x14f6 <closeGPS>
			if(iters>0){
    170c:	cc 23       	and	r28, r28
    170e:	31 f0       	breq	.+12     	; 0x171c <getGPS+0x6c>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    1710:	40 9a       	sbi	0x08, 0	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    1712:	48 98       	cbi	0x09, 0	; 9
				TPC0_set_dir(PORT_DIR_OUT);			//WU Big
				PORTC_set_pin_level(0, 0);			//WU Big
				send23BytesToBig(gpsParams);
    1714:	84 ed       	ldi	r24, 0xD4	; 212
    1716:	9e e3       	ldi	r25, 0x3E	; 62
    1718:	95 de       	rcall	.-726    	; 0x1444 <send23BytesToBig>
				return 0;
    171a:	0a c0       	rjmp	.+20     	; 0x1730 <getGPS+0x80>
			}
			}
			closeGPS();
    171c:	ec de       	rcall	.-552    	; 0x14f6 <closeGPS>
			sleepPins();//
    171e:	4f df       	rcall	.-354    	; 0x15be <sleepPins>
			sleepPins();//
    1720:	4e df       	rcall	.-356    	; 0x15be <sleepPins>
			return 666;
    1722:	0a e9       	ldi	r16, 0x9A	; 154
    1724:	12 e0       	ldi	r17, 0x02	; 2
    1726:	04 c0       	rjmp	.+8      	; 0x1730 <getGPS+0x80>
			while((iters>0)&&(GPSgetTime()!=0))iters--;
#ifdef DO_DIAGS
	LCDshort(iters,2);
	usart_put_string("GPS GNS \r\n",10);
#endif
			closeGPS();
    1728:	e6 de       	rcall	.-564    	; 0x14f6 <closeGPS>
    172a:	f8 cf       	rjmp	.-16     	; 0x171c <getGPS+0x6c>
    172c:	e4 de       	rcall	.-568    	; 0x14f6 <closeGPS>
    172e:	f6 cf       	rjmp	.-20     	; 0x171c <getGPS+0x6c>
			}
			closeGPS();
			sleepPins();//
			sleepPins();//
			return 666;
}
    1730:	c8 01       	movw	r24, r16
    1732:	cf 91       	pop	r28
    1734:	1f 91       	pop	r17
    1736:	0f 91       	pop	r16
    1738:	08 95       	ret

0000173a <main>:
	char iters=0;
	char LCDdata[16];
	char ibase=0;
	unsigned short crcrc;

	g_motionMinTotal=0;
    173a:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <_edata>
	g_rxDataIndex=0;

	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    173e:	d9 d4       	rcall	.+2482   	; 0x20f2 <__data_load_end+0x42d>
	WDT.CTRLA = 0;//disable watchdog
    1740:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
	DISABLE_INTERRUPTS();
    1744:	f8 94       	cli
	ccp_write_io((void*)&(CLKCTRL.OSC32KCTRLA),1 << CLKCTRL_RUNSTDBY_bp /* Run standby: enabled */);
    1746:	62 e0       	ldi	r22, 0x02	; 2
    1748:	70 e0       	ldi	r23, 0x00	; 0
    174a:	88 e7       	ldi	r24, 0x78	; 120
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	5b d2       	rcall	.+1206   	; 0x1c06 <ccp_write_io>

	mState=BEGIN;
    1750:	10 92 f8 3e 	sts	0x3EF8, r1	; 0x803ef8 <mState>
    1754:	e8 eb       	ldi	r30, 0xB8	; 184
    1756:	fe e3       	ldi	r31, 0x3E	; 62
    1758:	84 ed       	ldi	r24, 0xD4	; 212
    175a:	9e e3       	ldi	r25, 0x3E	; 62
	for (iters=0;iters<SIZEOFMOTPARAMS;iters++)motParams[iters]=0;
    175c:	11 92       	st	Z+, r1
    175e:	e8 17       	cp	r30, r24
    1760:	f9 07       	cpc	r31, r25
    1762:	e1 f7       	brne	.-8      	; 0x175c <main+0x22>
	sleepPins();
    1764:	2c df       	rcall	.-424    	; 0x15be <sleepPins>
	NOP();
    1766:	00 00       	nop
	SLPCTRL.CTRLA = 0x03;	//03=enable STANDBY SLEEP 0.0021 mA. 01=enable IDLE SLEEP  0.774 mA. 05=enable PWR DN SLEEP  0.0007 mA	but no RTC wakeup
	NOP();
	sleep_enable();
	sleep_cpu();
#endif
	DISABLE_INTERRUPTS();
    1768:	f8 94       	cli
		delay_ms(5);
		redBlink(1);
	}
#endif

	VPORTA_INTFLAGS = 0xFF;
    176a:	8f ef       	ldi	r24, 0xFF	; 255
    176c:	83 b9       	out	0x03, r24	; 3
	VPORTB_INTFLAGS = 0xFF;
    176e:	87 b9       	out	0x07, r24	; 7
 */
static inline void PORTC_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    1770:	e1 e5       	ldi	r30, 0x51	; 81
    1772:	f4 e0       	ldi	r31, 0x04	; 4
    1774:	80 81       	ld	r24, Z
    1776:	88 7f       	andi	r24, 0xF8	; 248
    1778:	85 60       	ori	r24, 0x05	; 5
    177a:	80 83       	st	Z, r24
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    177c:	e6 e3       	ldi	r30, 0x36	; 54
    177e:	f4 e0       	ldi	r31, 0x04	; 4
    1780:	80 81       	ld	r24, Z
    1782:	88 7f       	andi	r24, 0xF8	; 248
    1784:	82 60       	ori	r24, 0x02	; 2
    1786:	80 83       	st	Z, r24
//	VPORTC_INTFLAGS = 0x3F;
	TPC1_set_isc(PORT_ISC_LEVEL_gc);//C1=WAKEUP FROM BIG
	TPB6_set_isc(PORT_ISC_RISING_gc);//Motion Switch
    *((uint8_t*)0x0A4A)&=~0x31;//TCA0 Ints
    1788:	ea e4       	ldi	r30, 0x4A	; 74
    178a:	fa e0       	ldi	r31, 0x0A	; 10
    178c:	80 81       	ld	r24, Z
    178e:	8e 7c       	andi	r24, 0xCE	; 206
    1790:	80 83       	st	Z, r24
    *((uint8_t*)0x0A4B)|=0x31;//TCA0 Flags
    1792:	eb e4       	ldi	r30, 0x4B	; 75
    1794:	fa e0       	ldi	r31, 0x0A	; 10
    1796:	80 81       	ld	r24, Z
    1798:	81 63       	ori	r24, 0x31	; 49
    179a:	80 83       	st	Z, r24
	USART0_OFF();
    179c:	a5 de       	rcall	.-694    	; 0x14e8 <USART0_OFF>

	ENABLE_INTERRUPTS();
    179e:	78 94       	sei
	SLPCTRL.CTRLA = 0x03;	//03=enable STANDBY SLEEP 0.0021 mA. 01=enable IDLE SLEEP  0.774 mA. 05=enable PWR DN SLEEP  0.0007 mA	but no RTC wakeup
    17a0:	83 e0       	ldi	r24, 0x03	; 3
    17a2:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>

	USART0.BAUD = (uint16_t)USART0_BAUD_RATE(9600); /* set baud rate register for LCD*/
    17a6:	8c e6       	ldi	r24, 0x6C	; 108
    17a8:	95 e0       	ldi	r25, 0x05	; 5
    17aa:	80 93 08 08 	sts	0x0808, r24	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
    17ae:	90 93 09 08 	sts	0x0809, r25	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
	mState=BEGIN;
    17b2:	10 92 f8 3e 	sts	0x3EF8, r1	; 0x803ef8 <mState>
				rcvdCmd=0;
				mState=GET_GPS;
				}
			}
		break;
		default: mState=IDLE;
    17b6:	0f 2e       	mov	r0, r31
    17b8:	fd e0       	ldi	r31, 0x0D	; 13
    17ba:	bf 2e       	mov	r11, r31
    17bc:	f0 2d       	mov	r31, r0
				if(!getGPS())mState=IDLE; //returns 0 if uBloxStatus = 41 and then got good date and time and sent to BIG
				else mState=NO_INITIAL_GPS_LONGTERM;
			}
		break;
		case IDLE://0D
			WDT.CTRLA = 0;//disable watchdog
    17be:	c1 2c       	mov	r12, r1
    17c0:	dd 24       	eor	r13, r13
    17c2:	d3 94       	inc	r13
				mState=FIRST_MAGNETON_CHECK;
				redBlinkLong(1);
				}else{
			if((rcvdCmd&0x10)==0x10){
				rcvdCmd=0;
				mState=GET_GPS;
    17c4:	68 94       	set
    17c6:	88 24       	eor	r8, r8
    17c8:	83 f8       	bld	r8, 3
		break;
		case IDLE://0D
			WDT.CTRLA = 0;//disable watchdog
			closeGPS();
			if(chkMagnetSlow()){
				mState=FIRST_MAGNETON_CHECK;
    17ca:	d1 e0       	ldi	r29, 0x01	; 1
			if(chkMagnetSlow()){
				mState=FIRST_MAGNETON_CHECK;
				redBlinkLong(1);
			}else{
				if(!getGPS())mState=IDLE; //returns 0 if uBloxStatus = 41 and then got good date and time and sent to BIG
				else mState=NO_INITIAL_GPS_LONGTERM;
    17cc:	0f 2e       	mov	r0, r31
    17ce:	fc e0       	ldi	r31, 0x0C	; 12
    17d0:	9f 2e       	mov	r9, r31
    17d2:	f0 2d       	mov	r31, r0
			if(chkMagnetSlow()){
				mState=FIRST_MAGNETON_CHECK;
				redBlinkLong(1);
			}else{
				if(!getGPS())mState=IDLE; //returns 0 if uBloxStatus = 41 and then got good date and time and sent to BIG
				else mState=NO_INITIAL_GPS_C;
    17d4:	0f 2e       	mov	r0, r31
    17d6:	fb e0       	ldi	r31, 0x0B	; 11
    17d8:	4f 2e       	mov	r4, r31
    17da:	f0 2d       	mov	r31, r0
			if(chkMagnetSlow()){
				mState=FIRST_MAGNETON_CHECK;
				redBlinkLong(1);
			}else{
				if(!getGPS())mState=IDLE; //returns 0 if uBloxStatus = 41 and then got good date and time and sent to BIG
				else mState=NO_INITIAL_GPS_B;
    17dc:	0f 2e       	mov	r0, r31
    17de:	fa e0       	ldi	r31, 0x0A	; 10
    17e0:	5f 2e       	mov	r5, r31
    17e2:	f0 2d       	mov	r31, r0
			if(chkMagnetSlow()){
				mState=FIRST_MAGNETON_CHECK;
				redBlinkLong(1);
			}else{
				if(!getGPS())mState=IDLE; //returns 0 if uBloxStatus = 41 and then got good date and time and sent to BIG
				else mState=NO_INITIAL_GPS_A;
    17e4:	0f 2e       	mov	r0, r31
    17e6:	f9 e0       	ldi	r31, 0x09	; 9
    17e8:	6f 2e       	mov	r6, r31
    17ea:	f0 2d       	mov	r31, r0
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    17ec:	0f 2e       	mov	r0, r31
    17ee:	f4 e5       	ldi	r31, 0x54	; 84
    17f0:	ef 2e       	mov	r14, r31
    17f2:	f4 e0       	ldi	r31, 0x04	; 4
    17f4:	ff 2e       	mov	r15, r31
    17f6:	f0 2d       	mov	r31, r0
			}
		break;
		case MAGNET_WAS_RELEASED://6
			TPC4_set_dir(PORT_DIR_IN);			//Sleep to Big
			TPC4_set_pull_mode(PORT_PULL_UP);	//Sleep to Big
			mState=INITIAL_GPS;
    17f8:	0f 2e       	mov	r0, r31
    17fa:	f7 e0       	ldi	r31, 0x07	; 7
    17fc:	af 2e       	mov	r10, r31
    17fe:	f0 2d       	mov	r31, r0
			}
		break;
		case SECOND_MAGNETOFF_CHECK://5
		if(!chkMagnetSlow()){
				redBlink(1);
				mState=MAGNET_WAS_RELEASED;
    1800:	0f 2e       	mov	r0, r31
    1802:	f6 e0       	ldi	r31, 0x06	; 6
    1804:	7f 2e       	mov	r7, r31
    1806:	f0 2d       	mov	r31, r0
				redBlinkLong(1);
			}else mState=FIRST_MAGNETOFF_CHECK;
		break;
		case SECOND_MAGNETON_CHECK://2
			if(chkMagnetSlow()){
				mState=MAGNET_IS_ON;
    1808:	c3 e0       	ldi	r28, 0x03	; 3
LCDspace();
#endif
	sleepPins();
	ENABLE_INTERRUPTS();//might not have to do this every time.
	(PORT_ISC_LEVEL_gc);//C1=WAKEUP FROM BIG
	SLPCTRL.CTRLA = 0x03;	//03=enable STANDBY SLEEP 0.0021 mA. 01=enable IDLE SLEEP  0.774 mA. 05=enable PWR DN SLEEP  0.0007 mA	but no RTC wakeup
    180a:	00 e5       	ldi	r16, 0x50	; 80
    180c:	10 e0       	ldi	r17, 0x00	; 0
//#ifdef DO_DIAGS
//#endif
/**** END DEV ****/

for(;;){
	switch(mState){
    180e:	e0 91 f8 3e 	lds	r30, 0x3EF8	; 0x803ef8 <mState>
    1812:	8e 2f       	mov	r24, r30
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	8e 30       	cpi	r24, 0x0E	; 14
    1818:	91 05       	cpc	r25, r1
    181a:	08 f0       	brcs	.+2      	; 0x181e <main+0xe4>
    181c:	c9 c0       	rjmp	.+402    	; 0x19b0 <main+0x276>
    181e:	fc 01       	movw	r30, r24
    1820:	e6 5a       	subi	r30, 0xA6	; 166
    1822:	ff 4f       	sbci	r31, 0xFF	; 255
    1824:	09 94       	ijmp
		case BEGIN://0
			if(chkMagnetSlow()){
    1826:	71 db       	rcall	.-2334   	; 0xf0a <chkMagnetSlow>
    1828:	88 23       	and	r24, r24
    182a:	29 f0       	breq	.+10     	; 0x1836 <main+0xfc>
				mState=FIRST_MAGNETON_CHECK;
    182c:	d0 93 f8 3e 	sts	0x3EF8, r29	; 0x803ef8 <mState>
				redBlinkLong(1);
    1830:	8d 2f       	mov	r24, r29
    1832:	d1 d5       	rcall	.+2978   	; 0x23d6 <__data_load_end+0x711>
    1834:	bf c0       	rjmp	.+382    	; 0x19b4 <main+0x27a>
				}
			else mState=FIRST_MAGNETOFF_CHECK;
    1836:	84 e0       	ldi	r24, 0x04	; 4
    1838:	80 93 f8 3e 	sts	0x3EF8, r24	; 0x803ef8 <mState>
    183c:	bb c0       	rjmp	.+374    	; 0x19b4 <main+0x27a>
		break;
		case FIRST_MAGNETON_CHECK://1
			if(chkMagnetSlow()){
    183e:	65 db       	rcall	.-2358   	; 0xf0a <chkMagnetSlow>
    1840:	88 23       	and	r24, r24
    1842:	31 f0       	breq	.+12     	; 0x1850 <main+0x116>
				mState=SECOND_MAGNETON_CHECK;
    1844:	82 e0       	ldi	r24, 0x02	; 2
    1846:	80 93 f8 3e 	sts	0x3EF8, r24	; 0x803ef8 <mState>
				redBlinkLong(1);
    184a:	8d 2f       	mov	r24, r29
    184c:	c4 d5       	rcall	.+2952   	; 0x23d6 <__data_load_end+0x711>
    184e:	b2 c0       	rjmp	.+356    	; 0x19b4 <main+0x27a>
			}else mState=FIRST_MAGNETOFF_CHECK;
    1850:	84 e0       	ldi	r24, 0x04	; 4
    1852:	80 93 f8 3e 	sts	0x3EF8, r24	; 0x803ef8 <mState>
    1856:	ae c0       	rjmp	.+348    	; 0x19b4 <main+0x27a>
		break;
		case SECOND_MAGNETON_CHECK://2
			if(chkMagnetSlow()){
    1858:	58 db       	rcall	.-2384   	; 0xf0a <chkMagnetSlow>
    185a:	88 23       	and	r24, r24
    185c:	31 f0       	breq	.+12     	; 0x186a <main+0x130>
				mState=MAGNET_IS_ON;
    185e:	c0 93 f8 3e 	sts	0x3EF8, r28	; 0x803ef8 <mState>
				redBlinkLong(3);
    1862:	8c 2f       	mov	r24, r28
    1864:	b8 d5       	rcall	.+2928   	; 0x23d6 <__data_load_end+0x711>
				sleepPins();
    1866:	ab de       	rcall	.-682    	; 0x15be <sleepPins>
    1868:	a5 c0       	rjmp	.+330    	; 0x19b4 <main+0x27a>
			}else{
				 mState=FIRST_MAGNETOFF_CHECK;
    186a:	84 e0       	ldi	r24, 0x04	; 4
    186c:	80 93 f8 3e 	sts	0x3EF8, r24	; 0x803ef8 <mState>
    1870:	a1 c0       	rjmp	.+322    	; 0x19b4 <main+0x27a>
			}
		break;
		case MAGNET_IS_ON://3
			closeGPS();
    1872:	41 de       	rcall	.-894    	; 0x14f6 <closeGPS>
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    1874:	44 9a       	sbi	0x08, 4	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    1876:	4c 98       	cbi	0x09, 4	; 9
			TPC4_set_dir(PORT_DIR_OUT);	//Sleep to Big
			PORTC_set_pin_level(4, 0);	//Sleep V71 Low
			if(!chkMagnetFast()){
    1878:	32 db       	rcall	.-2460   	; 0xede <chkMagnetFast>
    187a:	81 11       	cpse	r24, r1
    187c:	9b c0       	rjmp	.+310    	; 0x19b4 <main+0x27a>
				mState=FIRST_MAGNETOFF_CHECK;
    187e:	84 e0       	ldi	r24, 0x04	; 4
    1880:	80 93 f8 3e 	sts	0x3EF8, r24	; 0x803ef8 <mState>
    1884:	97 c0       	rjmp	.+302    	; 0x19b4 <main+0x27a>
			}
		break;
		case FIRST_MAGNETOFF_CHECK://4
			if(!chkMagnetSlow()){
    1886:	41 db       	rcall	.-2430   	; 0xf0a <chkMagnetSlow>
    1888:	81 11       	cpse	r24, r1
    188a:	06 c0       	rjmp	.+12     	; 0x1898 <main+0x15e>
				redBlink(1);
    188c:	8d 2f       	mov	r24, r29
    188e:	88 d5       	rcall	.+2832   	; 0x23a0 <__data_load_end+0x6db>
				mState=SECOND_MAGNETOFF_CHECK;
    1890:	85 e0       	ldi	r24, 0x05	; 5
    1892:	80 93 f8 3e 	sts	0x3EF8, r24	; 0x803ef8 <mState>
    1896:	8e c0       	rjmp	.+284    	; 0x19b4 <main+0x27a>
			}else{
				mState=FIRST_MAGNETON_CHECK;
    1898:	d0 93 f8 3e 	sts	0x3EF8, r29	; 0x803ef8 <mState>
    189c:	8b c0       	rjmp	.+278    	; 0x19b4 <main+0x27a>
			}
		break;
		case SECOND_MAGNETOFF_CHECK://5
		if(!chkMagnetSlow()){
    189e:	35 db       	rcall	.-2454   	; 0xf0a <chkMagnetSlow>
    18a0:	81 11       	cpse	r24, r1
    18a2:	05 c0       	rjmp	.+10     	; 0x18ae <main+0x174>
				redBlink(1);
    18a4:	8d 2f       	mov	r24, r29
    18a6:	7c d5       	rcall	.+2808   	; 0x23a0 <__data_load_end+0x6db>
				mState=MAGNET_WAS_RELEASED;
    18a8:	70 92 f8 3e 	sts	0x3EF8, r7	; 0x803ef8 <mState>
    18ac:	83 c0       	rjmp	.+262    	; 0x19b4 <main+0x27a>
			}else{
				mState=FIRST_MAGNETON_CHECK;
    18ae:	d0 93 f8 3e 	sts	0x3EF8, r29	; 0x803ef8 <mState>
    18b2:	80 c0       	rjmp	.+256    	; 0x19b4 <main+0x27a>
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    18b4:	44 98       	cbi	0x08, 4	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    18b6:	f7 01       	movw	r30, r14
    18b8:	80 81       	ld	r24, Z
    18ba:	88 60       	ori	r24, 0x08	; 8
    18bc:	80 83       	st	Z, r24
			}
		break;
		case MAGNET_WAS_RELEASED://6
			TPC4_set_dir(PORT_DIR_IN);			//Sleep to Big
			TPC4_set_pull_mode(PORT_PULL_UP);	//Sleep to Big
			mState=INITIAL_GPS;
    18be:	a0 92 f8 3e 	sts	0x3EF8, r10	; 0x803ef8 <mState>
		break;
    18c2:	78 c0       	rjmp	.+240    	; 0x19b4 <main+0x27a>
		case INITIAL_GPS://7
			if(chkMagnetSlow()){
    18c4:	22 db       	rcall	.-2492   	; 0xf0a <chkMagnetSlow>
    18c6:	88 23       	and	r24, r24
    18c8:	29 f0       	breq	.+10     	; 0x18d4 <main+0x19a>
				mState=FIRST_MAGNETON_CHECK;
    18ca:	d0 93 f8 3e 	sts	0x3EF8, r29	; 0x803ef8 <mState>
				redBlinkLong(1);
    18ce:	8d 2f       	mov	r24, r29
    18d0:	82 d5       	rcall	.+2820   	; 0x23d6 <__data_load_end+0x711>
    18d2:	70 c0       	rjmp	.+224    	; 0x19b4 <main+0x27a>
			}else{
				if(!getGPS())mState=IDLE; //returns 0 if uBloxStatus = 41 and then got good date and time and sent to BIG
    18d4:	ed de       	rcall	.-550    	; 0x16b0 <getGPS>
    18d6:	89 2b       	or	r24, r25
    18d8:	19 f4       	brne	.+6      	; 0x18e0 <main+0x1a6>
    18da:	b0 92 f8 3e 	sts	0x3EF8, r11	; 0x803ef8 <mState>
    18de:	6a c0       	rjmp	.+212    	; 0x19b4 <main+0x27a>
				else mState=NO_INITIAL_GPS_A;
    18e0:	60 92 f8 3e 	sts	0x3EF8, r6	; 0x803ef8 <mState>
    18e4:	67 c0       	rjmp	.+206    	; 0x19b4 <main+0x27a>
			}
		break;
		case GET_GPS://8
			if(chkMagnetSlow()){
    18e6:	11 db       	rcall	.-2526   	; 0xf0a <chkMagnetSlow>
    18e8:	88 23       	and	r24, r24
    18ea:	29 f0       	breq	.+10     	; 0x18f6 <main+0x1bc>
				mState=FIRST_MAGNETON_CHECK;
    18ec:	d0 93 f8 3e 	sts	0x3EF8, r29	; 0x803ef8 <mState>
				redBlinkLong(1);
    18f0:	8d 2f       	mov	r24, r29
    18f2:	71 d5       	rcall	.+2786   	; 0x23d6 <__data_load_end+0x711>
    18f4:	5f c0       	rjmp	.+190    	; 0x19b4 <main+0x27a>
			}else{
				getGPS();
    18f6:	dc de       	rcall	.-584    	; 0x16b0 <getGPS>
				closeGPS();
    18f8:	fe dd       	rcall	.-1028   	; 0x14f6 <closeGPS>
				mState=IDLE;
    18fa:	b0 92 f8 3e 	sts	0x3EF8, r11	; 0x803ef8 <mState>
    18fe:	5a c0       	rjmp	.+180    	; 0x19b4 <main+0x27a>
			}
		break;
		case NO_INITIAL_GPS_A://9
			if(chkMagnetSlow()){
    1900:	04 db       	rcall	.-2552   	; 0xf0a <chkMagnetSlow>
    1902:	88 23       	and	r24, r24
    1904:	29 f0       	breq	.+10     	; 0x1910 <main+0x1d6>
				mState=FIRST_MAGNETON_CHECK;
    1906:	d0 93 f8 3e 	sts	0x3EF8, r29	; 0x803ef8 <mState>
				redBlinkLong(1);
    190a:	8d 2f       	mov	r24, r29
    190c:	64 d5       	rcall	.+2760   	; 0x23d6 <__data_load_end+0x711>
    190e:	52 c0       	rjmp	.+164    	; 0x19b4 <main+0x27a>
			}else{
				if(!getGPS())mState=IDLE; //returns 0 if uBloxStatus = 41 and then got good date and time and sent to BIG
    1910:	cf de       	rcall	.-610    	; 0x16b0 <getGPS>
    1912:	89 2b       	or	r24, r25
    1914:	19 f4       	brne	.+6      	; 0x191c <main+0x1e2>
    1916:	b0 92 f8 3e 	sts	0x3EF8, r11	; 0x803ef8 <mState>
    191a:	4c c0       	rjmp	.+152    	; 0x19b4 <main+0x27a>
				else mState=NO_INITIAL_GPS_B;
    191c:	50 92 f8 3e 	sts	0x3EF8, r5	; 0x803ef8 <mState>
    1920:	49 c0       	rjmp	.+146    	; 0x19b4 <main+0x27a>
			}
		break;
		case NO_INITIAL_GPS_B://A
			if(chkMagnetSlow()){
    1922:	f3 da       	rcall	.-2586   	; 0xf0a <chkMagnetSlow>
    1924:	88 23       	and	r24, r24
    1926:	29 f0       	breq	.+10     	; 0x1932 <main+0x1f8>
				mState=FIRST_MAGNETON_CHECK;
    1928:	d0 93 f8 3e 	sts	0x3EF8, r29	; 0x803ef8 <mState>
				redBlinkLong(1);
    192c:	8d 2f       	mov	r24, r29
    192e:	53 d5       	rcall	.+2726   	; 0x23d6 <__data_load_end+0x711>
    1930:	41 c0       	rjmp	.+130    	; 0x19b4 <main+0x27a>
			}else{
				if(!getGPS())mState=IDLE; //returns 0 if uBloxStatus = 41 and then got good date and time and sent to BIG
    1932:	be de       	rcall	.-644    	; 0x16b0 <getGPS>
    1934:	89 2b       	or	r24, r25
    1936:	19 f4       	brne	.+6      	; 0x193e <main+0x204>
    1938:	b0 92 f8 3e 	sts	0x3EF8, r11	; 0x803ef8 <mState>
    193c:	3b c0       	rjmp	.+118    	; 0x19b4 <main+0x27a>
				else mState=NO_INITIAL_GPS_C;
    193e:	40 92 f8 3e 	sts	0x3EF8, r4	; 0x803ef8 <mState>
    1942:	38 c0       	rjmp	.+112    	; 0x19b4 <main+0x27a>
			}
		break;
		case NO_INITIAL_GPS_C://B
			if(chkMagnetSlow()){
    1944:	e2 da       	rcall	.-2620   	; 0xf0a <chkMagnetSlow>
    1946:	88 23       	and	r24, r24
    1948:	29 f0       	breq	.+10     	; 0x1954 <main+0x21a>
				mState=FIRST_MAGNETON_CHECK;
    194a:	d0 93 f8 3e 	sts	0x3EF8, r29	; 0x803ef8 <mState>
				redBlinkLong(1);
    194e:	8d 2f       	mov	r24, r29
    1950:	42 d5       	rcall	.+2692   	; 0x23d6 <__data_load_end+0x711>
    1952:	30 c0       	rjmp	.+96     	; 0x19b4 <main+0x27a>
			}else{
				if(!getGPS())mState=IDLE; //returns 0 if uBloxStatus = 41 and then got good date and time and sent to BIG
    1954:	ad de       	rcall	.-678    	; 0x16b0 <getGPS>
    1956:	89 2b       	or	r24, r25
    1958:	19 f4       	brne	.+6      	; 0x1960 <main+0x226>
    195a:	b0 92 f8 3e 	sts	0x3EF8, r11	; 0x803ef8 <mState>
    195e:	2a c0       	rjmp	.+84     	; 0x19b4 <main+0x27a>
				else mState=NO_INITIAL_GPS_LONGTERM;
    1960:	90 92 f8 3e 	sts	0x3EF8, r9	; 0x803ef8 <mState>
    1964:	27 c0       	rjmp	.+78     	; 0x19b4 <main+0x27a>
			}
		break;
		case NO_INITIAL_GPS_LONGTERM://0C
			if(chkMagnetSlow()){
    1966:	d1 da       	rcall	.-2654   	; 0xf0a <chkMagnetSlow>
    1968:	88 23       	and	r24, r24
    196a:	29 f0       	breq	.+10     	; 0x1976 <main+0x23c>
				mState=FIRST_MAGNETON_CHECK;
    196c:	d0 93 f8 3e 	sts	0x3EF8, r29	; 0x803ef8 <mState>
				redBlinkLong(1);
    1970:	8d 2f       	mov	r24, r29
    1972:	31 d5       	rcall	.+2658   	; 0x23d6 <__data_load_end+0x711>
    1974:	1f c0       	rjmp	.+62     	; 0x19b4 <main+0x27a>
			}else{
				if(!getGPS())mState=IDLE; //returns 0 if uBloxStatus = 41 and then got good date and time and sent to BIG
    1976:	9c de       	rcall	.-712    	; 0x16b0 <getGPS>
    1978:	89 2b       	or	r24, r25
    197a:	19 f4       	brne	.+6      	; 0x1982 <main+0x248>
    197c:	b0 92 f8 3e 	sts	0x3EF8, r11	; 0x803ef8 <mState>
    1980:	19 c0       	rjmp	.+50     	; 0x19b4 <main+0x27a>
				else mState=NO_INITIAL_GPS_LONGTERM;
    1982:	90 92 f8 3e 	sts	0x3EF8, r9	; 0x803ef8 <mState>
    1986:	16 c0       	rjmp	.+44     	; 0x19b4 <main+0x27a>
			}
		break;
		case IDLE://0D
			WDT.CTRLA = 0;//disable watchdog
    1988:	f6 01       	movw	r30, r12
    198a:	10 82       	st	Z, r1
			closeGPS();
    198c:	b4 dd       	rcall	.-1176   	; 0x14f6 <closeGPS>
			if(chkMagnetSlow()){
    198e:	bd da       	rcall	.-2694   	; 0xf0a <chkMagnetSlow>
    1990:	88 23       	and	r24, r24
    1992:	29 f0       	breq	.+10     	; 0x199e <main+0x264>
				mState=FIRST_MAGNETON_CHECK;
    1994:	d0 93 f8 3e 	sts	0x3EF8, r29	; 0x803ef8 <mState>
				redBlinkLong(1);
    1998:	8d 2f       	mov	r24, r29
    199a:	1d d5       	rcall	.+2618   	; 0x23d6 <__data_load_end+0x711>
    199c:	0b c0       	rjmp	.+22     	; 0x19b4 <main+0x27a>
				}else{
			if((rcvdCmd&0x10)==0x10){
    199e:	80 91 f3 3e 	lds	r24, 0x3EF3	; 0x803ef3 <rcvdCmd>
    19a2:	84 ff       	sbrs	r24, 4
    19a4:	07 c0       	rjmp	.+14     	; 0x19b4 <main+0x27a>
				rcvdCmd=0;
    19a6:	10 92 f3 3e 	sts	0x3EF3, r1	; 0x803ef3 <rcvdCmd>
				mState=GET_GPS;
    19aa:	80 92 f8 3e 	sts	0x3EF8, r8	; 0x803ef8 <mState>
    19ae:	02 c0       	rjmp	.+4      	; 0x19b4 <main+0x27a>
				}
			}
		break;
		default: mState=IDLE;
    19b0:	b0 92 f8 3e 	sts	0x3EF8, r11	; 0x803ef8 <mState>
#ifdef DO_DIAGS
LCDshort(mState,2);
LCDspace();
LCDspace();
#endif
	sleepPins();
    19b4:	04 de       	rcall	.-1016   	; 0x15be <sleepPins>
	ENABLE_INTERRUPTS();//might not have to do this every time.
    19b6:	78 94       	sei
	(PORT_ISC_LEVEL_gc);//C1=WAKEUP FROM BIG
	SLPCTRL.CTRLA = 0x03;	//03=enable STANDBY SLEEP 0.0021 mA. 01=enable IDLE SLEEP  0.774 mA. 05=enable PWR DN SLEEP  0.0007 mA	but no RTC wakeup
    19b8:	f8 01       	movw	r30, r16
    19ba:	c0 83       	st	Z, r28
	NOP();
    19bc:	00 00       	nop
	SLEEP();
    19be:	88 95       	sleep
}
    19c0:	26 cf       	rjmp	.-436    	; 0x180e <main+0xd4>

000019c2 <__vector_5>:
***********************************************************************
***********************************************************************/
/***********************************************************************
*  ISR WAKEUP FROM BIG
***********************************************************************/
ISR(PORTC_PORT_vect){
    19c2:	1f 92       	push	r1
    19c4:	0f 92       	push	r0
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	0f 92       	push	r0
    19ca:	11 24       	eor	r1, r1
    19cc:	2f 93       	push	r18
    19ce:	3f 93       	push	r19
    19d0:	4f 93       	push	r20
    19d2:	5f 93       	push	r21
    19d4:	6f 93       	push	r22
    19d6:	7f 93       	push	r23
    19d8:	8f 93       	push	r24
    19da:	9f 93       	push	r25
    19dc:	af 93       	push	r26
    19de:	bf 93       	push	r27
    19e0:	cf 93       	push	r28
    19e2:	df 93       	push	r29
    19e4:	ef 93       	push	r30
    19e6:	ff 93       	push	r31
	DISABLE_INTERRUPTS();
    19e8:	f8 94       	cli
 */
static inline void PORTC_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    19ea:	e1 e5       	ldi	r30, 0x51	; 81
    19ec:	f4 e0       	ldi	r31, 0x04	; 4
    19ee:	80 81       	ld	r24, Z
    19f0:	88 7f       	andi	r24, 0xF8	; 248
    19f2:	80 83       	st	Z, r24
	TPC1_set_isc(PORT_ISC_INTDISABLE_gc);//C1=WAKEUP FROM BIG
	PORTC.INTFLAGS |= (1 << 1);
    19f4:	c0 e4       	ldi	r28, 0x40	; 64
    19f6:	d4 e0       	ldi	r29, 0x04	; 4
    19f8:	89 85       	ldd	r24, Y+9	; 0x09
    19fa:	82 60       	ori	r24, 0x02	; 2
    19fc:	89 87       	std	Y+9, r24	; 0x09
	char gotCmd;
	char iters;
	gotCmd=getPacketFromBig();
    19fe:	63 dc       	rcall	.-1850   	; 0x12c6 <getPacketFromBig>
	PORTC.INTFLAGS |= (1 << 1);
    1a00:	89 85       	ldd	r24, Y+9	; 0x09
    1a02:	82 60       	ori	r24, 0x02	; 2
    1a04:	89 87       	std	Y+9, r24	; 0x09
	if((mState==IDLE)||(mState==MAGNET_IS_ON)){
    1a06:	80 91 f8 3e 	lds	r24, 0x3EF8	; 0x803ef8 <mState>
    1a0a:	8d 30       	cpi	r24, 0x0D	; 13
    1a0c:	11 f0       	breq	.+4      	; 0x1a12 <__vector_5+0x50>
    1a0e:	83 30       	cpi	r24, 0x03	; 3
    1a10:	11 f4       	brne	.+4      	; 0x1a16 <__vector_5+0x54>
		sleepPins();//
    1a12:	d5 dd       	rcall	.-1110   	; 0x15be <sleepPins>
		sleepPins();//
    1a14:	d4 dd       	rcall	.-1112   	; 0x15be <sleepPins>
    1a16:	e1 e5       	ldi	r30, 0x51	; 81
    1a18:	f4 e0       	ldi	r31, 0x04	; 4
    1a1a:	80 81       	ld	r24, Z
    1a1c:	88 7f       	andi	r24, 0xF8	; 248
    1a1e:	85 60       	ori	r24, 0x05	; 5
    1a20:	80 83       	st	Z, r24
	}
	TPC1_set_isc(PORT_ISC_LEVEL_gc);//C1=WAKEUP FROM BIG
	ENABLE_INTERRUPTS();
    1a22:	78 94       	sei
}
    1a24:	ff 91       	pop	r31
    1a26:	ef 91       	pop	r30
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	bf 91       	pop	r27
    1a2e:	af 91       	pop	r26
    1a30:	9f 91       	pop	r25
    1a32:	8f 91       	pop	r24
    1a34:	7f 91       	pop	r23
    1a36:	6f 91       	pop	r22
    1a38:	5f 91       	pop	r21
    1a3a:	4f 91       	pop	r20
    1a3c:	3f 91       	pop	r19
    1a3e:	2f 91       	pop	r18
    1a40:	0f 90       	pop	r0
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	0f 90       	pop	r0
    1a46:	1f 90       	pop	r1
    1a48:	18 95       	reti

00001a4a <__vector_22>:
/***********************************************************************
*  ISR USART RX
***********************************************************************/
ISR(USART0_RXC_vect){
    1a4a:	1f 92       	push	r1
    1a4c:	0f 92       	push	r0
    1a4e:	0f b6       	in	r0, 0x3f	; 63
    1a50:	0f 92       	push	r0
    1a52:	11 24       	eor	r1, r1
    1a54:	8f 93       	push	r24
    1a56:	9f 93       	push	r25
    1a58:	ef 93       	push	r30
    1a5a:	ff 93       	push	r31
	if(p_GPSrcvData>=(g_GPSrcv_buffer+GPS_BUFFER_SIZE))p_GPSrcvData=g_GPSrcv_buffer+GPS_BUFFER_SIZE-1;
    1a5c:	e0 91 f9 3e 	lds	r30, 0x3EF9	; 0x803ef9 <p_GPSrcvData>
    1a60:	f0 91 fa 3e 	lds	r31, 0x3EFA	; 0x803efa <p_GPSrcvData+0x1>
    1a64:	8e e3       	ldi	r24, 0x3E	; 62
    1a66:	e8 3b       	cpi	r30, 0xB8	; 184
    1a68:	f8 07       	cpc	r31, r24
    1a6a:	d8 f0       	brcs	.+54     	; 0x1aa2 <__vector_22+0x58>
    1a6c:	87 eb       	ldi	r24, 0xB7	; 183
    1a6e:	9e e3       	ldi	r25, 0x3E	; 62
    1a70:	80 93 f9 3e 	sts	0x3EF9, r24	; 0x803ef9 <p_GPSrcvData>
    1a74:	90 93 fa 3e 	sts	0x3EFA, r25	; 0x803efa <p_GPSrcvData+0x1>
	if((p_GPSrcvData>=g_GPSrcv_buffer)&&(p_GPSrcvData<g_GPSrcv_buffer+GPS_BUFFER_SIZE))
    1a78:	fc 01       	movw	r30, r24
		*p_GPSrcvData=USART0.RXDATAL;
    1a7a:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
    1a7e:	80 83       	st	Z, r24
		if(USART0.RXDATAL==0x0A)endOfLineFlag=1;
    1a80:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
    1a84:	8a 30       	cpi	r24, 0x0A	; 10
    1a86:	19 f4       	brne	.+6      	; 0x1a8e <__vector_22+0x44>
    1a88:	81 e0       	ldi	r24, 0x01	; 1
    1a8a:	80 93 f2 3e 	sts	0x3EF2, r24	; 0x803ef2 <endOfLineFlag>
	p_GPSrcvData++;
    1a8e:	80 91 f9 3e 	lds	r24, 0x3EF9	; 0x803ef9 <p_GPSrcvData>
    1a92:	90 91 fa 3e 	lds	r25, 0x3EFA	; 0x803efa <p_GPSrcvData+0x1>
    1a96:	01 96       	adiw	r24, 0x01	; 1
    1a98:	80 93 f9 3e 	sts	0x3EF9, r24	; 0x803ef9 <p_GPSrcvData>
    1a9c:	90 93 fa 3e 	sts	0x3EFA, r25	; 0x803efa <p_GPSrcvData+0x1>
}
    1aa0:	05 c0       	rjmp	.+10     	; 0x1aac <__vector_22+0x62>
/***********************************************************************
*  ISR USART RX
***********************************************************************/
ISR(USART0_RXC_vect){
	if(p_GPSrcvData>=(g_GPSrcv_buffer+GPS_BUFFER_SIZE))p_GPSrcvData=g_GPSrcv_buffer+GPS_BUFFER_SIZE-1;
	if((p_GPSrcvData>=g_GPSrcv_buffer)&&(p_GPSrcvData<g_GPSrcv_buffer+GPS_BUFFER_SIZE))
    1aa2:	8e e3       	ldi	r24, 0x3E	; 62
    1aa4:	e2 30       	cpi	r30, 0x02	; 2
    1aa6:	f8 07       	cpc	r31, r24
    1aa8:	58 f3       	brcs	.-42     	; 0x1a80 <__vector_22+0x36>
    1aaa:	e7 cf       	rjmp	.-50     	; 0x1a7a <__vector_22+0x30>
		*p_GPSrcvData=USART0.RXDATAL;
		if(USART0.RXDATAL==0x0A)endOfLineFlag=1;
	p_GPSrcvData++;
}
    1aac:	ff 91       	pop	r31
    1aae:	ef 91       	pop	r30
    1ab0:	9f 91       	pop	r25
    1ab2:	8f 91       	pop	r24
    1ab4:	0f 90       	pop	r0
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	0f 90       	pop	r0
    1aba:	1f 90       	pop	r1
    1abc:	18 95       	reti

00001abe <__vector_4>:
/***********************************************************************
*  ISR MOTION
***********************************************************************/
ISR(PORTB_PORT_vect){
    1abe:	1f 92       	push	r1
    1ac0:	0f 92       	push	r0
    1ac2:	0f b6       	in	r0, 0x3f	; 63
    1ac4:	0f 92       	push	r0
    1ac6:	11 24       	eor	r1, r1
    1ac8:	8f 93       	push	r24
    1aca:	ef 93       	push	r30
    1acc:	ff 93       	push	r31
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    1ace:	e6 e3       	ldi	r30, 0x36	; 54
    1ad0:	f4 e0       	ldi	r31, 0x04	; 4
    1ad2:	80 81       	ld	r24, Z
    1ad4:	88 7f       	andi	r24, 0xF8	; 248
    1ad6:	80 83       	st	Z, r24
	// B6 is Motion
	TPB6_set_isc(PORT_ISC_INTDISABLE_gc);
	if((PORTB.INTFLAGS&0x40)==0x40){
    1ad8:	80 91 29 04 	lds	r24, 0x0429	; 0x800429 <__TEXT_REGION_LENGTH__+0x700429>
    1adc:	86 ff       	sbrs	r24, 6
    1ade:	03 c0       	rjmp	.+6      	; 0x1ae6 <__vector_4+0x28>
		g_gotMotion=1;
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	80 93 01 3e 	sts	0x3E01, r24	; 0x803e01 <g_gotMotion>
//		redBlink(1);//tshoooooooooooooooooot
	}
	PORTB.INTFLAGS |= (1 << 6);
    1ae6:	e0 e2       	ldi	r30, 0x20	; 32
    1ae8:	f4 e0       	ldi	r31, 0x04	; 4
    1aea:	81 85       	ldd	r24, Z+9	; 0x09
    1aec:	80 64       	ori	r24, 0x40	; 64
    1aee:	81 87       	std	Z+9, r24	; 0x09
}
    1af0:	ff 91       	pop	r31
    1af2:	ef 91       	pop	r30
    1af4:	8f 91       	pop	r24
    1af6:	0f 90       	pop	r0
    1af8:	0f be       	out	0x3f, r0	; 63
    1afa:	0f 90       	pop	r0
    1afc:	1f 90       	pop	r1
    1afe:	18 95       	reti

00001b00 <__vector_6>:
/***********************************************************************
*  ISR RTC for rolling ball switch
***********************************************************************/
ISR(RTC_CNT_vect)
{
    1b00:	1f 92       	push	r1
    1b02:	0f 92       	push	r0
    1b04:	0f b6       	in	r0, 0x3f	; 63
    1b06:	0f 92       	push	r0
    1b08:	11 24       	eor	r1, r1
    1b0a:	8f 93       	push	r24
    1b0c:	ef 93       	push	r30
    1b0e:	ff 93       	push	r31
	if(g_gotMotion)g_motionMinTotal++;
    1b10:	80 91 01 3e 	lds	r24, 0x3E01	; 0x803e01 <g_gotMotion>
    1b14:	88 23       	and	r24, r24
    1b16:	29 f0       	breq	.+10     	; 0x1b22 <__vector_6+0x22>
    1b18:	80 91 00 3e 	lds	r24, 0x3E00	; 0x803e00 <_edata>
    1b1c:	8f 5f       	subi	r24, 0xFF	; 255
    1b1e:	80 93 00 3e 	sts	0x3E00, r24	; 0x803e00 <_edata>
	g_gotMotion=0;
    1b22:	10 92 01 3e 	sts	0x3E01, r1	; 0x803e01 <g_gotMotion>
	/* Overflow interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_OVF_bm;
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
    1b2c:	e6 e3       	ldi	r30, 0x36	; 54
    1b2e:	f4 e0       	ldi	r31, 0x04	; 4
    1b30:	80 81       	ld	r24, Z
    1b32:	88 7f       	andi	r24, 0xF8	; 248
    1b34:	82 60       	ori	r24, 0x02	; 2
    1b36:	80 83       	st	Z, r24
	TPB6_set_isc(PORT_ISC_RISING_gc);
}
    1b38:	ff 91       	pop	r31
    1b3a:	ef 91       	pop	r30
    1b3c:	8f 91       	pop	r24
    1b3e:	0f 90       	pop	r0
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	0f 90       	pop	r0
    1b44:	1f 90       	pop	r1
    1b46:	18 95       	reti

00001b48 <BOD_init>:
	//		 | BOD_VLMCFG_ABOVE_gc; /* Interrupt when supply goes above VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	08 95       	ret

00001b4c <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
    1b4c:	42 e0       	ldi	r20, 0x02	; 2
    1b4e:	68 ed       	ldi	r22, 0xD8	; 216
    1b50:	88 e7       	ldi	r24, 0x78	; 120
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	33 d0       	rcall	.+102    	; 0x1bbc <protected_write_io>
    1b56:	40 e0       	ldi	r20, 0x00	; 0
    1b58:	68 ed       	ldi	r22, 0xD8	; 216
    1b5a:	80 e7       	ldi	r24, 0x70	; 112
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	2e d0       	rcall	.+92     	; 0x1bbc <protected_write_io>
    1b60:	40 e0       	ldi	r20, 0x00	; 0
    1b62:	68 ed       	ldi	r22, 0xD8	; 216
    1b64:	80 e6       	ldi	r24, 0x60	; 96
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	29 d0       	rcall	.+82     	; 0x1bbc <protected_write_io>
	 //ccp_write_io((void*)&(CLKCTRL.OSC20MCTRLA),1 << CLKCTRL_RUNSTDBY_bp /* Run standby: ENabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	08 95       	ret

00001b6e <CPUINT_init>:
	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

//	ENABLE_INTERRUPTS();

	return 0;
}
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	08 95       	ret

00001b72 <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
    1b72:	e0 e1       	ldi	r30, 0x10	; 16
    1b74:	f4 e0       	ldi	r31, 0x04	; 4
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    1b76:	80 81       	ld	r24, Z
    1b78:	88 60       	ori	r24, 0x08	; 8
    1b7a:	81 93       	st	Z+, r24
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    1b7c:	e8 31       	cpi	r30, 0x18	; 24
    1b7e:	84 e0       	ldi	r24, 0x04	; 4
    1b80:	f8 07       	cpc	r31, r24
    1b82:	c9 f7       	brne	.-14     	; 0x1b76 <mcu_init+0x4>
    1b84:	e0 e3       	ldi	r30, 0x30	; 48
    1b86:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    1b88:	80 81       	ld	r24, Z
    1b8a:	88 60       	ori	r24, 0x08	; 8
    1b8c:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    1b8e:	e8 33       	cpi	r30, 0x38	; 56
    1b90:	84 e0       	ldi	r24, 0x04	; 4
    1b92:	f8 07       	cpc	r31, r24
    1b94:	c9 f7       	brne	.-14     	; 0x1b88 <mcu_init+0x16>
	}

//	for (uint8_t i = 0; i < 8; i++) {
//		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
//	}
}
    1b96:	08 95       	ret

00001b98 <USART_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
    1b98:	23 98       	cbi	0x04, 3	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    1b9a:	e3 e3       	ldi	r30, 0x33	; 51
    1b9c:	f4 e0       	ldi	r31, 0x04	; 4
    1b9e:	80 81       	ld	r24, Z
    1ba0:	87 7f       	andi	r24, 0xF7	; 247
    1ba2:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    1ba4:	22 9a       	sbi	0x04, 2	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    1ba6:	2a 98       	cbi	0x05, 2	; 5
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	0);

	USART_0_init();
    1ba8:	22 d0       	rcall	.+68     	; 0x1bee <USART_0_init>
    1baa:	08 95       	ret

00001bac <system_init>:
}
void system_init()
{
	mcu_init();
    1bac:	e2 df       	rcall	.-60     	; 0x1b72 <mcu_init>

	/* PORT setting on PB4 */

	CLKCTRL_init();
    1bae:	ce df       	rcall	.-100    	; 0x1b4c <CLKCTRL_init>

	RTC_0_init();
    1bb0:	09 d0       	rcall	.+18     	; 0x1bc4 <RTC_0_init>

//	ADC_0_initialization();

	USART_0_initialization();
    1bb2:	f2 df       	rcall	.-28     	; 0x1b98 <USART_0_initialization>

	CPUINT_init();
    1bb4:	dc df       	rcall	.-72     	; 0x1b6e <CPUINT_init>

	SLPCTRL_init();
    1bb6:	19 d0       	rcall	.+50     	; 0x1bea <SLPCTRL_init>

	BOD_init();
    1bb8:	c7 df       	rcall	.-114    	; 0x1b48 <BOD_init>
    1bba:	08 95       	ret

00001bbc <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
    1bbc:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    1bbe:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    1bc0:	40 83       	st	Z, r20
	ret                             // Return to caller
    1bc2:	08 95       	ret

00001bc4 <RTC_0_init>:
 * \brief Initialize RTC interface
 */
int8_t RTC_0_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
    1bc4:	e0 e4       	ldi	r30, 0x40	; 64
    1bc6:	f1 e0       	ldi	r31, 0x01	; 1
    1bc8:	81 81       	ldd	r24, Z+1	; 0x01
    1bca:	81 11       	cpse	r24, r1
    1bcc:	fd cf       	rjmp	.-6      	; 0x1bc8 <RTC_0_init+0x4>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV32_gc  /* 32 */
    1bce:	e0 e4       	ldi	r30, 0x40	; 64
    1bd0:	f1 e0       	ldi	r31, 0x01	; 1
    1bd2:	89 ea       	ldi	r24, 0xA9	; 169
    1bd4:	80 83       	st	Z, r24
	            | 1 << RTC_RTCEN_bp     /* Enable: enabled */
	            | 1 << RTC_RUNSTDBY_bp; /* Run In Standby: disabled */

	RTC.PER = 0x3e8; /* Period: 0x1f4 */
    1bd6:	88 ee       	ldi	r24, 0xE8	; 232
    1bd8:	93 e0       	ldi	r25, 0x03	; 3
    1bda:	82 87       	std	Z+10, r24	; 0x0a
    1bdc:	93 87       	std	Z+11, r25	; 0x0b

	// RTC.CLKSEL = RTC_CLKSEL_INT32K_gc; /* 32KHz Internal Ultra Low Power Oscillator (OSCULP32K) */

	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.INTCTRL = 0 << RTC_CMP_bp    /* Compare Match Interrupt enable: disabled */
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	82 83       	std	Z+2, r24	; 0x02
	              | 1 << RTC_OVF_bp; /* Overflow Interrupt enable: enabled */

	RTC.PITCTRLA = RTC_PERIOD_OFF_gc /* Off */
    1be2:	10 8a       	std	Z+16, r1	; 0x10
			 | 0 << RTC_PITEN_bp; /* Enable: disabled */

	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */
    1be4:	12 8a       	std	Z+18, r1	; 0x12

	return 0;
}
    1be6:	80 e0       	ldi	r24, 0x00	; 0
    1be8:	08 95       	ret

00001bea <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	08 95       	ret

00001bee <USART_0_init>:
 * \brief Initialize usart interface
 */
int8_t USART_0_init()
{

	USART0.BAUD = (uint16_t)USART0_BAUD_RATE(9600); /* set baud rate register */
    1bee:	e0 e0       	ldi	r30, 0x00	; 0
    1bf0:	f8 e0       	ldi	r31, 0x08	; 8
    1bf2:	8c e6       	ldi	r24, 0x6C	; 108
    1bf4:	95 e0       	ldi	r25, 0x05	; 5
    1bf6:	80 87       	std	Z+8, r24	; 0x08
    1bf8:	91 87       	std	Z+9, r25	; 0x09

	 USART0.CTRLA = 0 << USART_ABEIE_bp /* Auto-baud Error Interrupt Enable: disabled */
    1bfa:	80 e8       	ldi	r24, 0x80	; 128
    1bfc:	85 83       	std	Z+5, r24	; 0x05
			 | USART_RS485_OFF_gc /* RS485 Mode disabled */
			 | 1 << USART_RXCIE_bp /* Receive Complete Interrupt Enable: enabled */
			 | 0 << USART_RXSIE_bp /* Receiver Start Frame Interrupt Enable: disabled */
			 | 0 << USART_TXCIE_bp; /* Transmit Complete Interrupt Enable: disabled */
		
	USART0.CTRLB = 0 << USART_MPCM_bp       /* Multi-processor Communication Mode: disabled */
    1bfe:	80 ec       	ldi	r24, 0xC0	; 192
    1c00:	86 83       	std	Z+6, r24	; 0x06
	// USART0.RXPLCTRL = 0x0 << USART_RXPL_gp; /* Receiver Pulse Lenght: 0x0 */

	// USART0.TXPLCTRL = 0x0 << USART_TXPL_gp; /* Transmit pulse length: 0x0 */

	return 0;
}
    1c02:	80 e0       	ldi	r24, 0x00	; 0
    1c04:	08 95       	ret

00001c06 <ccp_write_io>:
    1c06:	dc 01       	movw	r26, r24
    1c08:	28 ed       	ldi	r18, 0xD8	; 216
    1c0a:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
    1c0e:	6c 93       	st	X, r22
    1c10:	08 95       	ret

00001c12 <_exit>:
    1c12:	f8 94       	cli

00001c14 <__stop_program>:
    1c14:	ff cf       	rjmp	.-2      	; 0x1c14 <__stop_program>
