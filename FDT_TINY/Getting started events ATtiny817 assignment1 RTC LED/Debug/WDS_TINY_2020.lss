
WDS_TINY_2020.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803800  00803800  000024e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000233c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0000a33c  0000233c  000023d0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000107  00803800  00803800  000024e8  2**0
                  ALLOC
  4 .comment      00000060  00000000  00000000  000024e8  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002548  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000328  00000000  00000000  00002588  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008991  00000000  00000000  000028b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000022c0  00000000  00000000  0000b241  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000030cc  00000000  00000000  0000d501  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000080c  00000000  00000000  000105d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000021dc  00000000  00000000  00010ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004567  00000000  00000000  00012fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000348  00000000  00000000  0001751f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 96 00 	jmp	0x12c	; 0x12c <__ctors_end>
       4:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
       8:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
       c:	0c 94 1c 10 	jmp	0x2038	; 0x2038 <__vector_3>
      10:	0c 94 fd 0f 	jmp	0x1ffa	; 0x1ffa <__vector_4>
      14:	0c 94 79 0f 	jmp	0x1ef2	; 0x1ef2 <__vector_5>
      18:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      1c:	0c 94 4b 10 	jmp	0x2096	; 0x2096 <__vector_7>
      20:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      24:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      28:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      2c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      30:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      34:	0c 94 67 0f 	jmp	0x1ece	; 0x1ece <__vector_13>
      38:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      3c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      40:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      44:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      48:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      4c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      50:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      54:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      58:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      5c:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      60:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      64:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      68:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      6c:	0c 94 c3 0f 	jmp	0x1f86	; 0x1f86 <__vector_27>
      70:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      74:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      78:	0c 94 a8 00 	jmp	0x150	; 0x150 <__bad_interrupt>
      7c:	e1 00       	.word	0x00e1	; ????
      7e:	e4 00       	.word	0x00e4	; ????
      80:	e7 00       	.word	0x00e7	; ????
      82:	ea 00       	.word	0x00ea	; ????
      84:	ed 00       	.word	0x00ed	; ????
      86:	f0 00       	.word	0x00f0	; ????
      88:	f3 00       	.word	0x00f3	; ????
      8a:	f6 00       	.word	0x00f6	; ????
      8c:	f9 00       	.word	0x00f9	; ????
      8e:	1f 01       	movw	r2, r30
      90:	08 01       	movw	r0, r16
      92:	0a 01       	movw	r0, r20
      94:	0c 01       	movw	r0, r24
      96:	0e 01       	movw	r0, r28
      98:	10 01       	movw	r2, r0
      9a:	12 01       	movw	r2, r4
      9c:	14 01       	movw	r2, r8
      9e:	17 01       	movw	r2, r14
      a0:	1a 01       	movw	r2, r20
      a2:	2c 01       	movw	r4, r24
      a4:	2f 01       	movw	r4, r30
      a6:	32 01       	movw	r6, r4
      a8:	35 01       	movw	r6, r10
      aa:	38 01       	movw	r6, r16
      ac:	3b 01       	movw	r6, r22
      ae:	3e 01       	movw	r6, r28
      b0:	41 01       	movw	r8, r2
      b2:	44 01       	movw	r8, r8
      b4:	59 01       	movw	r10, r18
      b6:	59 01       	movw	r10, r18
      b8:	59 01       	movw	r10, r18
      ba:	59 01       	movw	r10, r18
      bc:	59 01       	movw	r10, r18
      be:	59 01       	movw	r10, r18
      c0:	59 01       	movw	r10, r18
      c2:	47 01       	movw	r8, r14
      c4:	4a 01       	movw	r8, r20
      c6:	4d 01       	movw	r8, r26
      c8:	50 01       	movw	r10, r0
      ca:	53 01       	movw	r10, r6
      cc:	56 01       	movw	r10, r12
      ce:	91 01       	movw	r18, r2
      d0:	65 01       	movw	r12, r10
      d2:	67 01       	movw	r12, r14
      d4:	69 01       	movw	r12, r18
      d6:	6b 01       	movw	r12, r22
      d8:	6e 01       	movw	r12, r28
      da:	71 01       	movw	r14, r2
      dc:	74 01       	movw	r14, r8
      de:	77 01       	movw	r14, r14
      e0:	7a 01       	movw	r14, r20
      e2:	8c 01       	movw	r16, r24
      e4:	8c 01       	movw	r16, r24
      e6:	8c 01       	movw	r16, r24
      e8:	8c 01       	movw	r16, r24
      ea:	8c 01       	movw	r16, r24
      ec:	8c 01       	movw	r16, r24
      ee:	8c 01       	movw	r16, r24
      f0:	8f 01       	movw	r16, r30
      f2:	7d 01       	movw	r14, r26
      f4:	80 01       	movw	r16, r0
      f6:	83 01       	movw	r16, r6
      f8:	86 01       	movw	r16, r12
      fa:	89 01       	movw	r16, r18
      fc:	53 02       	muls	r21, r19
      fe:	55 02       	muls	r21, r21
     100:	57 02       	muls	r21, r23
     102:	59 02       	muls	r21, r25
     104:	5b 02       	muls	r21, r27
     106:	5d 02       	muls	r21, r29
     108:	5f 02       	muls	r21, r31
     10a:	61 02       	muls	r22, r17
     10c:	63 02       	muls	r22, r19
     10e:	65 02       	muls	r22, r21
     110:	67 02       	muls	r22, r23
     112:	69 02       	muls	r22, r25
     114:	6b 02       	muls	r22, r27
     116:	6d 02       	muls	r22, r29
     118:	6f 02       	muls	r22, r31
     11a:	71 02       	muls	r23, r17
     11c:	e6 0e       	add	r14, r22
     11e:	e9 0e       	add	r14, r25
     120:	fc 0e       	add	r15, r28
     122:	0c 0f       	add	r16, r28
     124:	16 0f       	add	r17, r22
     126:	20 0f       	add	r18, r16
     128:	2a 0f       	add	r18, r26
     12a:	34 0f       	add	r19, r20

0000012c <__ctors_end>:
     12c:	11 24       	eor	r1, r1
     12e:	1f be       	out	0x3f, r1	; 63
     130:	cf ef       	ldi	r28, 0xFF	; 255
     132:	cd bf       	out	0x3d, r28	; 61
     134:	df e3       	ldi	r29, 0x3F	; 63
     136:	de bf       	out	0x3e, r29	; 62

00000138 <__do_clear_bss>:
     138:	29 e3       	ldi	r18, 0x39	; 57
     13a:	a0 e0       	ldi	r26, 0x00	; 0
     13c:	b8 e3       	ldi	r27, 0x38	; 56
     13e:	01 c0       	rjmp	.+2      	; 0x142 <.do_clear_bss_start>

00000140 <.do_clear_bss_loop>:
     140:	1d 92       	st	X+, r1

00000142 <.do_clear_bss_start>:
     142:	a7 30       	cpi	r26, 0x07	; 7
     144:	b2 07       	cpc	r27, r18
     146:	e1 f7       	brne	.-8      	; 0x140 <.do_clear_bss_loop>
     148:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <main>
     14c:	0c 94 9c 11 	jmp	0x2338	; 0x2338 <_exit>

00000150 <__bad_interrupt>:
     150:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000154 <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
	system_init();
     154:	0e 94 62 11 	call	0x22c4	; 0x22c4 <system_init>
     158:	08 95       	ret

0000015a <searchRcvBuffuBlox>:
	for(iters=7;iters>0;iters--){
		if(getPIRbit()==1)ret+=(1<<iters);
	}
	if(getPIRbit()==1)ret+=1;
	return ret;
}
     15a:	2b e0       	ldi	r18, 0x0B	; 11
     15c:	38 e3       	ldi	r19, 0x38	; 56
     15e:	20 93 05 39 	sts	0x3905, r18	; 0x803905 <GPSSearchPtr>
     162:	30 93 06 39 	sts	0x3906, r19	; 0x803906 <GPSSearchPtr+0x1>
     166:	a0 91 01 39 	lds	r26, 0x3901	; 0x803901 <p_GPSrcvData>
     16a:	b0 91 02 39 	lds	r27, 0x3902	; 0x803902 <p_GPSrcvData+0x1>
     16e:	15 97       	sbiw	r26, 0x05	; 5
     170:	e0 91 05 39 	lds	r30, 0x3905	; 0x803905 <GPSSearchPtr>
     174:	f0 91 06 39 	lds	r31, 0x3906	; 0x803906 <GPSSearchPtr+0x1>
     178:	9f 01       	movw	r18, r30
     17a:	2f 5f       	subi	r18, 0xFF	; 255
     17c:	3f 4f       	sbci	r19, 0xFF	; 255
     17e:	20 93 05 39 	sts	0x3905, r18	; 0x803905 <GPSSearchPtr>
     182:	30 93 06 39 	sts	0x3906, r19	; 0x803906 <GPSSearchPtr+0x1>
     186:	91 81       	ldd	r25, Z+1	; 0x01
     188:	98 13       	cpse	r25, r24
     18a:	06 c0       	rjmp	.+12     	; 0x198 <searchRcvBuffuBlox+0x3e>
     18c:	92 81       	ldd	r25, Z+2	; 0x02
     18e:	96 13       	cpse	r25, r22
     190:	03 c0       	rjmp	.+6      	; 0x198 <searchRcvBuffuBlox+0x3e>
     192:	93 81       	ldd	r25, Z+3	; 0x03
     194:	94 17       	cp	r25, r20
     196:	31 f0       	breq	.+12     	; 0x1a4 <searchRcvBuffuBlox+0x4a>
     198:	2a 17       	cp	r18, r26
     19a:	3b 07       	cpc	r19, r27
     19c:	48 f3       	brcs	.-46     	; 0x170 <searchRcvBuffuBlox+0x16>
     19e:	8a e9       	ldi	r24, 0x9A	; 154
     1a0:	92 e0       	ldi	r25, 0x02	; 2
     1a2:	08 95       	ret
     1a4:	80 e0       	ldi	r24, 0x00	; 0
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	08 95       	ret

000001aa <asciiToHex>:
     1aa:	48 2f       	mov	r20, r24
     1ac:	86 2f       	mov	r24, r22
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	fc 01       	movw	r30, r24
     1b2:	f1 97       	sbiw	r30, 0x31	; 49
     1b4:	e9 30       	cpi	r30, 0x09	; 9
     1b6:	f1 05       	cpc	r31, r1
     1b8:	f8 f4       	brcc	.+62     	; 0x1f8 <asciiToHex+0x4e>
     1ba:	e2 5c       	subi	r30, 0xC2	; 194
     1bc:	ff 4f       	sbci	r31, 0xFF	; 255
     1be:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__tablejump2__>
     1c2:	81 e0       	ldi	r24, 0x01	; 1
     1c4:	90 e0       	ldi	r25, 0x00	; 0
     1c6:	1a c0       	rjmp	.+52     	; 0x1fc <asciiToHex+0x52>
     1c8:	82 e0       	ldi	r24, 0x02	; 2
     1ca:	90 e0       	ldi	r25, 0x00	; 0
     1cc:	17 c0       	rjmp	.+46     	; 0x1fc <asciiToHex+0x52>
     1ce:	83 e0       	ldi	r24, 0x03	; 3
     1d0:	90 e0       	ldi	r25, 0x00	; 0
     1d2:	14 c0       	rjmp	.+40     	; 0x1fc <asciiToHex+0x52>
     1d4:	84 e0       	ldi	r24, 0x04	; 4
     1d6:	90 e0       	ldi	r25, 0x00	; 0
     1d8:	11 c0       	rjmp	.+34     	; 0x1fc <asciiToHex+0x52>
     1da:	85 e0       	ldi	r24, 0x05	; 5
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	0e c0       	rjmp	.+28     	; 0x1fc <asciiToHex+0x52>
     1e0:	86 e0       	ldi	r24, 0x06	; 6
     1e2:	90 e0       	ldi	r25, 0x00	; 0
     1e4:	0b c0       	rjmp	.+22     	; 0x1fc <asciiToHex+0x52>
     1e6:	87 e0       	ldi	r24, 0x07	; 7
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	08 c0       	rjmp	.+16     	; 0x1fc <asciiToHex+0x52>
     1ec:	88 e0       	ldi	r24, 0x08	; 8
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	05 c0       	rjmp	.+10     	; 0x1fc <asciiToHex+0x52>
     1f2:	89 e0       	ldi	r24, 0x09	; 9
     1f4:	90 e0       	ldi	r25, 0x00	; 0
     1f6:	02 c0       	rjmp	.+4      	; 0x1fc <asciiToHex+0x52>
     1f8:	80 e0       	ldi	r24, 0x00	; 0
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	50 e0       	ldi	r21, 0x00	; 0
     1fe:	fa 01       	movw	r30, r20
     200:	f0 97       	sbiw	r30, 0x30	; 48
     202:	ea 30       	cpi	r30, 0x0A	; 10
     204:	f1 05       	cpc	r31, r1
     206:	c8 f4       	brcc	.+50     	; 0x23a <asciiToHex+0x90>
     208:	e9 5b       	subi	r30, 0xB9	; 185
     20a:	ff 4f       	sbci	r31, 0xFF	; 255
     20c:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__tablejump2__>
     210:	0a 96       	adiw	r24, 0x0a	; 10
     212:	08 95       	ret
     214:	44 96       	adiw	r24, 0x14	; 20
     216:	08 95       	ret
     218:	4e 96       	adiw	r24, 0x1e	; 30
     21a:	08 95       	ret
     21c:	88 96       	adiw	r24, 0x28	; 40
     21e:	08 95       	ret
     220:	c2 96       	adiw	r24, 0x32	; 50
     222:	08 95       	ret
     224:	cc 96       	adiw	r24, 0x3c	; 60
     226:	08 95       	ret
     228:	8a 5b       	subi	r24, 0xBA	; 186
     22a:	9f 4f       	sbci	r25, 0xFF	; 255
     22c:	08 95       	ret
     22e:	80 5b       	subi	r24, 0xB0	; 176
     230:	9f 4f       	sbci	r25, 0xFF	; 255
     232:	08 95       	ret
     234:	86 5a       	subi	r24, 0xA6	; 166
     236:	9f 4f       	sbci	r25, 0xFF	; 255
     238:	08 95       	ret
     23a:	80 e0       	ldi	r24, 0x00	; 0
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	08 95       	ret

00000240 <asciiHexToHex>:
     240:	48 2f       	mov	r20, r24
     242:	86 2f       	mov	r24, r22
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	fc 01       	movw	r30, r24
     248:	f1 97       	sbiw	r30, 0x31	; 49
     24a:	e6 31       	cpi	r30, 0x16	; 22
     24c:	f1 05       	cpc	r31, r1
     24e:	88 f5       	brcc	.+98     	; 0x2b2 <asciiHexToHex+0x72>
     250:	ef 5a       	subi	r30, 0xAF	; 175
     252:	ff 4f       	sbci	r31, 0xFF	; 255
     254:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__tablejump2__>
     258:	81 e0       	ldi	r24, 0x01	; 1
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	2c c0       	rjmp	.+88     	; 0x2b6 <asciiHexToHex+0x76>
     25e:	82 e0       	ldi	r24, 0x02	; 2
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	29 c0       	rjmp	.+82     	; 0x2b6 <asciiHexToHex+0x76>
     264:	83 e0       	ldi	r24, 0x03	; 3
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	26 c0       	rjmp	.+76     	; 0x2b6 <asciiHexToHex+0x76>
     26a:	84 e0       	ldi	r24, 0x04	; 4
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	23 c0       	rjmp	.+70     	; 0x2b6 <asciiHexToHex+0x76>
     270:	85 e0       	ldi	r24, 0x05	; 5
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	20 c0       	rjmp	.+64     	; 0x2b6 <asciiHexToHex+0x76>
     276:	86 e0       	ldi	r24, 0x06	; 6
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	1d c0       	rjmp	.+58     	; 0x2b6 <asciiHexToHex+0x76>
     27c:	87 e0       	ldi	r24, 0x07	; 7
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	1a c0       	rjmp	.+52     	; 0x2b6 <asciiHexToHex+0x76>
     282:	88 e0       	ldi	r24, 0x08	; 8
     284:	90 e0       	ldi	r25, 0x00	; 0
     286:	17 c0       	rjmp	.+46     	; 0x2b6 <asciiHexToHex+0x76>
     288:	89 e0       	ldi	r24, 0x09	; 9
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	14 c0       	rjmp	.+40     	; 0x2b6 <asciiHexToHex+0x76>
     28e:	8a e0       	ldi	r24, 0x0A	; 10
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	11 c0       	rjmp	.+34     	; 0x2b6 <asciiHexToHex+0x76>
     294:	8b e0       	ldi	r24, 0x0B	; 11
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	0e c0       	rjmp	.+28     	; 0x2b6 <asciiHexToHex+0x76>
     29a:	8c e0       	ldi	r24, 0x0C	; 12
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0b c0       	rjmp	.+22     	; 0x2b6 <asciiHexToHex+0x76>
     2a0:	8d e0       	ldi	r24, 0x0D	; 13
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	08 c0       	rjmp	.+16     	; 0x2b6 <asciiHexToHex+0x76>
     2a6:	8e e0       	ldi	r24, 0x0E	; 14
     2a8:	90 e0       	ldi	r25, 0x00	; 0
     2aa:	05 c0       	rjmp	.+10     	; 0x2b6 <asciiHexToHex+0x76>
     2ac:	8f e0       	ldi	r24, 0x0F	; 15
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	02 c0       	rjmp	.+4      	; 0x2b6 <asciiHexToHex+0x76>
     2b2:	80 e0       	ldi	r24, 0x00	; 0
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	50 e0       	ldi	r21, 0x00	; 0
     2b8:	fa 01       	movw	r30, r20
     2ba:	f0 97       	sbiw	r30, 0x30	; 48
     2bc:	e7 31       	cpi	r30, 0x17	; 23
     2be:	f1 05       	cpc	r31, r1
     2c0:	58 f5       	brcc	.+86     	; 0x318 <asciiHexToHex+0xd8>
     2c2:	e9 59       	subi	r30, 0x99	; 153
     2c4:	ff 4f       	sbci	r31, 0xFF	; 255
     2c6:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__tablejump2__>
     2ca:	40 96       	adiw	r24, 0x10	; 16
     2cc:	08 95       	ret
     2ce:	80 96       	adiw	r24, 0x20	; 32
     2d0:	08 95       	ret
     2d2:	c0 96       	adiw	r24, 0x30	; 48
     2d4:	08 95       	ret
     2d6:	80 5c       	subi	r24, 0xC0	; 192
     2d8:	9f 4f       	sbci	r25, 0xFF	; 255
     2da:	08 95       	ret
     2dc:	80 5b       	subi	r24, 0xB0	; 176
     2de:	9f 4f       	sbci	r25, 0xFF	; 255
     2e0:	08 95       	ret
     2e2:	80 5a       	subi	r24, 0xA0	; 160
     2e4:	9f 4f       	sbci	r25, 0xFF	; 255
     2e6:	08 95       	ret
     2e8:	80 59       	subi	r24, 0x90	; 144
     2ea:	9f 4f       	sbci	r25, 0xFF	; 255
     2ec:	08 95       	ret
     2ee:	80 58       	subi	r24, 0x80	; 128
     2f0:	9f 4f       	sbci	r25, 0xFF	; 255
     2f2:	08 95       	ret
     2f4:	80 57       	subi	r24, 0x70	; 112
     2f6:	9f 4f       	sbci	r25, 0xFF	; 255
     2f8:	08 95       	ret
     2fa:	80 eb       	ldi	r24, 0xB0	; 176
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	08 95       	ret
     300:	80 ec       	ldi	r24, 0xC0	; 192
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	08 95       	ret
     306:	80 ed       	ldi	r24, 0xD0	; 208
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	08 95       	ret
     30c:	80 ee       	ldi	r24, 0xE0	; 224
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	08 95       	ret
     312:	80 ef       	ldi	r24, 0xF0	; 240
     314:	90 e0       	ldi	r25, 0x00	; 0
     316:	08 95       	ret
     318:	80 e0       	ldi	r24, 0x00	; 0
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	08 95       	ret
     31e:	80 ea       	ldi	r24, 0xA0	; 160
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	08 95       	ret

00000324 <delay_ms>:
     324:	ab 01       	movw	r20, r22
     326:	bc 01       	movw	r22, r24
     328:	41 15       	cp	r20, r1
     32a:	51 05       	cpc	r21, r1
     32c:	61 05       	cpc	r22, r1
     32e:	71 05       	cpc	r23, r1
     330:	61 f4       	brne	.+24     	; 0x34a <delay_ms+0x26>
     332:	08 95       	ret
     334:	00 00       	nop
     336:	01 96       	adiw	r24, 0x01	; 1
     338:	8a 39       	cpi	r24, 0x9A	; 154
     33a:	21 e0       	ldi	r18, 0x01	; 1
     33c:	92 07       	cpc	r25, r18
     33e:	d1 f7       	brne	.-12     	; 0x334 <delay_ms+0x10>
     340:	41 50       	subi	r20, 0x01	; 1
     342:	51 09       	sbc	r21, r1
     344:	61 09       	sbc	r22, r1
     346:	71 09       	sbc	r23, r1
     348:	19 f0       	breq	.+6      	; 0x350 <delay_ms+0x2c>
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	90 e0       	ldi	r25, 0x00	; 0
     34e:	f2 cf       	rjmp	.-28     	; 0x334 <delay_ms+0x10>
     350:	08 95       	ret

00000352 <redBlink>:
     352:	cf 93       	push	r28
     354:	c8 2f       	mov	r28, r24
     356:	42 9a       	sbi	0x08, 2	; 8
     358:	88 23       	and	r24, r24
     35a:	81 f0       	breq	.+32     	; 0x37c <redBlink+0x2a>
     35c:	4a 98       	cbi	0x09, 2	; 9
     35e:	6a e0       	ldi	r22, 0x0A	; 10
     360:	70 e0       	ldi	r23, 0x00	; 0
     362:	80 e0       	ldi	r24, 0x00	; 0
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	0e 94 92 01 	call	0x324	; 0x324 <delay_ms>
     36a:	4a 9a       	sbi	0x09, 2	; 9
     36c:	62 e3       	ldi	r22, 0x32	; 50
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	80 e0       	ldi	r24, 0x00	; 0
     372:	90 e0       	ldi	r25, 0x00	; 0
     374:	0e 94 92 01 	call	0x324	; 0x324 <delay_ms>
     378:	c1 50       	subi	r28, 0x01	; 1
     37a:	81 f7       	brne	.-32     	; 0x35c <redBlink+0xa>
     37c:	42 98       	cbi	0x08, 2	; 8
     37e:	e2 e5       	ldi	r30, 0x52	; 82
     380:	f4 e0       	ldi	r31, 0x04	; 4
     382:	80 81       	ld	r24, Z
     384:	88 60       	ori	r24, 0x08	; 8
     386:	80 83       	st	Z, r24
     388:	cf 91       	pop	r28
     38a:	08 95       	ret

0000038c <myDelay_hus>:
     38c:	ab 01       	movw	r20, r22
     38e:	bc 01       	movw	r22, r24
     390:	41 15       	cp	r20, r1
     392:	51 05       	cpc	r21, r1
     394:	61 05       	cpc	r22, r1
     396:	71 05       	cpc	r23, r1
     398:	59 f4       	brne	.+22     	; 0x3b0 <myDelay_hus+0x24>
     39a:	08 95       	ret
     39c:	00 00       	nop
     39e:	01 96       	adiw	r24, 0x01	; 1
     3a0:	8e 32       	cpi	r24, 0x2E	; 46
     3a2:	91 05       	cpc	r25, r1
     3a4:	d9 f7       	brne	.-10     	; 0x39c <myDelay_hus+0x10>
     3a6:	41 50       	subi	r20, 0x01	; 1
     3a8:	51 09       	sbc	r21, r1
     3aa:	61 09       	sbc	r22, r1
     3ac:	71 09       	sbc	r23, r1
     3ae:	19 f0       	breq	.+6      	; 0x3b6 <myDelay_hus+0x2a>
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	f3 cf       	rjmp	.-26     	; 0x39c <myDelay_hus+0x10>
     3b6:	08 95       	ret

000003b8 <usart_put_string>:
     3b8:	66 23       	and	r22, r22
     3ba:	71 f0       	breq	.+28     	; 0x3d8 <usart_put_string+0x20>
     3bc:	dc 01       	movw	r26, r24
     3be:	9c 01       	movw	r18, r24
     3c0:	26 0f       	add	r18, r22
     3c2:	31 1d       	adc	r19, r1
     3c4:	e0 e0       	ldi	r30, 0x00	; 0
     3c6:	f8 e0       	ldi	r31, 0x08	; 8
     3c8:	94 81       	ldd	r25, Z+4	; 0x04
     3ca:	95 ff       	sbrs	r25, 5
     3cc:	fd cf       	rjmp	.-6      	; 0x3c8 <usart_put_string+0x10>
     3ce:	9d 91       	ld	r25, X+
     3d0:	92 83       	std	Z+2, r25	; 0x02
     3d2:	a2 17       	cp	r26, r18
     3d4:	b3 07       	cpc	r27, r19
     3d6:	c1 f7       	brne	.-16     	; 0x3c8 <usart_put_string+0x10>
     3d8:	08 95       	ret

000003da <initGPSuBlox>:
     3da:	cf 93       	push	r28
     3dc:	df 93       	push	r29
     3de:	cd b7       	in	r28, 0x3d	; 61
     3e0:	de b7       	in	r29, 0x3e	; 62
     3e2:	c1 59       	subi	r28, 0x91	; 145
     3e4:	d1 09       	sbc	r29, r1
     3e6:	cd bf       	out	0x3d, r28	; 61
     3e8:	de bf       	out	0x3e, r29	; 62
     3ea:	68 ee       	ldi	r22, 0xE8	; 232
     3ec:	73 e0       	ldi	r23, 0x03	; 3
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	0e 94 92 01 	call	0x324	; 0x324 <delay_ms>
     3f6:	8d e1       	ldi	r24, 0x1D	; 29
     3f8:	ec e3       	ldi	r30, 0x3C	; 60
     3fa:	f3 ea       	ldi	r31, 0xA3	; 163
     3fc:	de 01       	movw	r26, r28
     3fe:	11 96       	adiw	r26, 0x01	; 1
     400:	01 90       	ld	r0, Z+
     402:	0d 92       	st	X+, r0
     404:	8a 95       	dec	r24
     406:	e1 f7       	brne	.-8      	; 0x400 <__LOCK_REGION_LENGTH__>
     408:	6d e1       	ldi	r22, 0x1D	; 29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <usart_put_string>
     412:	8d e1       	ldi	r24, 0x1D	; 29
     414:	e9 e5       	ldi	r30, 0x59	; 89
     416:	f3 ea       	ldi	r31, 0xA3	; 163
     418:	de 01       	movw	r26, r28
     41a:	5e 96       	adiw	r26, 0x1e	; 30
     41c:	01 90       	ld	r0, Z+
     41e:	0d 92       	st	X+, r0
     420:	8a 95       	dec	r24
     422:	e1 f7       	brne	.-8      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
     424:	6d e1       	ldi	r22, 0x1D	; 29
     426:	ce 01       	movw	r24, r28
     428:	4e 96       	adiw	r24, 0x1e	; 30
     42a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <usart_put_string>
     42e:	8d e1       	ldi	r24, 0x1D	; 29
     430:	e6 e7       	ldi	r30, 0x76	; 118
     432:	f3 ea       	ldi	r31, 0xA3	; 163
     434:	de 01       	movw	r26, r28
     436:	db 96       	adiw	r26, 0x3b	; 59
     438:	01 90       	ld	r0, Z+
     43a:	0d 92       	st	X+, r0
     43c:	8a 95       	dec	r24
     43e:	e1 f7       	brne	.-8      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
     440:	6d e1       	ldi	r22, 0x1D	; 29
     442:	ce 01       	movw	r24, r28
     444:	cb 96       	adiw	r24, 0x3b	; 59
     446:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <usart_put_string>
     44a:	8d e1       	ldi	r24, 0x1D	; 29
     44c:	e3 e9       	ldi	r30, 0x93	; 147
     44e:	f3 ea       	ldi	r31, 0xA3	; 163
     450:	de 01       	movw	r26, r28
     452:	a8 5a       	subi	r26, 0xA8	; 168
     454:	bf 4f       	sbci	r27, 0xFF	; 255
     456:	01 90       	ld	r0, Z+
     458:	0d 92       	st	X+, r0
     45a:	8a 95       	dec	r24
     45c:	e1 f7       	brne	.-8      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>
     45e:	6d e1       	ldi	r22, 0x1D	; 29
     460:	ce 01       	movw	r24, r28
     462:	88 5a       	subi	r24, 0xA8	; 168
     464:	9f 4f       	sbci	r25, 0xFF	; 255
     466:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <usart_put_string>
     46a:	8d e1       	ldi	r24, 0x1D	; 29
     46c:	e0 eb       	ldi	r30, 0xB0	; 176
     46e:	f3 ea       	ldi	r31, 0xA3	; 163
     470:	de 01       	movw	r26, r28
     472:	ab 58       	subi	r26, 0x8B	; 139
     474:	bf 4f       	sbci	r27, 0xFF	; 255
     476:	01 90       	ld	r0, Z+
     478:	0d 92       	st	X+, r0
     47a:	8a 95       	dec	r24
     47c:	e1 f7       	brne	.-8      	; 0x476 <__LOCK_REGION_LENGTH__+0x76>
     47e:	6d e1       	ldi	r22, 0x1D	; 29
     480:	ce 01       	movw	r24, r28
     482:	8b 58       	subi	r24, 0x8B	; 139
     484:	9f 4f       	sbci	r25, 0xFF	; 255
     486:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <usart_put_string>
     48a:	cf 56       	subi	r28, 0x6F	; 111
     48c:	df 4f       	sbci	r29, 0xFF	; 255
     48e:	cd bf       	out	0x3d, r28	; 61
     490:	de bf       	out	0x3e, r29	; 62
     492:	df 91       	pop	r29
     494:	cf 91       	pop	r28
     496:	08 95       	ret

00000498 <hex1ToAscii>:
     498:	8f 70       	andi	r24, 0x0F	; 15
     49a:	90 e0       	ldi	r25, 0x00	; 0
     49c:	fc 01       	movw	r30, r24
     49e:	e2 58       	subi	r30, 0x82	; 130
     4a0:	ff 4f       	sbci	r31, 0xFF	; 255
     4a2:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__tablejump2__>
     4a6:	80 e3       	ldi	r24, 0x30	; 48
     4a8:	08 95       	ret
     4aa:	81 e3       	ldi	r24, 0x31	; 49
     4ac:	08 95       	ret
     4ae:	82 e3       	ldi	r24, 0x32	; 50
     4b0:	08 95       	ret
     4b2:	83 e3       	ldi	r24, 0x33	; 51
     4b4:	08 95       	ret
     4b6:	84 e3       	ldi	r24, 0x34	; 52
     4b8:	08 95       	ret
     4ba:	85 e3       	ldi	r24, 0x35	; 53
     4bc:	08 95       	ret
     4be:	86 e3       	ldi	r24, 0x36	; 54
     4c0:	08 95       	ret
     4c2:	87 e3       	ldi	r24, 0x37	; 55
     4c4:	08 95       	ret
     4c6:	88 e3       	ldi	r24, 0x38	; 56
     4c8:	08 95       	ret
     4ca:	89 e3       	ldi	r24, 0x39	; 57
     4cc:	08 95       	ret
     4ce:	81 e4       	ldi	r24, 0x41	; 65
     4d0:	08 95       	ret
     4d2:	82 e4       	ldi	r24, 0x42	; 66
     4d4:	08 95       	ret
     4d6:	83 e4       	ldi	r24, 0x43	; 67
     4d8:	08 95       	ret
     4da:	84 e4       	ldi	r24, 0x44	; 68
     4dc:	08 95       	ret
     4de:	85 e4       	ldi	r24, 0x45	; 69
     4e0:	08 95       	ret
     4e2:	86 e4       	ldi	r24, 0x46	; 70
     4e4:	08 95       	ret

000004e6 <hex2ToAscii>:
     4e6:	1f 93       	push	r17
     4e8:	cf 93       	push	r28
     4ea:	df 93       	push	r29
     4ec:	ec 01       	movw	r28, r24
     4ee:	0e 94 4c 02 	call	0x498	; 0x498 <hex1ToAscii>
     4f2:	18 2f       	mov	r17, r24
     4f4:	ce 01       	movw	r24, r28
     4f6:	95 95       	asr	r25
     4f8:	87 95       	ror	r24
     4fa:	95 95       	asr	r25
     4fc:	87 95       	ror	r24
     4fe:	95 95       	asr	r25
     500:	87 95       	ror	r24
     502:	95 95       	asr	r25
     504:	87 95       	ror	r24
     506:	0e 94 4c 02 	call	0x498	; 0x498 <hex1ToAscii>
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	98 2f       	mov	r25, r24
     50e:	88 27       	eor	r24, r24
     510:	81 0f       	add	r24, r17
     512:	91 1d       	adc	r25, r1
     514:	df 91       	pop	r29
     516:	cf 91       	pop	r28
     518:	1f 91       	pop	r17
     51a:	08 95       	ret

0000051c <LCDshort>:
     51c:	df 92       	push	r13
     51e:	ef 92       	push	r14
     520:	ff 92       	push	r15
     522:	0f 93       	push	r16
     524:	1f 93       	push	r17
     526:	cf 93       	push	r28
     528:	df 93       	push	r29
     52a:	00 d0       	rcall	.+0      	; 0x52c <LCDshort+0x10>
     52c:	00 d0       	rcall	.+0      	; 0x52e <LCDshort+0x12>
     52e:	cd b7       	in	r28, 0x3d	; 61
     530:	de b7       	in	r29, 0x3e	; 62
     532:	7c 01       	movw	r14, r24
     534:	16 2f       	mov	r17, r22
     536:	8f 2d       	mov	r24, r15
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <hex2ToAscii>
     53e:	08 2f       	mov	r16, r24
     540:	d9 2e       	mov	r13, r25
     542:	c7 01       	movw	r24, r14
     544:	99 27       	eor	r25, r25
     546:	0e 94 73 02 	call	0x4e6	; 0x4e6 <hex2ToAscii>
     54a:	d9 82       	std	Y+1, r13	; 0x01
     54c:	0a 83       	std	Y+2, r16	; 0x02
     54e:	9b 83       	std	Y+3, r25	; 0x03
     550:	8c 83       	std	Y+4, r24	; 0x04
     552:	12 30       	cpi	r17, 0x02	; 2
     554:	51 f0       	breq	.+20     	; 0x56a <LCDshort+0x4e>
     556:	13 30       	cpi	r17, 0x03	; 3
     558:	71 f0       	breq	.+28     	; 0x576 <LCDshort+0x5a>
     55a:	11 30       	cpi	r17, 0x01	; 1
     55c:	91 f4       	brne	.+36     	; 0x582 <LCDshort+0x66>
     55e:	61 e0       	ldi	r22, 0x01	; 1
     560:	ce 01       	movw	r24, r28
     562:	04 96       	adiw	r24, 0x04	; 4
     564:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <usart_put_string>
     568:	11 c0       	rjmp	.+34     	; 0x58c <LCDshort+0x70>
     56a:	62 e0       	ldi	r22, 0x02	; 2
     56c:	ce 01       	movw	r24, r28
     56e:	03 96       	adiw	r24, 0x03	; 3
     570:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <usart_put_string>
     574:	0b c0       	rjmp	.+22     	; 0x58c <LCDshort+0x70>
     576:	63 e0       	ldi	r22, 0x03	; 3
     578:	ce 01       	movw	r24, r28
     57a:	02 96       	adiw	r24, 0x02	; 2
     57c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <usart_put_string>
     580:	05 c0       	rjmp	.+10     	; 0x58c <LCDshort+0x70>
     582:	64 e0       	ldi	r22, 0x04	; 4
     584:	ce 01       	movw	r24, r28
     586:	01 96       	adiw	r24, 0x01	; 1
     588:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <usart_put_string>
     58c:	24 96       	adiw	r28, 0x04	; 4
     58e:	cd bf       	out	0x3d, r28	; 61
     590:	de bf       	out	0x3e, r29	; 62
     592:	df 91       	pop	r29
     594:	cf 91       	pop	r28
     596:	1f 91       	pop	r17
     598:	0f 91       	pop	r16
     59a:	ff 90       	pop	r15
     59c:	ef 90       	pop	r14
     59e:	df 90       	pop	r13
     5a0:	08 95       	ret

000005a2 <LCDclear>:
     5a2:	cf 93       	push	r28
     5a4:	df 93       	push	r29
     5a6:	cd b7       	in	r28, 0x3d	; 61
     5a8:	de b7       	in	r29, 0x3e	; 62
     5aa:	28 97       	sbiw	r28, 0x08	; 8
     5ac:	cd bf       	out	0x3d, r28	; 61
     5ae:	de bf       	out	0x3e, r29	; 62
     5b0:	0e 94 57 11 	call	0x22ae	; 0x22ae <USART_0_initialization>
     5b4:	88 e0       	ldi	r24, 0x08	; 8
     5b6:	ed ec       	ldi	r30, 0xCD	; 205
     5b8:	f3 ea       	ldi	r31, 0xA3	; 163
     5ba:	de 01       	movw	r26, r28
     5bc:	11 96       	adiw	r26, 0x01	; 1
     5be:	01 90       	ld	r0, Z+
     5c0:	0d 92       	st	X+, r0
     5c2:	8a 95       	dec	r24
     5c4:	e1 f7       	brne	.-8      	; 0x5be <LCDclear+0x1c>
     5c6:	68 e0       	ldi	r22, 0x08	; 8
     5c8:	ce 01       	movw	r24, r28
     5ca:	01 96       	adiw	r24, 0x01	; 1
     5cc:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <usart_put_string>
     5d0:	6a e0       	ldi	r22, 0x0A	; 10
     5d2:	70 e0       	ldi	r23, 0x00	; 0
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	0e 94 92 01 	call	0x324	; 0x324 <delay_ms>
     5dc:	28 96       	adiw	r28, 0x08	; 8
     5de:	cd bf       	out	0x3d, r28	; 61
     5e0:	de bf       	out	0x3e, r29	; 62
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	08 95       	ret

000005e8 <LCDspace>:
     5e8:	61 e0       	ldi	r22, 0x01	; 1
     5ea:	8e ef       	ldi	r24, 0xFE	; 254
     5ec:	93 ea       	ldi	r25, 0xA3	; 163
     5ee:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <usart_put_string>
     5f2:	6a e0       	ldi	r22, 0x0A	; 10
     5f4:	70 e0       	ldi	r23, 0x00	; 0
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	0e 94 92 01 	call	0x324	; 0x324 <delay_ms>
     5fe:	08 95       	ret

00000600 <clrRx>:
     600:	8c e0       	ldi	r24, 0x0C	; 12
     602:	98 e3       	ldi	r25, 0x38	; 56
     604:	80 93 01 39 	sts	0x3901, r24	; 0x803901 <p_GPSrcvData>
     608:	90 93 02 39 	sts	0x3902, r25	; 0x803902 <p_GPSrcvData+0x1>
     60c:	80 e0       	ldi	r24, 0x00	; 0
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	28 e5       	ldi	r18, 0x58	; 88
     612:	e0 91 01 39 	lds	r30, 0x3901	; 0x803901 <p_GPSrcvData>
     616:	f0 91 02 39 	lds	r31, 0x3902	; 0x803902 <p_GPSrcvData+0x1>
     61a:	e8 0f       	add	r30, r24
     61c:	f9 1f       	adc	r31, r25
     61e:	20 83       	st	Z, r18
     620:	01 96       	adiw	r24, 0x01	; 1
     622:	86 3b       	cpi	r24, 0xB6	; 182
     624:	91 05       	cpc	r25, r1
     626:	a9 f7       	brne	.-22     	; 0x612 <clrRx+0x12>
     628:	8c e0       	ldi	r24, 0x0C	; 12
     62a:	98 e3       	ldi	r25, 0x38	; 56
     62c:	80 93 01 39 	sts	0x3901, r24	; 0x803901 <p_GPSrcvData>
     630:	90 93 02 39 	sts	0x3902, r25	; 0x803902 <p_GPSrcvData+0x1>
     634:	08 95       	ret

00000636 <gpsReqDateUblox>:
     636:	bf 92       	push	r11
     638:	cf 92       	push	r12
     63a:	df 92       	push	r13
     63c:	ef 92       	push	r14
     63e:	ff 92       	push	r15
     640:	0f 93       	push	r16
     642:	1f 93       	push	r17
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	cd b7       	in	r28, 0x3d	; 61
     64a:	de b7       	in	r29, 0x3e	; 62
     64c:	6f 97       	sbiw	r28, 0x1f	; 31
     64e:	cd bf       	out	0x3d, r28	; 61
     650:	de bf       	out	0x3e, r29	; 62
     652:	8f e0       	ldi	r24, 0x0F	; 15
     654:	e5 ed       	ldi	r30, 0xD5	; 213
     656:	f3 ea       	ldi	r31, 0xA3	; 163
     658:	de 01       	movw	r26, r28
     65a:	11 96       	adiw	r26, 0x01	; 1
     65c:	01 90       	ld	r0, Z+
     65e:	0d 92       	st	X+, r0
     660:	8a 95       	dec	r24
     662:	e1 f7       	brne	.-8      	; 0x65c <gpsReqDateUblox+0x26>
     664:	04 e0       	ldi	r16, 0x04	; 4
     666:	b1 2c       	mov	r11, r1
     668:	c1 2c       	mov	r12, r1
     66a:	68 94       	set
     66c:	dd 24       	eor	r13, r13
     66e:	d3 f8       	bld	r13, 3
     670:	0f 2e       	mov	r0, r31
     672:	f3 ec       	ldi	r31, 0xC3	; 195
     674:	ef 2e       	mov	r14, r31
     676:	f8 e3       	ldi	r31, 0x38	; 56
     678:	ff 2e       	mov	r15, r31
     67a:	f0 2d       	mov	r31, r0
     67c:	a8 95       	wdr
     67e:	6f e0       	ldi	r22, 0x0F	; 15
     680:	ce 01       	movw	r24, r28
     682:	01 96       	adiw	r24, 0x01	; 1
     684:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <usart_put_string>
     688:	0e 94 00 03 	call	0x600	; 0x600 <clrRx>
     68c:	f6 01       	movw	r30, r12
     68e:	85 81       	ldd	r24, Z+5	; 0x05
     690:	80 68       	ori	r24, 0x80	; 128
     692:	85 83       	std	Z+5, r24	; 0x05
     694:	10 92 f9 38 	sts	0x38F9, r1	; 0x8038f9 <endOfLineFlag>
     698:	78 94       	sei
     69a:	80 91 f9 38 	lds	r24, 0x38F9	; 0x8038f9 <endOfLineFlag>
     69e:	81 11       	cpse	r24, r1
     6a0:	0a c0       	rjmp	.+20     	; 0x6b6 <gpsReqDateUblox+0x80>
     6a2:	64 e6       	ldi	r22, 0x64	; 100
     6a4:	70 e0       	ldi	r23, 0x00	; 0
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	0e 94 92 01 	call	0x324	; 0x324 <delay_ms>
     6ae:	1f e0       	ldi	r17, 0x0F	; 15
     6b0:	11 50       	subi	r17, 0x01	; 1
     6b2:	09 f0       	breq	.+2      	; 0x6b6 <gpsReqDateUblox+0x80>
     6b4:	0c c1       	rjmp	.+536    	; 0x8ce <gpsReqDateUblox+0x298>
     6b6:	80 91 f7 38 	lds	r24, 0x38F7	; 0x8038f7 <timeToFix>
     6ba:	90 91 f8 38 	lds	r25, 0x38F8	; 0x8038f8 <timeToFix+0x1>
     6be:	01 96       	adiw	r24, 0x01	; 1
     6c0:	80 93 f7 38 	sts	0x38F7, r24	; 0x8038f7 <timeToFix>
     6c4:	90 93 f8 38 	sts	0x38F8, r25	; 0x8038f8 <timeToFix+0x1>
     6c8:	81 3d       	cpi	r24, 0xD1	; 209
     6ca:	f2 e0       	ldi	r31, 0x02	; 2
     6cc:	9f 07       	cpc	r25, r31
     6ce:	24 f0       	brlt	.+8      	; 0x6d8 <gpsReqDateUblox+0xa2>
     6d0:	20 91 00 39 	lds	r18, 0x3900	; 0x803900 <mState>
     6d4:	21 30       	cpi	r18, 0x01	; 1
     6d6:	19 f4       	brne	.+6      	; 0x6de <gpsReqDateUblox+0xa8>
     6d8:	8d 3a       	cpi	r24, 0xAD	; 173
     6da:	93 40       	sbci	r25, 0x03	; 3
     6dc:	34 f0       	brlt	.+12     	; 0x6ea <gpsReqDateUblox+0xb4>
     6de:	8a e9       	ldi	r24, 0x9A	; 154
     6e0:	80 93 04 39 	sts	0x3904, r24	; 0x803904 <uBloxStatus>
     6e4:	8a e9       	ldi	r24, 0x9A	; 154
     6e6:	92 e0       	ldi	r25, 0x02	; 2
     6e8:	f9 c0       	rjmp	.+498    	; 0x8dc <gpsReqDateUblox+0x2a6>
     6ea:	f6 01       	movw	r30, r12
     6ec:	85 81       	ldd	r24, Z+5	; 0x05
     6ee:	8f 77       	andi	r24, 0x7F	; 127
     6f0:	85 83       	std	Z+5, r24	; 0x05
     6f2:	41 e4       	ldi	r20, 0x41	; 65
     6f4:	64 e4       	ldi	r22, 0x44	; 68
     6f6:	8a e5       	ldi	r24, 0x5A	; 90
     6f8:	0e 94 ad 00 	call	0x15a	; 0x15a <searchRcvBuffuBlox>
     6fc:	89 2b       	or	r24, r25
     6fe:	09 f0       	breq	.+2      	; 0x702 <gpsReqDateUblox+0xcc>
     700:	67 c0       	rjmp	.+206    	; 0x7d0 <gpsReqDateUblox+0x19a>
     702:	20 91 05 39 	lds	r18, 0x3905	; 0x803905 <GPSSearchPtr>
     706:	30 91 06 39 	lds	r19, 0x3906	; 0x803906 <GPSSearchPtr+0x1>
     70a:	d9 01       	movw	r26, r18
     70c:	12 97       	sbiw	r26, 0x02	; 2
     70e:	f8 e3       	ldi	r31, 0x38	; 56
     710:	a2 3c       	cpi	r26, 0xC2	; 194
     712:	bf 07       	cpc	r27, r31
     714:	09 f0       	breq	.+2      	; 0x718 <gpsReqDateUblox+0xe2>
     716:	78 f4       	brcc	.+30     	; 0x736 <gpsReqDateUblox+0x100>
     718:	fd 01       	movw	r30, r26
     71a:	80 81       	ld	r24, Z
     71c:	8a 32       	cpi	r24, 0x2A	; 42
     71e:	69 f0       	breq	.+26     	; 0x73a <gpsReqDateUblox+0x104>
     720:	31 96       	adiw	r30, 0x01	; 1
     722:	10 e0       	ldi	r17, 0x00	; 0
     724:	df 01       	movw	r26, r30
     726:	18 27       	eor	r17, r24
     728:	ee 16       	cp	r14, r30
     72a:	ff 06       	cpc	r15, r31
     72c:	39 f0       	breq	.+14     	; 0x73c <gpsReqDateUblox+0x106>
     72e:	81 91       	ld	r24, Z+
     730:	8a 32       	cpi	r24, 0x2A	; 42
     732:	c1 f7       	brne	.-16     	; 0x724 <gpsReqDateUblox+0xee>
     734:	03 c0       	rjmp	.+6      	; 0x73c <gpsReqDateUblox+0x106>
     736:	10 e0       	ldi	r17, 0x00	; 0
     738:	01 c0       	rjmp	.+2      	; 0x73c <gpsReqDateUblox+0x106>
     73a:	10 e0       	ldi	r17, 0x00	; 0
     73c:	12 96       	adiw	r26, 0x02	; 2
     73e:	6c 91       	ld	r22, X
     740:	12 97       	sbiw	r26, 0x02	; 2
     742:	11 96       	adiw	r26, 0x01	; 1
     744:	8c 91       	ld	r24, X
     746:	0e 94 20 01 	call	0x240	; 0x240 <asciiHexToHex>
     74a:	21 2f       	mov	r18, r17
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	28 17       	cp	r18, r24
     750:	39 07       	cpc	r19, r25
     752:	f1 f5       	brne	.+124    	; 0x7d0 <gpsReqDateUblox+0x19a>
     754:	34 c0       	rjmp	.+104    	; 0x7be <gpsReqDateUblox+0x188>
     756:	cf 01       	movw	r24, r30
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	80 93 05 39 	sts	0x3905, r24	; 0x803905 <GPSSearchPtr>
     75e:	90 93 06 39 	sts	0x3906, r25	; 0x803906 <GPSSearchPtr+0x1>
     762:	81 81       	ldd	r24, Z+1	; 0x01
     764:	8c 32       	cpi	r24, 0x2C	; 44
     766:	61 f5       	brne	.+88     	; 0x7c0 <gpsReqDateUblox+0x18a>
     768:	2f 5f       	subi	r18, 0xFF	; 255
     76a:	22 30       	cpi	r18, 0x02	; 2
     76c:	49 f5       	brne	.+82     	; 0x7c0 <gpsReqDateUblox+0x18a>
     76e:	22 81       	ldd	r18, Z+2	; 0x02
     770:	2c 32       	cpi	r18, 0x2C	; 44
     772:	71 f1       	breq	.+92     	; 0x7d0 <gpsReqDateUblox+0x19a>
     774:	36 81       	ldd	r19, Z+6	; 0x06
     776:	38 35       	cpi	r19, 0x58	; 88
     778:	59 f1       	breq	.+86     	; 0x7d0 <gpsReqDateUblox+0x19a>
     77a:	8b 2d       	mov	r24, r11
     77c:	90 e0       	ldi	r25, 0x00	; 0
     77e:	a4 e1       	ldi	r26, 0x14	; 20
     780:	b0 e0       	ldi	r27, 0x00	; 0
     782:	ac 0f       	add	r26, r28
     784:	bd 1f       	adc	r27, r29
     786:	a8 0f       	add	r26, r24
     788:	b9 1f       	adc	r27, r25
     78a:	3c 93       	st	X, r19
     78c:	a0 e1       	ldi	r26, 0x10	; 16
     78e:	b0 e0       	ldi	r27, 0x00	; 0
     790:	ac 0f       	add	r26, r28
     792:	bd 1f       	adc	r27, r29
     794:	a8 0f       	add	r26, r24
     796:	b9 1f       	adc	r27, r25
     798:	35 81       	ldd	r19, Z+5	; 0x05
     79a:	3c 93       	st	X, r19
     79c:	a8 e1       	ldi	r26, 0x18	; 24
     79e:	b0 e0       	ldi	r27, 0x00	; 0
     7a0:	ac 0f       	add	r26, r28
     7a2:	bd 1f       	adc	r27, r29
     7a4:	a8 0f       	add	r26, r24
     7a6:	b9 1f       	adc	r27, r25
     7a8:	33 81       	ldd	r19, Z+3	; 0x03
     7aa:	3c 93       	st	X, r19
     7ac:	ec e1       	ldi	r30, 0x1C	; 28
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	ec 0f       	add	r30, r28
     7b2:	fd 1f       	adc	r31, r29
     7b4:	e8 0f       	add	r30, r24
     7b6:	f9 1f       	adc	r31, r25
     7b8:	20 83       	st	Z, r18
     7ba:	b3 94       	inc	r11
     7bc:	09 c0       	rjmp	.+18     	; 0x7d0 <gpsReqDateUblox+0x19a>
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	e0 91 05 39 	lds	r30, 0x3905	; 0x803905 <GPSSearchPtr>
     7c4:	f0 91 06 39 	lds	r31, 0x3906	; 0x803906 <GPSSearchPtr+0x1>
     7c8:	88 e3       	ldi	r24, 0x38	; 56
     7ca:	e2 3c       	cpi	r30, 0xC2	; 194
     7cc:	f8 07       	cpc	r31, r24
     7ce:	18 f2       	brcs	.-122    	; 0x756 <gpsReqDateUblox+0x120>
     7d0:	01 50       	subi	r16, 0x01	; 1
     7d2:	09 f0       	breq	.+2      	; 0x7d6 <gpsReqDateUblox+0x1a0>
     7d4:	53 cf       	rjmp	.-346    	; 0x67c <gpsReqDateUblox+0x46>
     7d6:	1f 89       	ldd	r17, Y+23	; 0x17
     7d8:	81 e0       	ldi	r24, 0x01	; 1
     7da:	9e 89       	ldd	r25, Y+22	; 0x16
     7dc:	91 13       	cpse	r25, r17
     7de:	80 e0       	ldi	r24, 0x00	; 0
     7e0:	9d 89       	ldd	r25, Y+21	; 0x15
     7e2:	19 13       	cpse	r17, r25
     7e4:	01 c0       	rjmp	.+2      	; 0x7e8 <gpsReqDateUblox+0x1b2>
     7e6:	8f 5f       	subi	r24, 0xFF	; 255
     7e8:	9c 89       	ldd	r25, Y+20	; 0x14
     7ea:	19 13       	cpse	r17, r25
     7ec:	01 c0       	rjmp	.+2      	; 0x7f0 <gpsReqDateUblox+0x1ba>
     7ee:	8f 5f       	subi	r24, 0xFF	; 255
     7f0:	83 30       	cpi	r24, 0x03	; 3
     7f2:	08 f4       	brcc	.+2      	; 0x7f6 <gpsReqDateUblox+0x1c0>
     7f4:	5d c0       	rjmp	.+186    	; 0x8b0 <gpsReqDateUblox+0x27a>
     7f6:	0b 89       	ldd	r16, Y+19	; 0x13
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	9a 89       	ldd	r25, Y+18	; 0x12
     7fc:	90 13       	cpse	r25, r16
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	99 89       	ldd	r25, Y+17	; 0x11
     802:	09 13       	cpse	r16, r25
     804:	01 c0       	rjmp	.+2      	; 0x808 <gpsReqDateUblox+0x1d2>
     806:	8f 5f       	subi	r24, 0xFF	; 255
     808:	98 89       	ldd	r25, Y+16	; 0x10
     80a:	09 13       	cpse	r16, r25
     80c:	01 c0       	rjmp	.+2      	; 0x810 <gpsReqDateUblox+0x1da>
     80e:	8f 5f       	subi	r24, 0xFF	; 255
     810:	83 30       	cpi	r24, 0x03	; 3
     812:	08 f4       	brcc	.+2      	; 0x816 <gpsReqDateUblox+0x1e0>
     814:	50 c0       	rjmp	.+160    	; 0x8b6 <gpsReqDateUblox+0x280>
     816:	fb 8c       	ldd	r15, Y+27	; 0x1b
     818:	81 e0       	ldi	r24, 0x01	; 1
     81a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     81c:	9f 11       	cpse	r25, r15
     81e:	80 e0       	ldi	r24, 0x00	; 0
     820:	99 8d       	ldd	r25, Y+25	; 0x19
     822:	f9 12       	cpse	r15, r25
     824:	01 c0       	rjmp	.+2      	; 0x828 <gpsReqDateUblox+0x1f2>
     826:	8f 5f       	subi	r24, 0xFF	; 255
     828:	98 8d       	ldd	r25, Y+24	; 0x18
     82a:	f9 12       	cpse	r15, r25
     82c:	01 c0       	rjmp	.+2      	; 0x830 <gpsReqDateUblox+0x1fa>
     82e:	8f 5f       	subi	r24, 0xFF	; 255
     830:	83 30       	cpi	r24, 0x03	; 3
     832:	08 f4       	brcc	.+2      	; 0x836 <gpsReqDateUblox+0x200>
     834:	43 c0       	rjmp	.+134    	; 0x8bc <gpsReqDateUblox+0x286>
     836:	ef 8c       	ldd	r14, Y+31	; 0x1f
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	9e 8d       	ldd	r25, Y+30	; 0x1e
     83c:	9e 11       	cpse	r25, r14
     83e:	80 e0       	ldi	r24, 0x00	; 0
     840:	9d 8d       	ldd	r25, Y+29	; 0x1d
     842:	e9 12       	cpse	r14, r25
     844:	01 c0       	rjmp	.+2      	; 0x848 <gpsReqDateUblox+0x212>
     846:	8f 5f       	subi	r24, 0xFF	; 255
     848:	9c 8d       	ldd	r25, Y+28	; 0x1c
     84a:	e9 12       	cpse	r14, r25
     84c:	01 c0       	rjmp	.+2      	; 0x850 <gpsReqDateUblox+0x21a>
     84e:	8f 5f       	subi	r24, 0xFF	; 255
     850:	83 30       	cpi	r24, 0x03	; 3
     852:	b8 f1       	brcs	.+110    	; 0x8c2 <gpsReqDateUblox+0x28c>
     854:	20 91 ed 38 	lds	r18, 0x38ED	; 0x8038ed <gpsParams+0xf>
     858:	ee ed       	ldi	r30, 0xDE	; 222
     85a:	f8 e3       	ldi	r31, 0x38	; 56
     85c:	87 ef       	ldi	r24, 0xF7	; 247
     85e:	98 e3       	ldi	r25, 0x38	; 56
     860:	11 92       	st	Z+, r1
     862:	e8 17       	cp	r30, r24
     864:	f9 07       	cpc	r31, r25
     866:	e1 f7       	brne	.-8      	; 0x860 <gpsReqDateUblox+0x22a>
     868:	20 93 ed 38 	sts	0x38ED, r18	; 0x8038ed <gpsParams+0xf>
     86c:	ec e2       	ldi	r30, 0x2C	; 44
     86e:	fe 16       	cp	r15, r30
     870:	59 f1       	breq	.+86     	; 0x8c8 <gpsReqDateUblox+0x292>
     872:	e0 91 05 39 	lds	r30, 0x3905	; 0x803905 <GPSSearchPtr>
     876:	f0 91 06 39 	lds	r31, 0x3906	; 0x803906 <GPSSearchPtr+0x1>
     87a:	62 85       	ldd	r22, Z+10	; 0x0a
     87c:	81 85       	ldd	r24, Z+9	; 0x09
     87e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <asciiToHex>
     882:	0f 2e       	mov	r0, r31
     884:	fe ed       	ldi	r31, 0xDE	; 222
     886:	cf 2e       	mov	r12, r31
     888:	f8 e3       	ldi	r31, 0x38	; 56
     88a:	df 2e       	mov	r13, r31
     88c:	f0 2d       	mov	r31, r0
     88e:	f6 01       	movw	r30, r12
     890:	81 87       	std	Z+9, r24	; 0x09
     892:	61 2f       	mov	r22, r17
     894:	80 2f       	mov	r24, r16
     896:	0e 94 d5 00 	call	0x1aa	; 0x1aa <asciiToHex>
     89a:	f6 01       	movw	r30, r12
     89c:	82 87       	std	Z+10, r24	; 0x0a
     89e:	6f 2d       	mov	r22, r15
     8a0:	8e 2d       	mov	r24, r14
     8a2:	0e 94 d5 00 	call	0x1aa	; 0x1aa <asciiToHex>
     8a6:	f6 01       	movw	r30, r12
     8a8:	83 87       	std	Z+11, r24	; 0x0b
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	16 c0       	rjmp	.+44     	; 0x8dc <gpsReqDateUblox+0x2a6>
     8b0:	8a e9       	ldi	r24, 0x9A	; 154
     8b2:	92 e0       	ldi	r25, 0x02	; 2
     8b4:	13 c0       	rjmp	.+38     	; 0x8dc <gpsReqDateUblox+0x2a6>
     8b6:	8a e9       	ldi	r24, 0x9A	; 154
     8b8:	92 e0       	ldi	r25, 0x02	; 2
     8ba:	10 c0       	rjmp	.+32     	; 0x8dc <gpsReqDateUblox+0x2a6>
     8bc:	8a e9       	ldi	r24, 0x9A	; 154
     8be:	92 e0       	ldi	r25, 0x02	; 2
     8c0:	0d c0       	rjmp	.+26     	; 0x8dc <gpsReqDateUblox+0x2a6>
     8c2:	8a e9       	ldi	r24, 0x9A	; 154
     8c4:	92 e0       	ldi	r25, 0x02	; 2
     8c6:	0a c0       	rjmp	.+20     	; 0x8dc <gpsReqDateUblox+0x2a6>
     8c8:	8a e9       	ldi	r24, 0x9A	; 154
     8ca:	92 e0       	ldi	r25, 0x02	; 2
     8cc:	07 c0       	rjmp	.+14     	; 0x8dc <gpsReqDateUblox+0x2a6>
     8ce:	64 e6       	ldi	r22, 0x64	; 100
     8d0:	70 e0       	ldi	r23, 0x00	; 0
     8d2:	80 e0       	ldi	r24, 0x00	; 0
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	0e 94 92 01 	call	0x324	; 0x324 <delay_ms>
     8da:	ea ce       	rjmp	.-556    	; 0x6b0 <gpsReqDateUblox+0x7a>
     8dc:	6f 96       	adiw	r28, 0x1f	; 31
     8de:	cd bf       	out	0x3d, r28	; 61
     8e0:	de bf       	out	0x3e, r29	; 62
     8e2:	df 91       	pop	r29
     8e4:	cf 91       	pop	r28
     8e6:	1f 91       	pop	r17
     8e8:	0f 91       	pop	r16
     8ea:	ff 90       	pop	r15
     8ec:	ef 90       	pop	r14
     8ee:	df 90       	pop	r13
     8f0:	cf 90       	pop	r12
     8f2:	bf 90       	pop	r11
     8f4:	08 95       	ret

000008f6 <GPSgetDate>:
     8f6:	0e 94 1b 03 	call	0x636	; 0x636 <gpsReqDateUblox>
     8fa:	00 97       	sbiw	r24, 0x00	; 0
     8fc:	39 f4       	brne	.+14     	; 0x90c <GPSgetDate+0x16>
     8fe:	e0 91 05 39 	lds	r30, 0x3905	; 0x803905 <GPSSearchPtr>
     902:	f0 91 06 39 	lds	r31, 0x3906	; 0x803906 <GPSSearchPtr+0x1>
     906:	22 85       	ldd	r18, Z+10	; 0x0a
     908:	28 35       	cpi	r18, 0x58	; 88
     90a:	39 f5       	brne	.+78     	; 0x95a <GPSgetDate+0x64>
     90c:	0e 94 1b 03 	call	0x636	; 0x636 <gpsReqDateUblox>
     910:	00 97       	sbiw	r24, 0x00	; 0
     912:	39 f4       	brne	.+14     	; 0x922 <GPSgetDate+0x2c>
     914:	e0 91 05 39 	lds	r30, 0x3905	; 0x803905 <GPSSearchPtr>
     918:	f0 91 06 39 	lds	r31, 0x3906	; 0x803906 <GPSSearchPtr+0x1>
     91c:	22 85       	ldd	r18, Z+10	; 0x0a
     91e:	28 35       	cpi	r18, 0x58	; 88
     920:	e1 f4       	brne	.+56     	; 0x95a <GPSgetDate+0x64>
     922:	0e 94 1b 03 	call	0x636	; 0x636 <gpsReqDateUblox>
     926:	00 97       	sbiw	r24, 0x00	; 0
     928:	39 f4       	brne	.+14     	; 0x938 <GPSgetDate+0x42>
     92a:	e0 91 05 39 	lds	r30, 0x3905	; 0x803905 <GPSSearchPtr>
     92e:	f0 91 06 39 	lds	r31, 0x3906	; 0x803906 <GPSSearchPtr+0x1>
     932:	22 85       	ldd	r18, Z+10	; 0x0a
     934:	28 35       	cpi	r18, 0x58	; 88
     936:	89 f4       	brne	.+34     	; 0x95a <GPSgetDate+0x64>
     938:	0e 94 1b 03 	call	0x636	; 0x636 <gpsReqDateUblox>
     93c:	00 97       	sbiw	r24, 0x00	; 0
     93e:	41 f4       	brne	.+16     	; 0x950 <GPSgetDate+0x5a>
     940:	e0 91 05 39 	lds	r30, 0x3905	; 0x803905 <GPSSearchPtr>
     944:	f0 91 06 39 	lds	r31, 0x3906	; 0x803906 <GPSSearchPtr+0x1>
     948:	22 85       	ldd	r18, Z+10	; 0x0a
     94a:	28 35       	cpi	r18, 0x58	; 88
     94c:	31 f4       	brne	.+12     	; 0x95a <GPSgetDate+0x64>
     94e:	03 c0       	rjmp	.+6      	; 0x956 <GPSgetDate+0x60>
     950:	8a e9       	ldi	r24, 0x9A	; 154
     952:	92 e0       	ldi	r25, 0x02	; 2
     954:	08 95       	ret
     956:	8a e9       	ldi	r24, 0x9A	; 154
     958:	92 e0       	ldi	r25, 0x02	; 2
     95a:	08 95       	ret

0000095c <gpsReqStatusUblox>:
     95c:	cf 92       	push	r12
     95e:	df 92       	push	r13
     960:	ef 92       	push	r14
     962:	ff 92       	push	r15
     964:	0f 93       	push	r16
     966:	1f 93       	push	r17
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	10 92 04 39 	sts	0x3904, r1	; 0x803904 <uBloxStatus>
     970:	68 94       	set
     972:	cc 24       	eor	r12, r12
     974:	c2 f8       	bld	r12, 2
     976:	d1 2c       	mov	r13, r1
     978:	e1 2c       	mov	r14, r1
     97a:	68 94       	set
     97c:	ff 24       	eor	r15, r15
     97e:	f3 f8       	bld	r15, 3
     980:	03 ec       	ldi	r16, 0xC3	; 195
     982:	18 e3       	ldi	r17, 0x38	; 56
     984:	a8 95       	wdr
     986:	0e 94 00 03 	call	0x600	; 0x600 <clrRx>
     98a:	e7 01       	movw	r28, r14
     98c:	8d 81       	ldd	r24, Y+5	; 0x05
     98e:	80 68       	ori	r24, 0x80	; 128
     990:	8d 83       	std	Y+5, r24	; 0x05
     992:	10 92 f9 38 	sts	0x38F9, r1	; 0x8038f9 <endOfLineFlag>
     996:	78 94       	sei
     998:	80 91 f9 38 	lds	r24, 0x38F9	; 0x8038f9 <endOfLineFlag>
     99c:	81 11       	cpse	r24, r1
     99e:	0a c0       	rjmp	.+20     	; 0x9b4 <gpsReqStatusUblox+0x58>
     9a0:	64 e6       	ldi	r22, 0x64	; 100
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	80 e0       	ldi	r24, 0x00	; 0
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	0e 94 92 01 	call	0x324	; 0x324 <delay_ms>
     9ac:	cf e0       	ldi	r28, 0x0F	; 15
     9ae:	c1 50       	subi	r28, 0x01	; 1
     9b0:	09 f0       	breq	.+2      	; 0x9b4 <gpsReqStatusUblox+0x58>
     9b2:	83 c0       	rjmp	.+262    	; 0xaba <gpsReqStatusUblox+0x15e>
     9b4:	80 91 f7 38 	lds	r24, 0x38F7	; 0x8038f7 <timeToFix>
     9b8:	90 91 f8 38 	lds	r25, 0x38F8	; 0x8038f8 <timeToFix+0x1>
     9bc:	01 96       	adiw	r24, 0x01	; 1
     9be:	80 93 f7 38 	sts	0x38F7, r24	; 0x8038f7 <timeToFix>
     9c2:	90 93 f8 38 	sts	0x38F8, r25	; 0x8038f8 <timeToFix+0x1>
     9c6:	81 3d       	cpi	r24, 0xD1	; 209
     9c8:	d2 e0       	ldi	r29, 0x02	; 2
     9ca:	9d 07       	cpc	r25, r29
     9cc:	24 f0       	brlt	.+8      	; 0x9d6 <gpsReqStatusUblox+0x7a>
     9ce:	20 91 00 39 	lds	r18, 0x3900	; 0x803900 <mState>
     9d2:	21 30       	cpi	r18, 0x01	; 1
     9d4:	19 f4       	brne	.+6      	; 0x9dc <gpsReqStatusUblox+0x80>
     9d6:	8d 3a       	cpi	r24, 0xAD	; 173
     9d8:	93 40       	sbci	r25, 0x03	; 3
     9da:	34 f0       	brlt	.+12     	; 0x9e8 <gpsReqStatusUblox+0x8c>
     9dc:	8a e9       	ldi	r24, 0x9A	; 154
     9de:	80 93 04 39 	sts	0x3904, r24	; 0x803904 <uBloxStatus>
     9e2:	8a e9       	ldi	r24, 0x9A	; 154
     9e4:	92 e0       	ldi	r25, 0x02	; 2
     9e6:	70 c0       	rjmp	.+224    	; 0xac8 <gpsReqStatusUblox+0x16c>
     9e8:	e7 01       	movw	r28, r14
     9ea:	8d 81       	ldd	r24, Y+5	; 0x05
     9ec:	8f 77       	andi	r24, 0x7F	; 127
     9ee:	8d 83       	std	Y+5, r24	; 0x05
     9f0:	43 e4       	ldi	r20, 0x43	; 67
     9f2:	6d e4       	ldi	r22, 0x4D	; 77
     9f4:	82 e5       	ldi	r24, 0x52	; 82
     9f6:	0e 94 ad 00 	call	0x15a	; 0x15a <searchRcvBuffuBlox>
     9fa:	89 2b       	or	r24, r25
     9fc:	09 f0       	breq	.+2      	; 0xa00 <gpsReqStatusUblox+0xa4>
     9fe:	44 c0       	rjmp	.+136    	; 0xa88 <gpsReqStatusUblox+0x12c>
     a00:	e0 91 05 39 	lds	r30, 0x3905	; 0x803905 <GPSSearchPtr>
     a04:	f0 91 06 39 	lds	r31, 0x3906	; 0x803906 <GPSSearchPtr+0x1>
     a08:	df 01       	movw	r26, r30
     a0a:	12 97       	sbiw	r26, 0x02	; 2
     a0c:	d8 e3       	ldi	r29, 0x38	; 56
     a0e:	a2 3c       	cpi	r26, 0xC2	; 194
     a10:	bd 07       	cpc	r27, r29
     a12:	09 f0       	breq	.+2      	; 0xa16 <gpsReqStatusUblox+0xba>
     a14:	78 f4       	brcc	.+30     	; 0xa34 <gpsReqStatusUblox+0xd8>
     a16:	ed 01       	movw	r28, r26
     a18:	88 81       	ld	r24, Y
     a1a:	8a 32       	cpi	r24, 0x2A	; 42
     a1c:	69 f0       	breq	.+26     	; 0xa38 <gpsReqStatusUblox+0xdc>
     a1e:	31 97       	sbiw	r30, 0x01	; 1
     a20:	c0 e0       	ldi	r28, 0x00	; 0
     a22:	df 01       	movw	r26, r30
     a24:	c8 27       	eor	r28, r24
     a26:	e0 17       	cp	r30, r16
     a28:	f1 07       	cpc	r31, r17
     a2a:	39 f0       	breq	.+14     	; 0xa3a <gpsReqStatusUblox+0xde>
     a2c:	81 91       	ld	r24, Z+
     a2e:	8a 32       	cpi	r24, 0x2A	; 42
     a30:	c1 f7       	brne	.-16     	; 0xa22 <gpsReqStatusUblox+0xc6>
     a32:	03 c0       	rjmp	.+6      	; 0xa3a <gpsReqStatusUblox+0xde>
     a34:	c0 e0       	ldi	r28, 0x00	; 0
     a36:	01 c0       	rjmp	.+2      	; 0xa3a <gpsReqStatusUblox+0xde>
     a38:	c0 e0       	ldi	r28, 0x00	; 0
     a3a:	12 96       	adiw	r26, 0x02	; 2
     a3c:	6c 91       	ld	r22, X
     a3e:	12 97       	sbiw	r26, 0x02	; 2
     a40:	11 96       	adiw	r26, 0x01	; 1
     a42:	8c 91       	ld	r24, X
     a44:	0e 94 20 01 	call	0x240	; 0x240 <asciiHexToHex>
     a48:	2c 2f       	mov	r18, r28
     a4a:	30 e0       	ldi	r19, 0x00	; 0
     a4c:	28 17       	cp	r18, r24
     a4e:	39 07       	cpc	r19, r25
     a50:	d9 f4       	brne	.+54     	; 0xa88 <gpsReqStatusUblox+0x12c>
     a52:	11 c0       	rjmp	.+34     	; 0xa76 <gpsReqStatusUblox+0x11a>
     a54:	cf 01       	movw	r24, r30
     a56:	01 96       	adiw	r24, 0x01	; 1
     a58:	80 93 05 39 	sts	0x3905, r24	; 0x803905 <GPSSearchPtr>
     a5c:	90 93 06 39 	sts	0x3906, r25	; 0x803906 <GPSSearchPtr+0x1>
     a60:	81 81       	ldd	r24, Z+1	; 0x01
     a62:	8c 32       	cpi	r24, 0x2C	; 44
     a64:	49 f4       	brne	.+18     	; 0xa78 <gpsReqStatusUblox+0x11c>
     a66:	2f 5f       	subi	r18, 0xFF	; 255
     a68:	22 30       	cpi	r18, 0x02	; 2
     a6a:	31 f4       	brne	.+12     	; 0xa78 <gpsReqStatusUblox+0x11c>
     a6c:	82 81       	ldd	r24, Z+2	; 0x02
     a6e:	81 34       	cpi	r24, 0x41	; 65
     a70:	59 f4       	brne	.+22     	; 0xa88 <gpsReqStatusUblox+0x12c>
     a72:	d3 94       	inc	r13
     a74:	09 c0       	rjmp	.+18     	; 0xa88 <gpsReqStatusUblox+0x12c>
     a76:	20 e0       	ldi	r18, 0x00	; 0
     a78:	e0 91 05 39 	lds	r30, 0x3905	; 0x803905 <GPSSearchPtr>
     a7c:	f0 91 06 39 	lds	r31, 0x3906	; 0x803906 <GPSSearchPtr+0x1>
     a80:	d8 e3       	ldi	r29, 0x38	; 56
     a82:	e2 3c       	cpi	r30, 0xC2	; 194
     a84:	fd 07       	cpc	r31, r29
     a86:	30 f3       	brcs	.-52     	; 0xa54 <gpsReqStatusUblox+0xf8>
     a88:	ca 94       	dec	r12
     a8a:	c1 10       	cpse	r12, r1
     a8c:	7b cf       	rjmp	.-266    	; 0x984 <gpsReqStatusUblox+0x28>
     a8e:	e1 e0       	ldi	r30, 0x01	; 1
     a90:	ed 15       	cp	r30, r13
     a92:	68 f4       	brcc	.+26     	; 0xaae <gpsReqStatusUblox+0x152>
     a94:	e0 91 05 39 	lds	r30, 0x3905	; 0x803905 <GPSSearchPtr>
     a98:	f0 91 06 39 	lds	r31, 0x3906	; 0x803906 <GPSSearchPtr+0x1>
     a9c:	81 81       	ldd	r24, Z+1	; 0x01
     a9e:	81 34       	cpi	r24, 0x41	; 65
     aa0:	31 f4       	brne	.+12     	; 0xaae <gpsReqStatusUblox+0x152>
     aa2:	89 e2       	ldi	r24, 0x29	; 41
     aa4:	80 93 04 39 	sts	0x3904, r24	; 0x803904 <uBloxStatus>
     aa8:	80 e0       	ldi	r24, 0x00	; 0
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	0d c0       	rjmp	.+26     	; 0xac8 <gpsReqStatusUblox+0x16c>
     aae:	8a e9       	ldi	r24, 0x9A	; 154
     ab0:	80 93 04 39 	sts	0x3904, r24	; 0x803904 <uBloxStatus>
     ab4:	8a e9       	ldi	r24, 0x9A	; 154
     ab6:	92 e0       	ldi	r25, 0x02	; 2
     ab8:	07 c0       	rjmp	.+14     	; 0xac8 <gpsReqStatusUblox+0x16c>
     aba:	64 e6       	ldi	r22, 0x64	; 100
     abc:	70 e0       	ldi	r23, 0x00	; 0
     abe:	80 e0       	ldi	r24, 0x00	; 0
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	0e 94 92 01 	call	0x324	; 0x324 <delay_ms>
     ac6:	73 cf       	rjmp	.-282    	; 0x9ae <gpsReqStatusUblox+0x52>
     ac8:	df 91       	pop	r29
     aca:	cf 91       	pop	r28
     acc:	1f 91       	pop	r17
     ace:	0f 91       	pop	r16
     ad0:	ff 90       	pop	r15
     ad2:	ef 90       	pop	r14
     ad4:	df 90       	pop	r13
     ad6:	cf 90       	pop	r12
     ad8:	08 95       	ret

00000ada <gpsReqLocUblox>:
     ada:	8f 92       	push	r8
     adc:	9f 92       	push	r9
     ade:	af 92       	push	r10
     ae0:	bf 92       	push	r11
     ae2:	cf 92       	push	r12
     ae4:	df 92       	push	r13
     ae6:	ef 92       	push	r14
     ae8:	ff 92       	push	r15
     aea:	0f 93       	push	r16
     aec:	1f 93       	push	r17
     aee:	cf 93       	push	r28
     af0:	df 93       	push	r29
     af2:	cd b7       	in	r28, 0x3d	; 61
     af4:	de b7       	in	r29, 0x3e	; 62
     af6:	af 97       	sbiw	r28, 0x2f	; 47
     af8:	cd bf       	out	0x3d, r28	; 61
     afa:	de bf       	out	0x3e, r29	; 62
     afc:	8f e0       	ldi	r24, 0x0F	; 15
     afe:	e4 ee       	ldi	r30, 0xE4	; 228
     b00:	f3 ea       	ldi	r31, 0xA3	; 163
     b02:	de 01       	movw	r26, r28
     b04:	11 96       	adiw	r26, 0x01	; 1
     b06:	01 90       	ld	r0, Z+
     b08:	0d 92       	st	X+, r0
     b0a:	8a 95       	dec	r24
     b0c:	e1 f7       	brne	.-8      	; 0xb06 <gpsReqLocUblox+0x2c>
     b0e:	21 e0       	ldi	r18, 0x01	; 1
     b10:	2f 8f       	std	Y+31, r18	; 0x1f
     b12:	92 e0       	ldi	r25, 0x02	; 2
     b14:	9a 8f       	std	Y+26, r25	; 0x1a
     b16:	83 e0       	ldi	r24, 0x03	; 3
     b18:	89 8f       	std	Y+25, r24	; 0x19
     b1a:	2f 8b       	std	Y+23, r18	; 0x17
     b1c:	9a 8b       	std	Y+18, r25	; 0x12
     b1e:	89 8b       	std	Y+17, r24	; 0x11
     b20:	2f a3       	std	Y+39, r18	; 0x27
     b22:	9a a3       	std	Y+34, r25	; 0x22
     b24:	89 a3       	std	Y+33, r24	; 0x21
     b26:	68 94       	set
     b28:	bb 24       	eor	r11, r11
     b2a:	b3 f8       	bld	r11, 3
     b2c:	a1 2c       	mov	r10, r1
     b2e:	c1 2c       	mov	r12, r1
     b30:	68 94       	set
     b32:	dd 24       	eor	r13, r13
     b34:	d3 f8       	bld	r13, 3
     b36:	0f 2e       	mov	r0, r31
     b38:	f3 ec       	ldi	r31, 0xC3	; 195
     b3a:	ef 2e       	mov	r14, r31
     b3c:	f8 e3       	ldi	r31, 0x38	; 56
     b3e:	ff 2e       	mov	r15, r31
     b40:	f0 2d       	mov	r31, r0
     b42:	a8 95       	wdr
     b44:	6f e0       	ldi	r22, 0x0F	; 15
     b46:	ce 01       	movw	r24, r28
     b48:	01 96       	adiw	r24, 0x01	; 1
     b4a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <usart_put_string>
     b4e:	0e 94 00 03 	call	0x600	; 0x600 <clrRx>
     b52:	d6 01       	movw	r26, r12
     b54:	15 96       	adiw	r26, 0x05	; 5
     b56:	8c 91       	ld	r24, X
     b58:	15 97       	sbiw	r26, 0x05	; 5
     b5a:	80 68       	ori	r24, 0x80	; 128
     b5c:	15 96       	adiw	r26, 0x05	; 5
     b5e:	8c 93       	st	X, r24
     b60:	10 92 f9 38 	sts	0x38F9, r1	; 0x8038f9 <endOfLineFlag>
     b64:	78 94       	sei
     b66:	80 91 f9 38 	lds	r24, 0x38F9	; 0x8038f9 <endOfLineFlag>
     b6a:	81 11       	cpse	r24, r1
     b6c:	0a c0       	rjmp	.+20     	; 0xb82 <gpsReqLocUblox+0xa8>
     b6e:	64 e6       	ldi	r22, 0x64	; 100
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	80 e0       	ldi	r24, 0x00	; 0
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	0e 94 92 01 	call	0x324	; 0x324 <delay_ms>
     b7a:	1f e0       	ldi	r17, 0x0F	; 15
     b7c:	11 50       	subi	r17, 0x01	; 1
     b7e:	09 f0       	breq	.+2      	; 0xb82 <gpsReqLocUblox+0xa8>
     b80:	e7 c1       	rjmp	.+974    	; 0xf50 <gpsReqLocUblox+0x476>
     b82:	00 91 f7 38 	lds	r16, 0x38F7	; 0x8038f7 <timeToFix>
     b86:	10 91 f8 38 	lds	r17, 0x38F8	; 0x8038f8 <timeToFix+0x1>
     b8a:	01 3d       	cpi	r16, 0xD1	; 209
     b8c:	b2 e0       	ldi	r27, 0x02	; 2
     b8e:	1b 07       	cpc	r17, r27
     b90:	24 f0       	brlt	.+8      	; 0xb9a <gpsReqLocUblox+0xc0>
     b92:	80 91 00 39 	lds	r24, 0x3900	; 0x803900 <mState>
     b96:	81 30       	cpi	r24, 0x01	; 1
     b98:	21 f4       	brne	.+8      	; 0xba2 <gpsReqLocUblox+0xc8>
     b9a:	0d 3a       	cpi	r16, 0xAD	; 173
     b9c:	e3 e0       	ldi	r30, 0x03	; 3
     b9e:	1e 07       	cpc	r17, r30
     ba0:	34 f0       	brlt	.+12     	; 0xbae <gpsReqLocUblox+0xd4>
     ba2:	8a e9       	ldi	r24, 0x9A	; 154
     ba4:	80 93 04 39 	sts	0x3904, r24	; 0x803904 <uBloxStatus>
     ba8:	8a e9       	ldi	r24, 0x9A	; 154
     baa:	92 e0       	ldi	r25, 0x02	; 2
     bac:	d8 c1       	rjmp	.+944    	; 0xf5e <gpsReqLocUblox+0x484>
     bae:	0f 5f       	subi	r16, 0xFF	; 255
     bb0:	1f 4f       	sbci	r17, 0xFF	; 255
     bb2:	91 2e       	mov	r9, r17
     bb4:	00 93 f7 38 	sts	0x38F7, r16	; 0x8038f7 <timeToFix>
     bb8:	10 93 f8 38 	sts	0x38F8, r17	; 0x8038f8 <timeToFix+0x1>
     bbc:	d6 01       	movw	r26, r12
     bbe:	15 96       	adiw	r26, 0x05	; 5
     bc0:	8c 91       	ld	r24, X
     bc2:	15 97       	sbiw	r26, 0x05	; 5
     bc4:	8f 77       	andi	r24, 0x7F	; 127
     bc6:	15 96       	adiw	r26, 0x05	; 5
     bc8:	8c 93       	st	X, r24
     bca:	43 e5       	ldi	r20, 0x53	; 83
     bcc:	6e e4       	ldi	r22, 0x4E	; 78
     bce:	87 e4       	ldi	r24, 0x47	; 71
     bd0:	0e 94 ad 00 	call	0x15a	; 0x15a <searchRcvBuffuBlox>
     bd4:	89 2b       	or	r24, r25
     bd6:	09 f0       	breq	.+2      	; 0xbda <gpsReqLocUblox+0x100>
     bd8:	7b c0       	rjmp	.+246    	; 0xcd0 <gpsReqLocUblox+0x1f6>
     bda:	20 91 05 39 	lds	r18, 0x3905	; 0x803905 <GPSSearchPtr>
     bde:	30 91 06 39 	lds	r19, 0x3906	; 0x803906 <GPSSearchPtr+0x1>
     be2:	d9 01       	movw	r26, r18
     be4:	12 97       	sbiw	r26, 0x02	; 2
     be6:	e8 e3       	ldi	r30, 0x38	; 56
     be8:	a2 3c       	cpi	r26, 0xC2	; 194
     bea:	be 07       	cpc	r27, r30
     bec:	09 f0       	breq	.+2      	; 0xbf0 <gpsReqLocUblox+0x116>
     bee:	78 f4       	brcc	.+30     	; 0xc0e <gpsReqLocUblox+0x134>
     bf0:	fd 01       	movw	r30, r26
     bf2:	80 81       	ld	r24, Z
     bf4:	8a 32       	cpi	r24, 0x2A	; 42
     bf6:	69 f0       	breq	.+26     	; 0xc12 <gpsReqLocUblox+0x138>
     bf8:	31 96       	adiw	r30, 0x01	; 1
     bfa:	81 2c       	mov	r8, r1
     bfc:	df 01       	movw	r26, r30
     bfe:	88 26       	eor	r8, r24
     c00:	ee 15       	cp	r30, r14
     c02:	ff 05       	cpc	r31, r15
     c04:	39 f0       	breq	.+14     	; 0xc14 <gpsReqLocUblox+0x13a>
     c06:	81 91       	ld	r24, Z+
     c08:	8a 32       	cpi	r24, 0x2A	; 42
     c0a:	c1 f7       	brne	.-16     	; 0xbfc <gpsReqLocUblox+0x122>
     c0c:	03 c0       	rjmp	.+6      	; 0xc14 <gpsReqLocUblox+0x13a>
     c0e:	81 2c       	mov	r8, r1
     c10:	01 c0       	rjmp	.+2      	; 0xc14 <gpsReqLocUblox+0x13a>
     c12:	81 2c       	mov	r8, r1
     c14:	12 96       	adiw	r26, 0x02	; 2
     c16:	6c 91       	ld	r22, X
     c18:	12 97       	sbiw	r26, 0x02	; 2
     c1a:	11 96       	adiw	r26, 0x01	; 1
     c1c:	8c 91       	ld	r24, X
     c1e:	0e 94 20 01 	call	0x240	; 0x240 <asciiHexToHex>
     c22:	28 2d       	mov	r18, r8
     c24:	30 e0       	ldi	r19, 0x00	; 0
     c26:	28 17       	cp	r18, r24
     c28:	39 07       	cpc	r19, r25
     c2a:	09 f0       	breq	.+2      	; 0xc2e <gpsReqLocUblox+0x154>
     c2c:	51 c0       	rjmp	.+162    	; 0xcd0 <gpsReqLocUblox+0x1f6>
     c2e:	46 c0       	rjmp	.+140    	; 0xcbc <gpsReqLocUblox+0x1e2>
     c30:	cf 01       	movw	r24, r30
     c32:	01 96       	adiw	r24, 0x01	; 1
     c34:	80 93 05 39 	sts	0x3905, r24	; 0x803905 <GPSSearchPtr>
     c38:	90 93 06 39 	sts	0x3906, r25	; 0x803906 <GPSSearchPtr+0x1>
     c3c:	81 81       	ldd	r24, Z+1	; 0x01
     c3e:	8c 32       	cpi	r24, 0x2C	; 44
     c40:	f1 f5       	brne	.+124    	; 0xcbe <gpsReqLocUblox+0x1e4>
     c42:	2f 5f       	subi	r18, 0xFF	; 255
     c44:	22 30       	cpi	r18, 0x02	; 2
     c46:	d9 f5       	brne	.+118    	; 0xcbe <gpsReqLocUblox+0x1e4>
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	8c 32       	cpi	r24, 0x2C	; 44
     c4c:	09 f4       	brne	.+2      	; 0xc50 <gpsReqLocUblox+0x176>
     c4e:	40 c0       	rjmp	.+128    	; 0xcd0 <gpsReqLocUblox+0x1f6>
     c50:	88 35       	cpi	r24, 0x58	; 88
     c52:	f1 f1       	breq	.+124    	; 0xcd0 <gpsReqLocUblox+0x1f6>
     c54:	8a 2d       	mov	r24, r10
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	48 e1       	ldi	r20, 0x18	; 24
     c5a:	50 e0       	ldi	r21, 0x00	; 0
     c5c:	4c 0f       	add	r20, r28
     c5e:	5d 1f       	adc	r21, r29
     c60:	48 0f       	add	r20, r24
     c62:	59 1f       	adc	r21, r25
     c64:	9f 01       	movw	r18, r30
     c66:	27 50       	subi	r18, 0x07	; 7
     c68:	31 09       	sbc	r19, r1
     c6a:	d9 01       	movw	r26, r18
     c6c:	2c 91       	ld	r18, X
     c6e:	da 01       	movw	r26, r20
     c70:	2c 93       	st	X, r18
     c72:	40 e1       	ldi	r20, 0x10	; 16
     c74:	50 e0       	ldi	r21, 0x00	; 0
     c76:	4c 0f       	add	r20, r28
     c78:	5d 1f       	adc	r21, r29
     c7a:	48 0f       	add	r20, r24
     c7c:	59 1f       	adc	r21, r25
     c7e:	9f 01       	movw	r18, r30
     c80:	28 50       	subi	r18, 0x08	; 8
     c82:	31 09       	sbc	r19, r1
     c84:	d9 01       	movw	r26, r18
     c86:	2c 91       	ld	r18, X
     c88:	da 01       	movw	r26, r20
     c8a:	2c 93       	st	X, r18
     c8c:	40 e2       	ldi	r20, 0x20	; 32
     c8e:	50 e0       	ldi	r21, 0x00	; 0
     c90:	4c 0f       	add	r20, r28
     c92:	5d 1f       	adc	r21, r29
     c94:	48 0f       	add	r20, r24
     c96:	59 1f       	adc	r21, r25
     c98:	9f 01       	movw	r18, r30
     c9a:	25 50       	subi	r18, 0x05	; 5
     c9c:	31 09       	sbc	r19, r1
     c9e:	d9 01       	movw	r26, r18
     ca0:	2c 91       	ld	r18, X
     ca2:	da 01       	movw	r26, r20
     ca4:	2c 93       	st	X, r18
     ca6:	a8 e2       	ldi	r26, 0x28	; 40
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	ac 0f       	add	r26, r28
     cac:	bd 1f       	adc	r27, r29
     cae:	a8 0f       	add	r26, r24
     cb0:	b9 1f       	adc	r27, r25
     cb2:	36 97       	sbiw	r30, 0x06	; 6
     cb4:	20 81       	ld	r18, Z
     cb6:	2c 93       	st	X, r18
     cb8:	a3 94       	inc	r10
     cba:	0a c0       	rjmp	.+20     	; 0xcd0 <gpsReqLocUblox+0x1f6>
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	e0 91 05 39 	lds	r30, 0x3905	; 0x803905 <GPSSearchPtr>
     cc2:	f0 91 06 39 	lds	r31, 0x3906	; 0x803906 <GPSSearchPtr+0x1>
     cc6:	b8 e3       	ldi	r27, 0x38	; 56
     cc8:	e2 3c       	cpi	r30, 0xC2	; 194
     cca:	fb 07       	cpc	r31, r27
     ccc:	08 f4       	brcc	.+2      	; 0xcd0 <gpsReqLocUblox+0x1f6>
     cce:	b0 cf       	rjmp	.-160    	; 0xc30 <gpsReqLocUblox+0x156>
     cd0:	ba 94       	dec	r11
     cd2:	b1 10       	cpse	r11, r1
     cd4:	36 cf       	rjmp	.-404    	; 0xb42 <gpsReqLocUblox+0x68>
     cd6:	6f 8d       	ldd	r22, Y+31	; 0x1f
     cd8:	81 e0       	ldi	r24, 0x01	; 1
     cda:	9e 8d       	ldd	r25, Y+30	; 0x1e
     cdc:	96 13       	cpse	r25, r22
     cde:	80 e0       	ldi	r24, 0x00	; 0
     ce0:	9d 8d       	ldd	r25, Y+29	; 0x1d
     ce2:	69 13       	cpse	r22, r25
     ce4:	01 c0       	rjmp	.+2      	; 0xce8 <gpsReqLocUblox+0x20e>
     ce6:	8f 5f       	subi	r24, 0xFF	; 255
     ce8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cea:	69 13       	cpse	r22, r25
     cec:	01 c0       	rjmp	.+2      	; 0xcf0 <gpsReqLocUblox+0x216>
     cee:	8f 5f       	subi	r24, 0xFF	; 255
     cf0:	9b 8d       	ldd	r25, Y+27	; 0x1b
     cf2:	69 13       	cpse	r22, r25
     cf4:	01 c0       	rjmp	.+2      	; 0xcf8 <gpsReqLocUblox+0x21e>
     cf6:	8f 5f       	subi	r24, 0xFF	; 255
     cf8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cfa:	69 13       	cpse	r22, r25
     cfc:	01 c0       	rjmp	.+2      	; 0xd00 <gpsReqLocUblox+0x226>
     cfe:	8f 5f       	subi	r24, 0xFF	; 255
     d00:	99 8d       	ldd	r25, Y+25	; 0x19
     d02:	69 13       	cpse	r22, r25
     d04:	01 c0       	rjmp	.+2      	; 0xd08 <gpsReqLocUblox+0x22e>
     d06:	8f 5f       	subi	r24, 0xFF	; 255
     d08:	98 8d       	ldd	r25, Y+24	; 0x18
     d0a:	69 13       	cpse	r22, r25
     d0c:	01 c0       	rjmp	.+2      	; 0xd10 <gpsReqLocUblox+0x236>
     d0e:	8f 5f       	subi	r24, 0xFF	; 255
     d10:	86 30       	cpi	r24, 0x06	; 6
     d12:	08 f4       	brcc	.+2      	; 0xd16 <gpsReqLocUblox+0x23c>
     d14:	0e c1       	rjmp	.+540    	; 0xf32 <gpsReqLocUblox+0x458>
     d16:	8f 89       	ldd	r24, Y+23	; 0x17
     d18:	91 e0       	ldi	r25, 0x01	; 1
     d1a:	2e 89       	ldd	r18, Y+22	; 0x16
     d1c:	28 13       	cpse	r18, r24
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	2d 89       	ldd	r18, Y+21	; 0x15
     d22:	82 13       	cpse	r24, r18
     d24:	01 c0       	rjmp	.+2      	; 0xd28 <gpsReqLocUblox+0x24e>
     d26:	9f 5f       	subi	r25, 0xFF	; 255
     d28:	2c 89       	ldd	r18, Y+20	; 0x14
     d2a:	82 13       	cpse	r24, r18
     d2c:	01 c0       	rjmp	.+2      	; 0xd30 <gpsReqLocUblox+0x256>
     d2e:	9f 5f       	subi	r25, 0xFF	; 255
     d30:	2b 89       	ldd	r18, Y+19	; 0x13
     d32:	82 13       	cpse	r24, r18
     d34:	01 c0       	rjmp	.+2      	; 0xd38 <gpsReqLocUblox+0x25e>
     d36:	9f 5f       	subi	r25, 0xFF	; 255
     d38:	2a 89       	ldd	r18, Y+18	; 0x12
     d3a:	82 13       	cpse	r24, r18
     d3c:	01 c0       	rjmp	.+2      	; 0xd40 <gpsReqLocUblox+0x266>
     d3e:	9f 5f       	subi	r25, 0xFF	; 255
     d40:	29 89       	ldd	r18, Y+17	; 0x11
     d42:	82 13       	cpse	r24, r18
     d44:	01 c0       	rjmp	.+2      	; 0xd48 <gpsReqLocUblox+0x26e>
     d46:	9f 5f       	subi	r25, 0xFF	; 255
     d48:	28 89       	ldd	r18, Y+16	; 0x10
     d4a:	82 13       	cpse	r24, r18
     d4c:	01 c0       	rjmp	.+2      	; 0xd50 <gpsReqLocUblox+0x276>
     d4e:	9f 5f       	subi	r25, 0xFF	; 255
     d50:	96 30       	cpi	r25, 0x06	; 6
     d52:	08 f4       	brcc	.+2      	; 0xd56 <gpsReqLocUblox+0x27c>
     d54:	f1 c0       	rjmp	.+482    	; 0xf38 <gpsReqLocUblox+0x45e>
     d56:	ef a4       	ldd	r14, Y+47	; 0x2f
     d58:	91 e0       	ldi	r25, 0x01	; 1
     d5a:	2e a5       	ldd	r18, Y+46	; 0x2e
     d5c:	2e 11       	cpse	r18, r14
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	2d a5       	ldd	r18, Y+45	; 0x2d
     d62:	e2 12       	cpse	r14, r18
     d64:	01 c0       	rjmp	.+2      	; 0xd68 <gpsReqLocUblox+0x28e>
     d66:	9f 5f       	subi	r25, 0xFF	; 255
     d68:	2c a5       	ldd	r18, Y+44	; 0x2c
     d6a:	e2 12       	cpse	r14, r18
     d6c:	01 c0       	rjmp	.+2      	; 0xd70 <gpsReqLocUblox+0x296>
     d6e:	9f 5f       	subi	r25, 0xFF	; 255
     d70:	2b a5       	ldd	r18, Y+43	; 0x2b
     d72:	e2 12       	cpse	r14, r18
     d74:	01 c0       	rjmp	.+2      	; 0xd78 <gpsReqLocUblox+0x29e>
     d76:	9f 5f       	subi	r25, 0xFF	; 255
     d78:	2a a5       	ldd	r18, Y+42	; 0x2a
     d7a:	e2 12       	cpse	r14, r18
     d7c:	01 c0       	rjmp	.+2      	; 0xd80 <gpsReqLocUblox+0x2a6>
     d7e:	9f 5f       	subi	r25, 0xFF	; 255
     d80:	29 a5       	ldd	r18, Y+41	; 0x29
     d82:	e2 12       	cpse	r14, r18
     d84:	01 c0       	rjmp	.+2      	; 0xd88 <gpsReqLocUblox+0x2ae>
     d86:	9f 5f       	subi	r25, 0xFF	; 255
     d88:	28 a5       	ldd	r18, Y+40	; 0x28
     d8a:	e2 12       	cpse	r14, r18
     d8c:	01 c0       	rjmp	.+2      	; 0xd90 <gpsReqLocUblox+0x2b6>
     d8e:	9f 5f       	subi	r25, 0xFF	; 255
     d90:	96 30       	cpi	r25, 0x06	; 6
     d92:	08 f4       	brcc	.+2      	; 0xd96 <gpsReqLocUblox+0x2bc>
     d94:	d4 c0       	rjmp	.+424    	; 0xf3e <gpsReqLocUblox+0x464>
     d96:	ff a0       	ldd	r15, Y+39	; 0x27
     d98:	91 e0       	ldi	r25, 0x01	; 1
     d9a:	2e a1       	ldd	r18, Y+38	; 0x26
     d9c:	2f 11       	cpse	r18, r15
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	2d a1       	ldd	r18, Y+37	; 0x25
     da2:	f2 12       	cpse	r15, r18
     da4:	01 c0       	rjmp	.+2      	; 0xda8 <gpsReqLocUblox+0x2ce>
     da6:	9f 5f       	subi	r25, 0xFF	; 255
     da8:	2c a1       	ldd	r18, Y+36	; 0x24
     daa:	f2 12       	cpse	r15, r18
     dac:	01 c0       	rjmp	.+2      	; 0xdb0 <gpsReqLocUblox+0x2d6>
     dae:	9f 5f       	subi	r25, 0xFF	; 255
     db0:	2b a1       	ldd	r18, Y+35	; 0x23
     db2:	f2 12       	cpse	r15, r18
     db4:	01 c0       	rjmp	.+2      	; 0xdb8 <gpsReqLocUblox+0x2de>
     db6:	9f 5f       	subi	r25, 0xFF	; 255
     db8:	2a a1       	ldd	r18, Y+34	; 0x22
     dba:	f2 12       	cpse	r15, r18
     dbc:	01 c0       	rjmp	.+2      	; 0xdc0 <gpsReqLocUblox+0x2e6>
     dbe:	9f 5f       	subi	r25, 0xFF	; 255
     dc0:	29 a1       	ldd	r18, Y+33	; 0x21
     dc2:	f2 12       	cpse	r15, r18
     dc4:	01 c0       	rjmp	.+2      	; 0xdc8 <gpsReqLocUblox+0x2ee>
     dc6:	9f 5f       	subi	r25, 0xFF	; 255
     dc8:	28 a1       	ldd	r18, Y+32	; 0x20
     dca:	f2 12       	cpse	r15, r18
     dcc:	01 c0       	rjmp	.+2      	; 0xdd0 <gpsReqLocUblox+0x2f6>
     dce:	9f 5f       	subi	r25, 0xFF	; 255
     dd0:	96 30       	cpi	r25, 0x06	; 6
     dd2:	08 f4       	brcc	.+2      	; 0xdd6 <gpsReqLocUblox+0x2fc>
     dd4:	b7 c0       	rjmp	.+366    	; 0xf44 <gpsReqLocUblox+0x46a>
     dd6:	ec e2       	ldi	r30, 0x2C	; 44
     dd8:	fe 16       	cp	r15, r30
     dda:	09 f4       	brne	.+2      	; 0xdde <gpsReqLocUblox+0x304>
     ddc:	b6 c0       	rjmp	.+364    	; 0xf4a <gpsReqLocUblox+0x470>
     dde:	0e 94 d5 00 	call	0x1aa	; 0x1aa <asciiToHex>
     de2:	0f 2e       	mov	r0, r31
     de4:	fe ed       	ldi	r31, 0xDE	; 222
     de6:	cf 2e       	mov	r12, r31
     de8:	f8 e3       	ldi	r31, 0x38	; 56
     dea:	df 2e       	mov	r13, r31
     dec:	f0 2d       	mov	r31, r0
     dee:	d6 01       	movw	r26, r12
     df0:	1c 96       	adiw	r26, 0x0c	; 12
     df2:	8c 93       	st	X, r24
     df4:	6f 2d       	mov	r22, r15
     df6:	8e 2d       	mov	r24, r14
     df8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <asciiToHex>
     dfc:	f6 01       	movw	r30, r12
     dfe:	85 87       	std	Z+13, r24	; 0x0d
     e00:	e0 90 05 39 	lds	r14, 0x3905	; 0x803905 <GPSSearchPtr>
     e04:	f0 90 06 39 	lds	r15, 0x3906	; 0x803906 <GPSSearchPtr+0x1>
     e08:	d7 01       	movw	r26, r14
     e0a:	14 97       	sbiw	r26, 0x04	; 4
     e0c:	f7 01       	movw	r30, r14
     e0e:	35 97       	sbiw	r30, 0x05	; 5
     e10:	6c 91       	ld	r22, X
     e12:	80 81       	ld	r24, Z
     e14:	0e 94 d5 00 	call	0x1aa	; 0x1aa <asciiToHex>
     e18:	d6 01       	movw	r26, r12
     e1a:	1e 96       	adiw	r26, 0x0e	; 14
     e1c:	8c 93       	st	X, r24
     e1e:	f7 01       	movw	r30, r14
     e20:	60 a1       	ldd	r22, Z+32	; 0x20
     e22:	87 8d       	ldd	r24, Z+31	; 0x1f
     e24:	0e 94 d5 00 	call	0x1aa	; 0x1aa <asciiToHex>
     e28:	d6 01       	movw	r26, r12
     e2a:	50 96       	adiw	r26, 0x10	; 16
     e2c:	8c 93       	st	X, r24
     e2e:	f7 01       	movw	r30, r14
     e30:	84 85       	ldd	r24, Z+12	; 0x0c
     e32:	8e 34       	cpi	r24, 0x4E	; 78
     e34:	21 f4       	brne	.+8      	; 0xe3e <gpsReqLocUblox+0x364>
     e36:	80 e8       	ldi	r24, 0x80	; 128
     e38:	80 93 de 38 	sts	0x38DE, r24	; 0x8038de <gpsParams>
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <gpsReqLocUblox+0x368>
     e3e:	10 92 de 38 	sts	0x38DE, r1	; 0x8038de <gpsParams>
     e42:	d7 01       	movw	r26, r14
     e44:	12 96       	adiw	r26, 0x02	; 2
     e46:	6c 91       	ld	r22, X
     e48:	12 97       	sbiw	r26, 0x02	; 2
     e4a:	11 96       	adiw	r26, 0x01	; 1
     e4c:	8c 91       	ld	r24, X
     e4e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <asciiToHex>
     e52:	0f 2e       	mov	r0, r31
     e54:	fe ed       	ldi	r31, 0xDE	; 222
     e56:	cf 2e       	mov	r12, r31
     e58:	f8 e3       	ldi	r31, 0x38	; 56
     e5a:	df 2e       	mov	r13, r31
     e5c:	f0 2d       	mov	r31, r0
     e5e:	f6 01       	movw	r30, r12
     e60:	90 81       	ld	r25, Z
     e62:	89 0f       	add	r24, r25
     e64:	80 83       	st	Z, r24
     e66:	d7 01       	movw	r26, r14
     e68:	14 96       	adiw	r26, 0x04	; 4
     e6a:	6c 91       	ld	r22, X
     e6c:	14 97       	sbiw	r26, 0x04	; 4
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	8c 91       	ld	r24, X
     e72:	0e 94 d5 00 	call	0x1aa	; 0x1aa <asciiToHex>
     e76:	f6 01       	movw	r30, r12
     e78:	81 83       	std	Z+1, r24	; 0x01
     e7a:	d7 01       	movw	r26, r14
     e7c:	17 96       	adiw	r26, 0x07	; 7
     e7e:	6c 91       	ld	r22, X
     e80:	17 97       	sbiw	r26, 0x07	; 7
     e82:	16 96       	adiw	r26, 0x06	; 6
     e84:	8c 91       	ld	r24, X
     e86:	0e 94 d5 00 	call	0x1aa	; 0x1aa <asciiToHex>
     e8a:	f6 01       	movw	r30, r12
     e8c:	82 83       	std	Z+2, r24	; 0x02
     e8e:	d7 01       	movw	r26, r14
     e90:	19 96       	adiw	r26, 0x09	; 9
     e92:	6c 91       	ld	r22, X
     e94:	19 97       	sbiw	r26, 0x09	; 9
     e96:	18 96       	adiw	r26, 0x08	; 8
     e98:	8c 91       	ld	r24, X
     e9a:	0e 94 d5 00 	call	0x1aa	; 0x1aa <asciiToHex>
     e9e:	f6 01       	movw	r30, r12
     ea0:	83 83       	std	Z+3, r24	; 0x03
     ea2:	d7 01       	movw	r26, r14
     ea4:	5a 96       	adiw	r26, 0x1a	; 26
     ea6:	8c 91       	ld	r24, X
     ea8:	85 34       	cpi	r24, 0x45	; 69
     eaa:	21 f4       	brne	.+8      	; 0xeb4 <gpsReqLocUblox+0x3da>
     eac:	8d e2       	ldi	r24, 0x2D	; 45
     eae:	80 93 e2 38 	sts	0x38E2, r24	; 0x8038e2 <gpsParams+0x4>
     eb2:	03 c0       	rjmp	.+6      	; 0xeba <gpsReqLocUblox+0x3e0>
     eb4:	8b e2       	ldi	r24, 0x2B	; 43
     eb6:	80 93 e2 38 	sts	0x38E2, r24	; 0x8038e2 <gpsParams+0x4>
     eba:	f7 01       	movw	r30, r14
     ebc:	86 85       	ldd	r24, Z+14	; 0x0e
     ebe:	81 33       	cpi	r24, 0x31	; 49
     ec0:	19 f4       	brne	.+6      	; 0xec8 <gpsReqLocUblox+0x3ee>
     ec2:	84 e6       	ldi	r24, 0x64	; 100
     ec4:	80 93 e3 38 	sts	0x38E3, r24	; 0x8038e3 <gpsParams+0x5>
     ec8:	d7 01       	movw	r26, r14
     eca:	50 96       	adiw	r26, 0x10	; 16
     ecc:	6c 91       	ld	r22, X
     ece:	50 97       	sbiw	r26, 0x10	; 16
     ed0:	1f 96       	adiw	r26, 0x0f	; 15
     ed2:	8c 91       	ld	r24, X
     ed4:	0e 94 d5 00 	call	0x1aa	; 0x1aa <asciiToHex>
     ed8:	0f 2e       	mov	r0, r31
     eda:	fe ed       	ldi	r31, 0xDE	; 222
     edc:	cf 2e       	mov	r12, r31
     ede:	f8 e3       	ldi	r31, 0x38	; 56
     ee0:	df 2e       	mov	r13, r31
     ee2:	f0 2d       	mov	r31, r0
     ee4:	f6 01       	movw	r30, r12
     ee6:	95 81       	ldd	r25, Z+5	; 0x05
     ee8:	89 0f       	add	r24, r25
     eea:	85 83       	std	Z+5, r24	; 0x05
     eec:	d7 01       	movw	r26, r14
     eee:	52 96       	adiw	r26, 0x12	; 18
     ef0:	6c 91       	ld	r22, X
     ef2:	52 97       	sbiw	r26, 0x12	; 18
     ef4:	51 96       	adiw	r26, 0x11	; 17
     ef6:	8c 91       	ld	r24, X
     ef8:	0e 94 d5 00 	call	0x1aa	; 0x1aa <asciiToHex>
     efc:	f6 01       	movw	r30, r12
     efe:	86 83       	std	Z+6, r24	; 0x06
     f00:	d7 01       	movw	r26, r14
     f02:	55 96       	adiw	r26, 0x15	; 21
     f04:	6c 91       	ld	r22, X
     f06:	55 97       	sbiw	r26, 0x15	; 21
     f08:	54 96       	adiw	r26, 0x14	; 20
     f0a:	8c 91       	ld	r24, X
     f0c:	0e 94 d5 00 	call	0x1aa	; 0x1aa <asciiToHex>
     f10:	f6 01       	movw	r30, r12
     f12:	87 83       	std	Z+7, r24	; 0x07
     f14:	d7 01       	movw	r26, r14
     f16:	57 96       	adiw	r26, 0x17	; 23
     f18:	6c 91       	ld	r22, X
     f1a:	57 97       	sbiw	r26, 0x17	; 23
     f1c:	56 96       	adiw	r26, 0x16	; 22
     f1e:	8c 91       	ld	r24, X
     f20:	0e 94 d5 00 	call	0x1aa	; 0x1aa <asciiToHex>
     f24:	f6 01       	movw	r30, r12
     f26:	80 87       	std	Z+8, r24	; 0x08
     f28:	91 8a       	std	Z+17, r9	; 0x11
     f2a:	02 8b       	std	Z+18, r16	; 0x12
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	16 c0       	rjmp	.+44     	; 0xf5e <gpsReqLocUblox+0x484>
     f32:	8a e9       	ldi	r24, 0x9A	; 154
     f34:	92 e0       	ldi	r25, 0x02	; 2
     f36:	13 c0       	rjmp	.+38     	; 0xf5e <gpsReqLocUblox+0x484>
     f38:	8a e9       	ldi	r24, 0x9A	; 154
     f3a:	92 e0       	ldi	r25, 0x02	; 2
     f3c:	10 c0       	rjmp	.+32     	; 0xf5e <gpsReqLocUblox+0x484>
     f3e:	8a e9       	ldi	r24, 0x9A	; 154
     f40:	92 e0       	ldi	r25, 0x02	; 2
     f42:	0d c0       	rjmp	.+26     	; 0xf5e <gpsReqLocUblox+0x484>
     f44:	8a e9       	ldi	r24, 0x9A	; 154
     f46:	92 e0       	ldi	r25, 0x02	; 2
     f48:	0a c0       	rjmp	.+20     	; 0xf5e <gpsReqLocUblox+0x484>
     f4a:	8a e9       	ldi	r24, 0x9A	; 154
     f4c:	92 e0       	ldi	r25, 0x02	; 2
     f4e:	07 c0       	rjmp	.+14     	; 0xf5e <gpsReqLocUblox+0x484>
     f50:	64 e6       	ldi	r22, 0x64	; 100
     f52:	70 e0       	ldi	r23, 0x00	; 0
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	0e 94 92 01 	call	0x324	; 0x324 <delay_ms>
     f5c:	0f ce       	rjmp	.-994    	; 0xb7c <gpsReqLocUblox+0xa2>
     f5e:	af 96       	adiw	r28, 0x2f	; 47
     f60:	cd bf       	out	0x3d, r28	; 61
     f62:	de bf       	out	0x3e, r29	; 62
     f64:	df 91       	pop	r29
     f66:	cf 91       	pop	r28
     f68:	1f 91       	pop	r17
     f6a:	0f 91       	pop	r16
     f6c:	ff 90       	pop	r15
     f6e:	ef 90       	pop	r14
     f70:	df 90       	pop	r13
     f72:	cf 90       	pop	r12
     f74:	bf 90       	pop	r11
     f76:	af 90       	pop	r10
     f78:	9f 90       	pop	r9
     f7a:	8f 90       	pop	r8
     f7c:	08 95       	ret

00000f7e <GPSgetTime>:
     f7e:	0e 94 6d 05 	call	0xada	; 0xada <gpsReqLocUblox>
     f82:	00 97       	sbiw	r24, 0x00	; 0
     f84:	61 f4       	brne	.+24     	; 0xf9e <GPSgetTime+0x20>
     f86:	e0 91 05 39 	lds	r30, 0x3905	; 0x803905 <GPSSearchPtr>
     f8a:	f0 91 06 39 	lds	r31, 0x3906	; 0x803906 <GPSSearchPtr+0x1>
     f8e:	23 a5       	ldd	r18, Z+43	; 0x2b
     f90:	28 35       	cpi	r18, 0x58	; 88
     f92:	29 f0       	breq	.+10     	; 0xf9e <GPSgetTime+0x20>
     f94:	20 91 ee 38 	lds	r18, 0x38EE	; 0x8038ee <gpsParams+0x10>
     f98:	24 30       	cpi	r18, 0x04	; 4
     f9a:	08 f0       	brcs	.+2      	; 0xf9e <GPSgetTime+0x20>
     f9c:	45 c0       	rjmp	.+138    	; 0x1028 <GPSgetTime+0xaa>
     f9e:	0e 94 6d 05 	call	0xada	; 0xada <gpsReqLocUblox>
     fa2:	00 97       	sbiw	r24, 0x00	; 0
     fa4:	59 f4       	brne	.+22     	; 0xfbc <GPSgetTime+0x3e>
     fa6:	e0 91 05 39 	lds	r30, 0x3905	; 0x803905 <GPSSearchPtr>
     faa:	f0 91 06 39 	lds	r31, 0x3906	; 0x803906 <GPSSearchPtr+0x1>
     fae:	23 a5       	ldd	r18, Z+43	; 0x2b
     fb0:	28 35       	cpi	r18, 0x58	; 88
     fb2:	21 f0       	breq	.+8      	; 0xfbc <GPSgetTime+0x3e>
     fb4:	20 91 ee 38 	lds	r18, 0x38EE	; 0x8038ee <gpsParams+0x10>
     fb8:	24 30       	cpi	r18, 0x04	; 4
     fba:	b0 f5       	brcc	.+108    	; 0x1028 <GPSgetTime+0xaa>
     fbc:	0e 94 6d 05 	call	0xada	; 0xada <gpsReqLocUblox>
     fc0:	00 97       	sbiw	r24, 0x00	; 0
     fc2:	59 f4       	brne	.+22     	; 0xfda <GPSgetTime+0x5c>
     fc4:	e0 91 05 39 	lds	r30, 0x3905	; 0x803905 <GPSSearchPtr>
     fc8:	f0 91 06 39 	lds	r31, 0x3906	; 0x803906 <GPSSearchPtr+0x1>
     fcc:	23 a5       	ldd	r18, Z+43	; 0x2b
     fce:	28 35       	cpi	r18, 0x58	; 88
     fd0:	21 f0       	breq	.+8      	; 0xfda <GPSgetTime+0x5c>
     fd2:	20 91 ee 38 	lds	r18, 0x38EE	; 0x8038ee <gpsParams+0x10>
     fd6:	24 30       	cpi	r18, 0x04	; 4
     fd8:	38 f5       	brcc	.+78     	; 0x1028 <GPSgetTime+0xaa>
     fda:	0e 94 6d 05 	call	0xada	; 0xada <gpsReqLocUblox>
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	59 f4       	brne	.+22     	; 0xff8 <GPSgetTime+0x7a>
     fe2:	e0 91 05 39 	lds	r30, 0x3905	; 0x803905 <GPSSearchPtr>
     fe6:	f0 91 06 39 	lds	r31, 0x3906	; 0x803906 <GPSSearchPtr+0x1>
     fea:	23 a5       	ldd	r18, Z+43	; 0x2b
     fec:	28 35       	cpi	r18, 0x58	; 88
     fee:	21 f0       	breq	.+8      	; 0xff8 <GPSgetTime+0x7a>
     ff0:	20 91 ee 38 	lds	r18, 0x38EE	; 0x8038ee <gpsParams+0x10>
     ff4:	24 30       	cpi	r18, 0x04	; 4
     ff6:	c0 f4       	brcc	.+48     	; 0x1028 <GPSgetTime+0xaa>
     ff8:	0e 94 6d 05 	call	0xada	; 0xada <gpsReqLocUblox>
     ffc:	00 97       	sbiw	r24, 0x00	; 0
     ffe:	61 f4       	brne	.+24     	; 0x1018 <GPSgetTime+0x9a>
    1000:	e0 91 05 39 	lds	r30, 0x3905	; 0x803905 <GPSSearchPtr>
    1004:	f0 91 06 39 	lds	r31, 0x3906	; 0x803906 <GPSSearchPtr+0x1>
    1008:	23 a5       	ldd	r18, Z+43	; 0x2b
    100a:	28 35       	cpi	r18, 0x58	; 88
    100c:	41 f0       	breq	.+16     	; 0x101e <GPSgetTime+0xa0>
    100e:	20 91 ee 38 	lds	r18, 0x38EE	; 0x8038ee <gpsParams+0x10>
    1012:	24 30       	cpi	r18, 0x04	; 4
    1014:	38 f0       	brcs	.+14     	; 0x1024 <GPSgetTime+0xa6>
    1016:	08 95       	ret
    1018:	8a e9       	ldi	r24, 0x9A	; 154
    101a:	92 e0       	ldi	r25, 0x02	; 2
    101c:	08 95       	ret
    101e:	8a e9       	ldi	r24, 0x9A	; 154
    1020:	92 e0       	ldi	r25, 0x02	; 2
    1022:	08 95       	ret
    1024:	8a e9       	ldi	r24, 0x9A	; 154
    1026:	92 e0       	ldi	r25, 0x02	; 2
    1028:	08 95       	ret

0000102a <calcCRC>:
    102a:	0f 93       	push	r16
    102c:	1f 93       	push	r17
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	66 23       	and	r22, r22
    1034:	c1 f1       	breq	.+112    	; 0x10a6 <calcCRC+0x7c>
    1036:	ec 01       	movw	r28, r24
    1038:	8c 01       	movw	r16, r24
    103a:	06 0f       	add	r16, r22
    103c:	11 1d       	adc	r17, r1
    103e:	8f ef       	ldi	r24, 0xFF	; 255
    1040:	9f ef       	ldi	r25, 0xFF	; 255
    1042:	1b c0       	rjmp	.+54     	; 0x107a <calcCRC+0x50>
    1044:	bc 01       	movw	r22, r24
    1046:	66 0f       	add	r22, r22
    1048:	77 1f       	adc	r23, r23
    104a:	fd 01       	movw	r30, r26
    104c:	e4 23       	and	r30, r20
    104e:	f5 23       	and	r31, r21
    1050:	ef 2b       	or	r30, r31
    1052:	11 f0       	breq	.+4      	; 0x1058 <calcCRC+0x2e>
    1054:	6f 5f       	subi	r22, 0xFF	; 255
    1056:	7f 4f       	sbci	r23, 0xFF	; 255
    1058:	56 95       	lsr	r21
    105a:	47 95       	ror	r20
    105c:	99 23       	and	r25, r25
    105e:	34 f4       	brge	.+12     	; 0x106c <calcCRC+0x42>
    1060:	cb 01       	movw	r24, r22
    1062:	e1 e2       	ldi	r30, 0x21	; 33
    1064:	8e 27       	eor	r24, r30
    1066:	e0 e1       	ldi	r30, 0x10	; 16
    1068:	9e 27       	eor	r25, r30
    106a:	01 c0       	rjmp	.+2      	; 0x106e <calcCRC+0x44>
    106c:	cb 01       	movw	r24, r22
    106e:	21 50       	subi	r18, 0x01	; 1
    1070:	31 09       	sbc	r19, r1
    1072:	41 f7       	brne	.-48     	; 0x1044 <calcCRC+0x1a>
    1074:	0c 17       	cp	r16, r28
    1076:	1d 07       	cpc	r17, r29
    1078:	c1 f0       	breq	.+48     	; 0x10aa <calcCRC+0x80>
    107a:	a9 91       	ld	r26, Y+
    107c:	b0 e0       	ldi	r27, 0x00	; 0
    107e:	28 e0       	ldi	r18, 0x08	; 8
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	40 e8       	ldi	r20, 0x80	; 128
    1084:	50 e0       	ldi	r21, 0x00	; 0
    1086:	de cf       	rjmp	.-68     	; 0x1044 <calcCRC+0x1a>
    1088:	99 23       	and	r25, r25
    108a:	3c f4       	brge	.+14     	; 0x109a <calcCRC+0x70>
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	41 e2       	ldi	r20, 0x21	; 33
    1092:	84 27       	eor	r24, r20
    1094:	40 e1       	ldi	r20, 0x10	; 16
    1096:	94 27       	eor	r25, r20
    1098:	02 c0       	rjmp	.+4      	; 0x109e <calcCRC+0x74>
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	21 50       	subi	r18, 0x01	; 1
    10a0:	31 09       	sbc	r19, r1
    10a2:	91 f7       	brne	.-28     	; 0x1088 <calcCRC+0x5e>
    10a4:	05 c0       	rjmp	.+10     	; 0x10b0 <calcCRC+0x86>
    10a6:	8f ef       	ldi	r24, 0xFF	; 255
    10a8:	9f ef       	ldi	r25, 0xFF	; 255
    10aa:	20 e1       	ldi	r18, 0x10	; 16
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	ec cf       	rjmp	.-40     	; 0x1088 <calcCRC+0x5e>
    10b0:	df 91       	pop	r29
    10b2:	cf 91       	pop	r28
    10b4:	1f 91       	pop	r17
    10b6:	0f 91       	pop	r16
    10b8:	08 95       	ret

000010ba <getByteFromBig>:
    10ba:	f8 94       	cli
    10bc:	20 98       	cbi	0x04, 0	; 4
    10be:	e0 e3       	ldi	r30, 0x30	; 48
    10c0:	f4 e0       	ldi	r31, 0x04	; 4
    10c2:	80 81       	ld	r24, Z
    10c4:	87 7f       	andi	r24, 0xF7	; 247
    10c6:	80 83       	st	Z, r24
    10c8:	43 98       	cbi	0x08, 3	; 8
    10ca:	e3 e5       	ldi	r30, 0x53	; 83
    10cc:	f4 e0       	ldi	r31, 0x04	; 4
    10ce:	80 81       	ld	r24, Z
    10d0:	87 7f       	andi	r24, 0xF7	; 247
    10d2:	80 83       	st	Z, r24
    10d4:	53 9b       	sbis	0x0a, 3	; 10
    10d6:	06 c0       	rjmp	.+12     	; 0x10e4 <getByteFromBig+0x2a>
    10d8:	87 e8       	ldi	r24, 0x87	; 135
    10da:	93 e1       	ldi	r25, 0x13	; 19
    10dc:	53 9b       	sbis	0x0a, 3	; 10
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <getByteFromBig+0x2a>
    10e0:	01 97       	sbiw	r24, 0x01	; 1
    10e2:	e1 f7       	brne	.-8      	; 0x10dc <getByteFromBig+0x22>
    10e4:	30 9b       	sbis	0x06, 0	; 6
    10e6:	02 c0       	rjmp	.+4      	; 0x10ec <getByteFromBig+0x32>
    10e8:	80 e8       	ldi	r24, 0x80	; 128
    10ea:	01 c0       	rjmp	.+2      	; 0x10ee <getByteFromBig+0x34>
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	53 99       	sbic	0x0a, 3	; 10
    10f0:	68 c0       	rjmp	.+208    	; 0x11c2 <getByteFromBig+0x108>
    10f2:	99 ef       	ldi	r25, 0xF9	; 249
    10f4:	53 99       	sbic	0x0a, 3	; 10
    10f6:	65 c0       	rjmp	.+202    	; 0x11c2 <getByteFromBig+0x108>
    10f8:	91 50       	subi	r25, 0x01	; 1
    10fa:	e1 f7       	brne	.-8      	; 0x10f4 <getByteFromBig+0x3a>
    10fc:	62 c0       	rjmp	.+196    	; 0x11c2 <getByteFromBig+0x108>
    10fe:	53 9b       	sbis	0x0a, 3	; 10
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <getByteFromBig+0x4c>
    1102:	91 50       	subi	r25, 0x01	; 1
    1104:	e1 f7       	brne	.-8      	; 0x10fe <getByteFromBig+0x44>
    1106:	30 99       	sbic	0x06, 0	; 6
    1108:	80 64       	ori	r24, 0x40	; 64
    110a:	53 99       	sbic	0x0a, 3	; 10
    110c:	5e c0       	rjmp	.+188    	; 0x11ca <getByteFromBig+0x110>
    110e:	99 ef       	ldi	r25, 0xF9	; 249
    1110:	53 99       	sbic	0x0a, 3	; 10
    1112:	5b c0       	rjmp	.+182    	; 0x11ca <getByteFromBig+0x110>
    1114:	91 50       	subi	r25, 0x01	; 1
    1116:	e1 f7       	brne	.-8      	; 0x1110 <getByteFromBig+0x56>
    1118:	58 c0       	rjmp	.+176    	; 0x11ca <getByteFromBig+0x110>
    111a:	53 9b       	sbis	0x0a, 3	; 10
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <getByteFromBig+0x68>
    111e:	91 50       	subi	r25, 0x01	; 1
    1120:	e1 f7       	brne	.-8      	; 0x111a <getByteFromBig+0x60>
    1122:	30 99       	sbic	0x06, 0	; 6
    1124:	80 62       	ori	r24, 0x20	; 32
    1126:	53 99       	sbic	0x0a, 3	; 10
    1128:	54 c0       	rjmp	.+168    	; 0x11d2 <getByteFromBig+0x118>
    112a:	99 ef       	ldi	r25, 0xF9	; 249
    112c:	53 99       	sbic	0x0a, 3	; 10
    112e:	51 c0       	rjmp	.+162    	; 0x11d2 <getByteFromBig+0x118>
    1130:	91 50       	subi	r25, 0x01	; 1
    1132:	e1 f7       	brne	.-8      	; 0x112c <getByteFromBig+0x72>
    1134:	4e c0       	rjmp	.+156    	; 0x11d2 <getByteFromBig+0x118>
    1136:	53 9b       	sbis	0x0a, 3	; 10
    1138:	02 c0       	rjmp	.+4      	; 0x113e <getByteFromBig+0x84>
    113a:	91 50       	subi	r25, 0x01	; 1
    113c:	e1 f7       	brne	.-8      	; 0x1136 <getByteFromBig+0x7c>
    113e:	30 99       	sbic	0x06, 0	; 6
    1140:	80 61       	ori	r24, 0x10	; 16
    1142:	53 99       	sbic	0x0a, 3	; 10
    1144:	4a c0       	rjmp	.+148    	; 0x11da <getByteFromBig+0x120>
    1146:	99 ef       	ldi	r25, 0xF9	; 249
    1148:	53 99       	sbic	0x0a, 3	; 10
    114a:	47 c0       	rjmp	.+142    	; 0x11da <getByteFromBig+0x120>
    114c:	91 50       	subi	r25, 0x01	; 1
    114e:	e1 f7       	brne	.-8      	; 0x1148 <getByteFromBig+0x8e>
    1150:	44 c0       	rjmp	.+136    	; 0x11da <getByteFromBig+0x120>
    1152:	53 9b       	sbis	0x0a, 3	; 10
    1154:	02 c0       	rjmp	.+4      	; 0x115a <getByteFromBig+0xa0>
    1156:	91 50       	subi	r25, 0x01	; 1
    1158:	e1 f7       	brne	.-8      	; 0x1152 <getByteFromBig+0x98>
    115a:	30 99       	sbic	0x06, 0	; 6
    115c:	88 60       	ori	r24, 0x08	; 8
    115e:	53 99       	sbic	0x0a, 3	; 10
    1160:	40 c0       	rjmp	.+128    	; 0x11e2 <getByteFromBig+0x128>
    1162:	99 ef       	ldi	r25, 0xF9	; 249
    1164:	53 99       	sbic	0x0a, 3	; 10
    1166:	3d c0       	rjmp	.+122    	; 0x11e2 <getByteFromBig+0x128>
    1168:	91 50       	subi	r25, 0x01	; 1
    116a:	e1 f7       	brne	.-8      	; 0x1164 <getByteFromBig+0xaa>
    116c:	3a c0       	rjmp	.+116    	; 0x11e2 <getByteFromBig+0x128>
    116e:	53 9b       	sbis	0x0a, 3	; 10
    1170:	02 c0       	rjmp	.+4      	; 0x1176 <getByteFromBig+0xbc>
    1172:	91 50       	subi	r25, 0x01	; 1
    1174:	e1 f7       	brne	.-8      	; 0x116e <getByteFromBig+0xb4>
    1176:	30 99       	sbic	0x06, 0	; 6
    1178:	84 60       	ori	r24, 0x04	; 4
    117a:	53 99       	sbic	0x0a, 3	; 10
    117c:	36 c0       	rjmp	.+108    	; 0x11ea <getByteFromBig+0x130>
    117e:	99 ef       	ldi	r25, 0xF9	; 249
    1180:	53 99       	sbic	0x0a, 3	; 10
    1182:	33 c0       	rjmp	.+102    	; 0x11ea <getByteFromBig+0x130>
    1184:	91 50       	subi	r25, 0x01	; 1
    1186:	e1 f7       	brne	.-8      	; 0x1180 <getByteFromBig+0xc6>
    1188:	30 c0       	rjmp	.+96     	; 0x11ea <getByteFromBig+0x130>
    118a:	53 9b       	sbis	0x0a, 3	; 10
    118c:	02 c0       	rjmp	.+4      	; 0x1192 <getByteFromBig+0xd8>
    118e:	91 50       	subi	r25, 0x01	; 1
    1190:	e1 f7       	brne	.-8      	; 0x118a <getByteFromBig+0xd0>
    1192:	30 99       	sbic	0x06, 0	; 6
    1194:	82 60       	ori	r24, 0x02	; 2
    1196:	53 99       	sbic	0x0a, 3	; 10
    1198:	2c c0       	rjmp	.+88     	; 0x11f2 <getByteFromBig+0x138>
    119a:	99 ef       	ldi	r25, 0xF9	; 249
    119c:	53 99       	sbic	0x0a, 3	; 10
    119e:	29 c0       	rjmp	.+82     	; 0x11f2 <getByteFromBig+0x138>
    11a0:	91 50       	subi	r25, 0x01	; 1
    11a2:	e1 f7       	brne	.-8      	; 0x119c <getByteFromBig+0xe2>
    11a4:	26 c0       	rjmp	.+76     	; 0x11f2 <getByteFromBig+0x138>
    11a6:	53 9b       	sbis	0x0a, 3	; 10
    11a8:	02 c0       	rjmp	.+4      	; 0x11ae <getByteFromBig+0xf4>
    11aa:	91 50       	subi	r25, 0x01	; 1
    11ac:	e1 f7       	brne	.-8      	; 0x11a6 <getByteFromBig+0xec>
    11ae:	30 99       	sbic	0x06, 0	; 6
    11b0:	81 60       	ori	r24, 0x01	; 1
    11b2:	53 99       	sbic	0x0a, 3	; 10
    11b4:	22 c0       	rjmp	.+68     	; 0x11fa <getByteFromBig+0x140>
    11b6:	99 ef       	ldi	r25, 0xF9	; 249
    11b8:	53 99       	sbic	0x0a, 3	; 10
    11ba:	1f c0       	rjmp	.+62     	; 0x11fa <getByteFromBig+0x140>
    11bc:	91 50       	subi	r25, 0x01	; 1
    11be:	e1 f7       	brne	.-8      	; 0x11b8 <getByteFromBig+0xfe>
    11c0:	08 95       	ret
    11c2:	53 9b       	sbis	0x0a, 3	; 10
    11c4:	a0 cf       	rjmp	.-192    	; 0x1106 <getByteFromBig+0x4c>
    11c6:	99 ef       	ldi	r25, 0xF9	; 249
    11c8:	9a cf       	rjmp	.-204    	; 0x10fe <getByteFromBig+0x44>
    11ca:	53 9b       	sbis	0x0a, 3	; 10
    11cc:	aa cf       	rjmp	.-172    	; 0x1122 <getByteFromBig+0x68>
    11ce:	99 ef       	ldi	r25, 0xF9	; 249
    11d0:	a4 cf       	rjmp	.-184    	; 0x111a <getByteFromBig+0x60>
    11d2:	53 9b       	sbis	0x0a, 3	; 10
    11d4:	b4 cf       	rjmp	.-152    	; 0x113e <getByteFromBig+0x84>
    11d6:	99 ef       	ldi	r25, 0xF9	; 249
    11d8:	ae cf       	rjmp	.-164    	; 0x1136 <getByteFromBig+0x7c>
    11da:	53 9b       	sbis	0x0a, 3	; 10
    11dc:	be cf       	rjmp	.-132    	; 0x115a <getByteFromBig+0xa0>
    11de:	99 ef       	ldi	r25, 0xF9	; 249
    11e0:	b8 cf       	rjmp	.-144    	; 0x1152 <getByteFromBig+0x98>
    11e2:	53 9b       	sbis	0x0a, 3	; 10
    11e4:	c8 cf       	rjmp	.-112    	; 0x1176 <getByteFromBig+0xbc>
    11e6:	99 ef       	ldi	r25, 0xF9	; 249
    11e8:	c2 cf       	rjmp	.-124    	; 0x116e <getByteFromBig+0xb4>
    11ea:	53 9b       	sbis	0x0a, 3	; 10
    11ec:	d2 cf       	rjmp	.-92     	; 0x1192 <getByteFromBig+0xd8>
    11ee:	99 ef       	ldi	r25, 0xF9	; 249
    11f0:	cc cf       	rjmp	.-104    	; 0x118a <getByteFromBig+0xd0>
    11f2:	53 9b       	sbis	0x0a, 3	; 10
    11f4:	dc cf       	rjmp	.-72     	; 0x11ae <getByteFromBig+0xf4>
    11f6:	99 ef       	ldi	r25, 0xF9	; 249
    11f8:	d6 cf       	rjmp	.-84     	; 0x11a6 <getByteFromBig+0xec>
    11fa:	08 95       	ret

000011fc <sendByteToBig>:
    11fc:	20 9a       	sbi	0x04, 0	; 4
    11fe:	88 23       	and	r24, r24
    1200:	14 f0       	brlt	.+4      	; 0x1206 <sendByteToBig+0xa>
    1202:	28 98       	cbi	0x05, 0	; 5
    1204:	93 c0       	rjmp	.+294    	; 0x132c <sendByteToBig+0x130>
    1206:	28 9a       	sbi	0x05, 0	; 5
    1208:	91 c0       	rjmp	.+290    	; 0x132c <sendByteToBig+0x130>
    120a:	29 ef       	ldi	r18, 0xF9	; 249
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	53 9b       	sbis	0x0a, 3	; 10
    1210:	8f c0       	rjmp	.+286    	; 0x1330 <sendByteToBig+0x134>
    1212:	21 50       	subi	r18, 0x01	; 1
    1214:	31 09       	sbc	r19, r1
    1216:	d9 f7       	brne	.-10     	; 0x120e <sendByteToBig+0x12>
    1218:	8b c0       	rjmp	.+278    	; 0x1330 <sendByteToBig+0x134>
    121a:	53 99       	sbic	0x0a, 3	; 10
    121c:	03 c0       	rjmp	.+6      	; 0x1224 <sendByteToBig+0x28>
    121e:	21 50       	subi	r18, 0x01	; 1
    1220:	31 09       	sbc	r19, r1
    1222:	d9 f7       	brne	.-10     	; 0x121a <sendByteToBig+0x1e>
    1224:	86 fd       	sbrc	r24, 6
    1226:	02 c0       	rjmp	.+4      	; 0x122c <sendByteToBig+0x30>
    1228:	28 98       	cbi	0x05, 0	; 5
    122a:	87 c0       	rjmp	.+270    	; 0x133a <sendByteToBig+0x13e>
    122c:	28 9a       	sbi	0x05, 0	; 5
    122e:	85 c0       	rjmp	.+266    	; 0x133a <sendByteToBig+0x13e>
    1230:	29 ef       	ldi	r18, 0xF9	; 249
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	53 9b       	sbis	0x0a, 3	; 10
    1236:	83 c0       	rjmp	.+262    	; 0x133e <sendByteToBig+0x142>
    1238:	21 50       	subi	r18, 0x01	; 1
    123a:	31 09       	sbc	r19, r1
    123c:	d9 f7       	brne	.-10     	; 0x1234 <sendByteToBig+0x38>
    123e:	7f c0       	rjmp	.+254    	; 0x133e <sendByteToBig+0x142>
    1240:	53 99       	sbic	0x0a, 3	; 10
    1242:	03 c0       	rjmp	.+6      	; 0x124a <sendByteToBig+0x4e>
    1244:	21 50       	subi	r18, 0x01	; 1
    1246:	31 09       	sbc	r19, r1
    1248:	d9 f7       	brne	.-10     	; 0x1240 <sendByteToBig+0x44>
    124a:	85 fd       	sbrc	r24, 5
    124c:	02 c0       	rjmp	.+4      	; 0x1252 <sendByteToBig+0x56>
    124e:	28 98       	cbi	0x05, 0	; 5
    1250:	7b c0       	rjmp	.+246    	; 0x1348 <sendByteToBig+0x14c>
    1252:	28 9a       	sbi	0x05, 0	; 5
    1254:	79 c0       	rjmp	.+242    	; 0x1348 <sendByteToBig+0x14c>
    1256:	29 ef       	ldi	r18, 0xF9	; 249
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	53 9b       	sbis	0x0a, 3	; 10
    125c:	77 c0       	rjmp	.+238    	; 0x134c <sendByteToBig+0x150>
    125e:	21 50       	subi	r18, 0x01	; 1
    1260:	31 09       	sbc	r19, r1
    1262:	d9 f7       	brne	.-10     	; 0x125a <sendByteToBig+0x5e>
    1264:	73 c0       	rjmp	.+230    	; 0x134c <sendByteToBig+0x150>
    1266:	53 99       	sbic	0x0a, 3	; 10
    1268:	03 c0       	rjmp	.+6      	; 0x1270 <sendByteToBig+0x74>
    126a:	21 50       	subi	r18, 0x01	; 1
    126c:	31 09       	sbc	r19, r1
    126e:	d9 f7       	brne	.-10     	; 0x1266 <sendByteToBig+0x6a>
    1270:	84 fd       	sbrc	r24, 4
    1272:	02 c0       	rjmp	.+4      	; 0x1278 <sendByteToBig+0x7c>
    1274:	28 98       	cbi	0x05, 0	; 5
    1276:	6f c0       	rjmp	.+222    	; 0x1356 <sendByteToBig+0x15a>
    1278:	28 9a       	sbi	0x05, 0	; 5
    127a:	6d c0       	rjmp	.+218    	; 0x1356 <sendByteToBig+0x15a>
    127c:	29 ef       	ldi	r18, 0xF9	; 249
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	53 9b       	sbis	0x0a, 3	; 10
    1282:	6b c0       	rjmp	.+214    	; 0x135a <sendByteToBig+0x15e>
    1284:	21 50       	subi	r18, 0x01	; 1
    1286:	31 09       	sbc	r19, r1
    1288:	d9 f7       	brne	.-10     	; 0x1280 <sendByteToBig+0x84>
    128a:	67 c0       	rjmp	.+206    	; 0x135a <sendByteToBig+0x15e>
    128c:	53 99       	sbic	0x0a, 3	; 10
    128e:	03 c0       	rjmp	.+6      	; 0x1296 <sendByteToBig+0x9a>
    1290:	21 50       	subi	r18, 0x01	; 1
    1292:	31 09       	sbc	r19, r1
    1294:	d9 f7       	brne	.-10     	; 0x128c <sendByteToBig+0x90>
    1296:	83 fd       	sbrc	r24, 3
    1298:	02 c0       	rjmp	.+4      	; 0x129e <sendByteToBig+0xa2>
    129a:	28 98       	cbi	0x05, 0	; 5
    129c:	63 c0       	rjmp	.+198    	; 0x1364 <sendByteToBig+0x168>
    129e:	28 9a       	sbi	0x05, 0	; 5
    12a0:	61 c0       	rjmp	.+194    	; 0x1364 <sendByteToBig+0x168>
    12a2:	29 ef       	ldi	r18, 0xF9	; 249
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	53 9b       	sbis	0x0a, 3	; 10
    12a8:	5f c0       	rjmp	.+190    	; 0x1368 <sendByteToBig+0x16c>
    12aa:	21 50       	subi	r18, 0x01	; 1
    12ac:	31 09       	sbc	r19, r1
    12ae:	d9 f7       	brne	.-10     	; 0x12a6 <sendByteToBig+0xaa>
    12b0:	5b c0       	rjmp	.+182    	; 0x1368 <sendByteToBig+0x16c>
    12b2:	53 99       	sbic	0x0a, 3	; 10
    12b4:	03 c0       	rjmp	.+6      	; 0x12bc <sendByteToBig+0xc0>
    12b6:	21 50       	subi	r18, 0x01	; 1
    12b8:	31 09       	sbc	r19, r1
    12ba:	d9 f7       	brne	.-10     	; 0x12b2 <sendByteToBig+0xb6>
    12bc:	82 fd       	sbrc	r24, 2
    12be:	02 c0       	rjmp	.+4      	; 0x12c4 <sendByteToBig+0xc8>
    12c0:	28 98       	cbi	0x05, 0	; 5
    12c2:	57 c0       	rjmp	.+174    	; 0x1372 <sendByteToBig+0x176>
    12c4:	28 9a       	sbi	0x05, 0	; 5
    12c6:	55 c0       	rjmp	.+170    	; 0x1372 <sendByteToBig+0x176>
    12c8:	29 ef       	ldi	r18, 0xF9	; 249
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	53 9b       	sbis	0x0a, 3	; 10
    12ce:	53 c0       	rjmp	.+166    	; 0x1376 <sendByteToBig+0x17a>
    12d0:	21 50       	subi	r18, 0x01	; 1
    12d2:	31 09       	sbc	r19, r1
    12d4:	d9 f7       	brne	.-10     	; 0x12cc <sendByteToBig+0xd0>
    12d6:	4f c0       	rjmp	.+158    	; 0x1376 <sendByteToBig+0x17a>
    12d8:	53 99       	sbic	0x0a, 3	; 10
    12da:	03 c0       	rjmp	.+6      	; 0x12e2 <sendByteToBig+0xe6>
    12dc:	21 50       	subi	r18, 0x01	; 1
    12de:	31 09       	sbc	r19, r1
    12e0:	d9 f7       	brne	.-10     	; 0x12d8 <sendByteToBig+0xdc>
    12e2:	81 fd       	sbrc	r24, 1
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <sendByteToBig+0xee>
    12e6:	28 98       	cbi	0x05, 0	; 5
    12e8:	4b c0       	rjmp	.+150    	; 0x1380 <sendByteToBig+0x184>
    12ea:	28 9a       	sbi	0x05, 0	; 5
    12ec:	49 c0       	rjmp	.+146    	; 0x1380 <sendByteToBig+0x184>
    12ee:	29 ef       	ldi	r18, 0xF9	; 249
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	53 9b       	sbis	0x0a, 3	; 10
    12f4:	47 c0       	rjmp	.+142    	; 0x1384 <sendByteToBig+0x188>
    12f6:	21 50       	subi	r18, 0x01	; 1
    12f8:	31 09       	sbc	r19, r1
    12fa:	d9 f7       	brne	.-10     	; 0x12f2 <sendByteToBig+0xf6>
    12fc:	43 c0       	rjmp	.+134    	; 0x1384 <sendByteToBig+0x188>
    12fe:	53 99       	sbic	0x0a, 3	; 10
    1300:	03 c0       	rjmp	.+6      	; 0x1308 <sendByteToBig+0x10c>
    1302:	21 50       	subi	r18, 0x01	; 1
    1304:	31 09       	sbc	r19, r1
    1306:	d9 f7       	brne	.-10     	; 0x12fe <sendByteToBig+0x102>
    1308:	80 fd       	sbrc	r24, 0
    130a:	02 c0       	rjmp	.+4      	; 0x1310 <sendByteToBig+0x114>
    130c:	28 98       	cbi	0x05, 0	; 5
    130e:	3f c0       	rjmp	.+126    	; 0x138e <sendByteToBig+0x192>
    1310:	28 9a       	sbi	0x05, 0	; 5
    1312:	3d c0       	rjmp	.+122    	; 0x138e <sendByteToBig+0x192>
    1314:	89 ef       	ldi	r24, 0xF9	; 249
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	53 9b       	sbis	0x0a, 3	; 10
    131a:	3b c0       	rjmp	.+118    	; 0x1392 <sendByteToBig+0x196>
    131c:	01 97       	sbiw	r24, 0x01	; 1
    131e:	e1 f7       	brne	.-8      	; 0x1318 <sendByteToBig+0x11c>
    1320:	38 c0       	rjmp	.+112    	; 0x1392 <sendByteToBig+0x196>
    1322:	53 99       	sbic	0x0a, 3	; 10
    1324:	3b c0       	rjmp	.+118    	; 0x139c <sendByteToBig+0x1a0>
    1326:	01 97       	sbiw	r24, 0x01	; 1
    1328:	e1 f7       	brne	.-8      	; 0x1322 <sendByteToBig+0x126>
    132a:	08 95       	ret
    132c:	53 99       	sbic	0x0a, 3	; 10
    132e:	6d cf       	rjmp	.-294    	; 0x120a <sendByteToBig+0xe>
    1330:	53 99       	sbic	0x0a, 3	; 10
    1332:	78 cf       	rjmp	.-272    	; 0x1224 <sendByteToBig+0x28>
    1334:	29 ef       	ldi	r18, 0xF9	; 249
    1336:	30 e0       	ldi	r19, 0x00	; 0
    1338:	70 cf       	rjmp	.-288    	; 0x121a <sendByteToBig+0x1e>
    133a:	53 99       	sbic	0x0a, 3	; 10
    133c:	79 cf       	rjmp	.-270    	; 0x1230 <sendByteToBig+0x34>
    133e:	53 99       	sbic	0x0a, 3	; 10
    1340:	84 cf       	rjmp	.-248    	; 0x124a <sendByteToBig+0x4e>
    1342:	29 ef       	ldi	r18, 0xF9	; 249
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	7c cf       	rjmp	.-264    	; 0x1240 <sendByteToBig+0x44>
    1348:	53 99       	sbic	0x0a, 3	; 10
    134a:	85 cf       	rjmp	.-246    	; 0x1256 <sendByteToBig+0x5a>
    134c:	53 99       	sbic	0x0a, 3	; 10
    134e:	90 cf       	rjmp	.-224    	; 0x1270 <sendByteToBig+0x74>
    1350:	29 ef       	ldi	r18, 0xF9	; 249
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	88 cf       	rjmp	.-240    	; 0x1266 <sendByteToBig+0x6a>
    1356:	53 99       	sbic	0x0a, 3	; 10
    1358:	91 cf       	rjmp	.-222    	; 0x127c <sendByteToBig+0x80>
    135a:	53 99       	sbic	0x0a, 3	; 10
    135c:	9c cf       	rjmp	.-200    	; 0x1296 <sendByteToBig+0x9a>
    135e:	29 ef       	ldi	r18, 0xF9	; 249
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	94 cf       	rjmp	.-216    	; 0x128c <sendByteToBig+0x90>
    1364:	53 99       	sbic	0x0a, 3	; 10
    1366:	9d cf       	rjmp	.-198    	; 0x12a2 <sendByteToBig+0xa6>
    1368:	53 99       	sbic	0x0a, 3	; 10
    136a:	a8 cf       	rjmp	.-176    	; 0x12bc <sendByteToBig+0xc0>
    136c:	29 ef       	ldi	r18, 0xF9	; 249
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	a0 cf       	rjmp	.-192    	; 0x12b2 <sendByteToBig+0xb6>
    1372:	53 99       	sbic	0x0a, 3	; 10
    1374:	a9 cf       	rjmp	.-174    	; 0x12c8 <sendByteToBig+0xcc>
    1376:	53 99       	sbic	0x0a, 3	; 10
    1378:	b4 cf       	rjmp	.-152    	; 0x12e2 <sendByteToBig+0xe6>
    137a:	29 ef       	ldi	r18, 0xF9	; 249
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	ac cf       	rjmp	.-168    	; 0x12d8 <sendByteToBig+0xdc>
    1380:	53 99       	sbic	0x0a, 3	; 10
    1382:	b5 cf       	rjmp	.-150    	; 0x12ee <sendByteToBig+0xf2>
    1384:	53 99       	sbic	0x0a, 3	; 10
    1386:	c0 cf       	rjmp	.-128    	; 0x1308 <sendByteToBig+0x10c>
    1388:	29 ef       	ldi	r18, 0xF9	; 249
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	b8 cf       	rjmp	.-144    	; 0x12fe <sendByteToBig+0x102>
    138e:	53 99       	sbic	0x0a, 3	; 10
    1390:	c1 cf       	rjmp	.-126    	; 0x1314 <sendByteToBig+0x118>
    1392:	53 99       	sbic	0x0a, 3	; 10
    1394:	03 c0       	rjmp	.+6      	; 0x139c <sendByteToBig+0x1a0>
    1396:	89 ef       	ldi	r24, 0xF9	; 249
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	c3 cf       	rjmp	.-122    	; 0x1322 <sendByteToBig+0x126>
    139c:	08 95       	ret

0000139e <send25BytesToBig>:
    139e:	0f 93       	push	r16
    13a0:	1f 93       	push	r17
    13a2:	cf 93       	push	r28
    13a4:	df 93       	push	r29
    13a6:	8c 01       	movw	r16, r24
    13a8:	20 9a       	sbi	0x04, 0	; 4
    13aa:	43 98       	cbi	0x08, 3	; 8
    13ac:	67 e1       	ldi	r22, 0x17	; 23
    13ae:	0e 94 15 08 	call	0x102a	; 0x102a <calcCRC>
    13b2:	f8 01       	movw	r30, r16
    13b4:	97 8b       	std	Z+23, r25	; 0x17
    13b6:	80 8f       	std	Z+24, r24	; 0x18
    13b8:	c0 e3       	ldi	r28, 0x30	; 48
    13ba:	d5 e7       	ldi	r29, 0x75	; 117
    13bc:	28 98       	cbi	0x05, 0	; 5
    13be:	61 e0       	ldi	r22, 0x01	; 1
    13c0:	70 e0       	ldi	r23, 0x00	; 0
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	0e 94 c6 01 	call	0x38c	; 0x38c <myDelay_hus>
    13ca:	53 9b       	sbis	0x0a, 3	; 10
    13cc:	1a c0       	rjmp	.+52     	; 0x1402 <send25BytesToBig+0x64>
    13ce:	21 97       	sbiw	r28, 0x01	; 1
    13d0:	a9 f7       	brne	.-22     	; 0x13bc <send25BytesToBig+0x1e>
    13d2:	17 c0       	rjmp	.+46     	; 0x1402 <send25BytesToBig+0x64>
    13d4:	8f e2       	ldi	r24, 0x2F	; 47
    13d6:	95 e7       	ldi	r25, 0x75	; 117
    13d8:	53 9b       	sbis	0x0a, 3	; 10
    13da:	15 c0       	rjmp	.+42     	; 0x1406 <send25BytesToBig+0x68>
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	e1 f7       	brne	.-8      	; 0x13d8 <send25BytesToBig+0x3a>
    13e0:	12 c0       	rjmp	.+36     	; 0x1406 <send25BytesToBig+0x68>
    13e2:	53 99       	sbic	0x0a, 3	; 10
    13e4:	02 c0       	rjmp	.+4      	; 0x13ea <send25BytesToBig+0x4c>
    13e6:	01 97       	sbiw	r24, 0x01	; 1
    13e8:	e1 f7       	brne	.-8      	; 0x13e2 <send25BytesToBig+0x44>
    13ea:	40 9a       	sbi	0x08, 0	; 8
    13ec:	48 9a       	sbi	0x09, 0	; 9
    13ee:	e8 01       	movw	r28, r16
    13f0:	07 5e       	subi	r16, 0xE7	; 231
    13f2:	1f 4f       	sbci	r17, 0xFF	; 255
    13f4:	89 91       	ld	r24, Y+
    13f6:	0e 94 fe 08 	call	0x11fc	; 0x11fc <sendByteToBig>
    13fa:	0c 17       	cp	r16, r28
    13fc:	1d 07       	cpc	r17, r29
    13fe:	d1 f7       	brne	.-12     	; 0x13f4 <send25BytesToBig+0x56>
    1400:	07 c0       	rjmp	.+14     	; 0x1410 <send25BytesToBig+0x72>
    1402:	53 99       	sbic	0x0a, 3	; 10
    1404:	e7 cf       	rjmp	.-50     	; 0x13d4 <send25BytesToBig+0x36>
    1406:	53 99       	sbic	0x0a, 3	; 10
    1408:	f0 cf       	rjmp	.-32     	; 0x13ea <send25BytesToBig+0x4c>
    140a:	8f e2       	ldi	r24, 0x2F	; 47
    140c:	95 e7       	ldi	r25, 0x75	; 117
    140e:	e9 cf       	rjmp	.-46     	; 0x13e2 <send25BytesToBig+0x44>
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	1f 91       	pop	r17
    1416:	0f 91       	pop	r16
    1418:	08 95       	ret

0000141a <getPacketFromBig>:
    141a:	cf 92       	push	r12
    141c:	df 92       	push	r13
    141e:	ef 92       	push	r14
    1420:	ff 92       	push	r15
    1422:	0f 93       	push	r16
    1424:	1f 93       	push	r17
    1426:	cf 93       	push	r28
    1428:	df 93       	push	r29
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
    142e:	2b 97       	sbiw	r28, 0x0b	; 11
    1430:	cd bf       	out	0x3d, r28	; 61
    1432:	de bf       	out	0x3e, r29	; 62
    1434:	f8 94       	cli
    1436:	0e 94 5d 08 	call	0x10ba	; 0x10ba <getByteFromBig>
    143a:	89 83       	std	Y+1, r24	; 0x01
    143c:	0e 94 5d 08 	call	0x10ba	; 0x10ba <getByteFromBig>
    1440:	8a 83       	std	Y+2, r24	; 0x02
    1442:	0e 94 5d 08 	call	0x10ba	; 0x10ba <getByteFromBig>
    1446:	8b 83       	std	Y+3, r24	; 0x03
    1448:	0e 94 5d 08 	call	0x10ba	; 0x10ba <getByteFromBig>
    144c:	8c 83       	std	Y+4, r24	; 0x04
    144e:	62 e0       	ldi	r22, 0x02	; 2
    1450:	ce 01       	movw	r24, r28
    1452:	01 96       	adiw	r24, 0x01	; 1
    1454:	0e 94 15 08 	call	0x102a	; 0x102a <calcCRC>
    1458:	20 9a       	sbi	0x04, 0	; 4
    145a:	2b 81       	ldd	r18, Y+3	; 0x03
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	32 2f       	mov	r19, r18
    1460:	22 27       	eor	r18, r18
    1462:	4c 81       	ldd	r20, Y+4	; 0x04
    1464:	24 0f       	add	r18, r20
    1466:	31 1d       	adc	r19, r1
    1468:	82 17       	cp	r24, r18
    146a:	93 07       	cpc	r25, r19
    146c:	09 f0       	breq	.+2      	; 0x1470 <getPacketFromBig+0x56>
    146e:	1b c1       	rjmp	.+566    	; 0x16a6 <getPacketFromBig+0x28c>
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	80 93 fa 38 	sts	0x38FA, r24	; 0x8038fa <g_rcvdCmd>
    1476:	02 ec       	ldi	r16, 0xC2	; 194
    1478:	18 e3       	ldi	r17, 0x38	; 56
    147a:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <g_motionMinTotalDN>
    147e:	f8 01       	movw	r30, r16
    1480:	81 87       	std	Z+9, r24	; 0x09
    1482:	ea 81       	ldd	r30, Y+2	; 0x02
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	e2 52       	subi	r30, 0x22	; 34
    1488:	f7 4c       	sbci	r31, 0xC7	; 199
    148a:	80 81       	ld	r24, Z
    148c:	f8 01       	movw	r30, r16
    148e:	80 8f       	std	Z+24, r24	; 0x18
    1490:	43 98       	cbi	0x08, 3	; 8
    1492:	6a e1       	ldi	r22, 0x1A	; 26
    1494:	c8 01       	movw	r24, r16
    1496:	0e 94 15 08 	call	0x102a	; 0x102a <calcCRC>
    149a:	f8 01       	movw	r30, r16
    149c:	92 8f       	std	Z+26, r25	; 0x1a
    149e:	83 8f       	std	Z+27, r24	; 0x1b
    14a0:	80 81       	ld	r24, Z
    14a2:	88 23       	and	r24, r24
    14a4:	14 f0       	brlt	.+4      	; 0x14aa <getPacketFromBig+0x90>
    14a6:	28 98       	cbi	0x05, 0	; 5
    14a8:	29 c1       	rjmp	.+594    	; 0x16fc <getPacketFromBig+0x2e2>
    14aa:	28 9a       	sbi	0x05, 0	; 5
    14ac:	27 c1       	rjmp	.+590    	; 0x16fc <getPacketFromBig+0x2e2>
    14ae:	8f e2       	ldi	r24, 0x2F	; 47
    14b0:	95 e7       	ldi	r25, 0x75	; 117
    14b2:	53 9b       	sbis	0x0a, 3	; 10
    14b4:	25 c1       	rjmp	.+586    	; 0x1700 <getPacketFromBig+0x2e6>
    14b6:	01 97       	sbiw	r24, 0x01	; 1
    14b8:	e1 f7       	brne	.-8      	; 0x14b2 <getPacketFromBig+0x98>
    14ba:	22 c1       	rjmp	.+580    	; 0x1700 <getPacketFromBig+0x2e6>
    14bc:	f8 01       	movw	r30, r16
    14be:	81 91       	ld	r24, Z+
    14c0:	8f 01       	movw	r16, r30
    14c2:	0e 94 fe 08 	call	0x11fc	; 0x11fc <sendByteToBig>
    14c6:	0c 15       	cp	r16, r12
    14c8:	1d 05       	cpc	r17, r13
    14ca:	c1 f7       	brne	.-16     	; 0x14bc <getPacketFromBig+0xa2>
    14cc:	20 98       	cbi	0x04, 0	; 4
    14ce:	30 9b       	sbis	0x06, 0	; 6
    14d0:	0b c0       	rjmp	.+22     	; 0x14e8 <getPacketFromBig+0xce>
    14d2:	18 ec       	ldi	r17, 0xC8	; 200
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <getPacketFromBig+0xc0>
    14d6:	30 9b       	sbis	0x06, 0	; 6
    14d8:	08 c0       	rjmp	.+16     	; 0x14ea <getPacketFromBig+0xd0>
	...
    14e2:	11 50       	subi	r17, 0x01	; 1
    14e4:	c1 f7       	brne	.-16     	; 0x14d6 <getPacketFromBig+0xbc>
    14e6:	01 c0       	rjmp	.+2      	; 0x14ea <getPacketFromBig+0xd0>
    14e8:	18 ec       	ldi	r17, 0xC8	; 200
    14ea:	0e 94 57 11 	call	0x22ae	; 0x22ae <USART_0_initialization>
    14ee:	0e 94 57 11 	call	0x22ae	; 0x22ae <USART_0_initialization>
    14f2:	8a e0       	ldi	r24, 0x0A	; 10
    14f4:	8a 87       	std	Y+10, r24	; 0x0a
    14f6:	8d e0       	ldi	r24, 0x0D	; 13
    14f8:	8b 87       	std	Y+11, r24	; 0x0b
    14fa:	62 e0       	ldi	r22, 0x02	; 2
    14fc:	ce 01       	movw	r24, r28
    14fe:	0a 96       	adiw	r24, 0x0a	; 10
    1500:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <usart_put_string>
    1504:	62 e0       	ldi	r22, 0x02	; 2
    1506:	ce 01       	movw	r24, r28
    1508:	0a 96       	adiw	r24, 0x0a	; 10
    150a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <usart_put_string>
    150e:	62 e0       	ldi	r22, 0x02	; 2
    1510:	ce 01       	movw	r24, r28
    1512:	0a 96       	adiw	r24, 0x0a	; 10
    1514:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <usart_put_string>
    1518:	0f 2e       	mov	r0, r31
    151a:	f2 ec       	ldi	r31, 0xC2	; 194
    151c:	cf 2e       	mov	r12, r31
    151e:	f8 e3       	ldi	r31, 0x38	; 56
    1520:	df 2e       	mov	r13, r31
    1522:	f0 2d       	mov	r31, r0
    1524:	f6 01       	movw	r30, r12
    1526:	82 81       	ldd	r24, Z+2	; 0x02
    1528:	62 e0       	ldi	r22, 0x02	; 2
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	0e 94 8e 02 	call	0x51c	; 0x51c <LCDshort>
    1530:	f6 01       	movw	r30, r12
    1532:	83 81       	ldd	r24, Z+3	; 0x03
    1534:	62 e0       	ldi	r22, 0x02	; 2
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	0e 94 8e 02 	call	0x51c	; 0x51c <LCDshort>
    153c:	f6 01       	movw	r30, r12
    153e:	84 81       	ldd	r24, Z+4	; 0x04
    1540:	62 e0       	ldi	r22, 0x02	; 2
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	0e 94 8e 02 	call	0x51c	; 0x51c <LCDshort>
    1548:	f6 01       	movw	r30, r12
    154a:	85 81       	ldd	r24, Z+5	; 0x05
    154c:	62 e0       	ldi	r22, 0x02	; 2
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	0e 94 8e 02 	call	0x51c	; 0x51c <LCDshort>
    1554:	f6 01       	movw	r30, r12
    1556:	86 81       	ldd	r24, Z+6	; 0x06
    1558:	62 e0       	ldi	r22, 0x02	; 2
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	0e 94 8e 02 	call	0x51c	; 0x51c <LCDshort>
    1560:	f6 01       	movw	r30, r12
    1562:	87 81       	ldd	r24, Z+7	; 0x07
    1564:	62 e0       	ldi	r22, 0x02	; 2
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	0e 94 8e 02 	call	0x51c	; 0x51c <LCDshort>
    156c:	f6 01       	movw	r30, r12
    156e:	80 85       	ldd	r24, Z+8	; 0x08
    1570:	62 e0       	ldi	r22, 0x02	; 2
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	0e 94 8e 02 	call	0x51c	; 0x51c <LCDshort>
    1578:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LCDspace>
    157c:	f6 01       	movw	r30, r12
    157e:	81 85       	ldd	r24, Z+9	; 0x09
    1580:	62 e0       	ldi	r22, 0x02	; 2
    1582:	90 e0       	ldi	r25, 0x00	; 0
    1584:	0e 94 8e 02 	call	0x51c	; 0x51c <LCDshort>
    1588:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LCDspace>
    158c:	f6 01       	movw	r30, r12
    158e:	82 85       	ldd	r24, Z+10	; 0x0a
    1590:	62 e0       	ldi	r22, 0x02	; 2
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	0e 94 8e 02 	call	0x51c	; 0x51c <LCDshort>
    1598:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LCDspace>
    159c:	f6 01       	movw	r30, r12
    159e:	83 85       	ldd	r24, Z+11	; 0x0b
    15a0:	62 e0       	ldi	r22, 0x02	; 2
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	0e 94 8e 02 	call	0x51c	; 0x51c <LCDshort>
    15a8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LCDspace>
    15ac:	f6 01       	movw	r30, r12
    15ae:	84 85       	ldd	r24, Z+12	; 0x0c
    15b0:	62 e0       	ldi	r22, 0x02	; 2
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	0e 94 8e 02 	call	0x51c	; 0x51c <LCDshort>
    15b8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LCDspace>
    15bc:	f6 01       	movw	r30, r12
    15be:	85 85       	ldd	r24, Z+13	; 0x0d
    15c0:	62 e0       	ldi	r22, 0x02	; 2
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	0e 94 8e 02 	call	0x51c	; 0x51c <LCDshort>
    15c8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LCDspace>
    15cc:	f6 01       	movw	r30, r12
    15ce:	86 85       	ldd	r24, Z+14	; 0x0e
    15d0:	62 e0       	ldi	r22, 0x02	; 2
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	0e 94 8e 02 	call	0x51c	; 0x51c <LCDshort>
    15d8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LCDspace>
    15dc:	f6 01       	movw	r30, r12
    15de:	87 85       	ldd	r24, Z+15	; 0x0f
    15e0:	62 e0       	ldi	r22, 0x02	; 2
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	0e 94 8e 02 	call	0x51c	; 0x51c <LCDshort>
    15e8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LCDspace>
    15ec:	f6 01       	movw	r30, r12
    15ee:	80 89       	ldd	r24, Z+16	; 0x10
    15f0:	62 e0       	ldi	r22, 0x02	; 2
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	0e 94 8e 02 	call	0x51c	; 0x51c <LCDshort>
    15f8:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LCDspace>
    15fc:	f6 01       	movw	r30, r12
    15fe:	81 89       	ldd	r24, Z+17	; 0x11
    1600:	62 e0       	ldi	r22, 0x02	; 2
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	0e 94 8e 02 	call	0x51c	; 0x51c <LCDshort>
    1608:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LCDspace>
    160c:	f6 01       	movw	r30, r12
    160e:	82 89       	ldd	r24, Z+18	; 0x12
    1610:	62 e0       	ldi	r22, 0x02	; 2
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	0e 94 8e 02 	call	0x51c	; 0x51c <LCDshort>
    1618:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LCDspace>
    161c:	f6 01       	movw	r30, r12
    161e:	83 89       	ldd	r24, Z+19	; 0x13
    1620:	62 e0       	ldi	r22, 0x02	; 2
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	0e 94 8e 02 	call	0x51c	; 0x51c <LCDshort>
    1628:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LCDspace>
    162c:	f6 01       	movw	r30, r12
    162e:	84 89       	ldd	r24, Z+20	; 0x14
    1630:	62 e0       	ldi	r22, 0x02	; 2
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	0e 94 8e 02 	call	0x51c	; 0x51c <LCDshort>
    1638:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LCDspace>
    163c:	f6 01       	movw	r30, r12
    163e:	85 89       	ldd	r24, Z+21	; 0x15
    1640:	62 e0       	ldi	r22, 0x02	; 2
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	0e 94 8e 02 	call	0x51c	; 0x51c <LCDshort>
    1648:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <LCDspace>
    164c:	f6 01       	movw	r30, r12
    164e:	86 89       	ldd	r24, Z+22	; 0x16
    1650:	62 e0       	ldi	r22, 0x02	; 2
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	0e 94 8e 02 	call	0x51c	; 0x51c <LCDshort>
    1658:	62 e0       	ldi	r22, 0x02	; 2
    165a:	ce 01       	movw	r24, r28
    165c:	0a 96       	adiw	r24, 0x0a	; 10
    165e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <usart_put_string>
    1662:	a8 95       	wdr
    1664:	62 e3       	ldi	r22, 0x32	; 50
    1666:	70 e0       	ldi	r23, 0x00	; 0
    1668:	80 e0       	ldi	r24, 0x00	; 0
    166a:	90 e0       	ldi	r25, 0x00	; 0
    166c:	0e 94 92 01 	call	0x324	; 0x324 <delay_ms>
    1670:	11 23       	and	r17, r17
    1672:	e1 f1       	breq	.+120    	; 0x16ec <getPacketFromBig+0x2d2>
    1674:	8a e0       	ldi	r24, 0x0A	; 10
    1676:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <g_durIndexENT>
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <g_motionPatternIndexENT>
    1680:	10 92 06 38 	sts	0x3806, r1	; 0x803806 <g_motSecCtrENT>
    1684:	10 92 04 38 	sts	0x3804, r1	; 0x803804 <g_motionMinTotalENT>
    1688:	10 92 0a 38 	sts	0x380A, r1	; 0x80380a <g_motionMinTotalDN>
    168c:	88 ed       	ldi	r24, 0xD8	; 216
    168e:	98 e3       	ldi	r25, 0x38	; 56
    1690:	f7 01       	movw	r30, r14
    1692:	11 92       	st	Z+, r1
    1694:	7f 01       	movw	r14, r30
    1696:	e8 17       	cp	r30, r24
    1698:	f9 07       	cpc	r31, r25
    169a:	d1 f7       	brne	.-12     	; 0x1690 <getPacketFromBig+0x276>
    169c:	e2 ec       	ldi	r30, 0xC2	; 194
    169e:	f8 e3       	ldi	r31, 0x38	; 56
    16a0:	16 8a       	std	Z+22, r1	; 0x16
    16a2:	17 8a       	std	Z+23, r1	; 0x17
    16a4:	23 c0       	rjmp	.+70     	; 0x16ec <getPacketFromBig+0x2d2>
    16a6:	8a e0       	ldi	r24, 0x0A	; 10
    16a8:	8a 87       	std	Y+10, r24	; 0x0a
    16aa:	8d e0       	ldi	r24, 0x0D	; 13
    16ac:	8b 87       	std	Y+11, r24	; 0x0b
    16ae:	0e 94 57 11 	call	0x22ae	; 0x22ae <USART_0_initialization>
    16b2:	0e 94 57 11 	call	0x22ae	; 0x22ae <USART_0_initialization>
    16b6:	62 e0       	ldi	r22, 0x02	; 2
    16b8:	ce 01       	movw	r24, r28
    16ba:	0a 96       	adiw	r24, 0x0a	; 10
    16bc:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <usart_put_string>
    16c0:	63 e0       	ldi	r22, 0x03	; 3
    16c2:	83 ef       	ldi	r24, 0xF3	; 243
    16c4:	93 ea       	ldi	r25, 0xA3	; 163
    16c6:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <usart_put_string>
    16ca:	62 e0       	ldi	r22, 0x02	; 2
    16cc:	ce 01       	movw	r24, r28
    16ce:	0a 96       	adiw	r24, 0x0a	; 10
    16d0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <usart_put_string>
    16d4:	68 e0       	ldi	r22, 0x08	; 8
    16d6:	87 ef       	ldi	r24, 0xF7	; 247
    16d8:	93 ea       	ldi	r25, 0xA3	; 163
    16da:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <usart_put_string>
    16de:	a8 95       	wdr
    16e0:	62 e3       	ldi	r22, 0x32	; 50
    16e2:	70 e0       	ldi	r23, 0x00	; 0
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	0e 94 92 01 	call	0x324	; 0x324 <delay_ms>
    16ec:	e0 e4       	ldi	r30, 0x40	; 64
    16ee:	f4 e0       	ldi	r31, 0x04	; 4
    16f0:	81 85       	ldd	r24, Z+9	; 0x09
    16f2:	82 60       	ori	r24, 0x02	; 2
    16f4:	81 87       	std	Z+9, r24	; 0x09
    16f6:	78 94       	sei
    16f8:	89 81       	ldd	r24, Y+1	; 0x01
    16fa:	10 c0       	rjmp	.+32     	; 0x171c <getPacketFromBig+0x302>
    16fc:	53 99       	sbic	0x0a, 3	; 10
    16fe:	d7 ce       	rjmp	.-594    	; 0x14ae <getPacketFromBig+0x94>
    1700:	0f 2e       	mov	r0, r31
    1702:	f2 ec       	ldi	r31, 0xC2	; 194
    1704:	ef 2e       	mov	r14, r31
    1706:	f8 e3       	ldi	r31, 0x38	; 56
    1708:	ff 2e       	mov	r15, r31
    170a:	f0 2d       	mov	r31, r0
    170c:	0f 2e       	mov	r0, r31
    170e:	fe ed       	ldi	r31, 0xDE	; 222
    1710:	cf 2e       	mov	r12, r31
    1712:	f8 e3       	ldi	r31, 0x38	; 56
    1714:	df 2e       	mov	r13, r31
    1716:	f0 2d       	mov	r31, r0
    1718:	87 01       	movw	r16, r14
    171a:	d0 ce       	rjmp	.-608    	; 0x14bc <getPacketFromBig+0xa2>
    171c:	2b 96       	adiw	r28, 0x0b	; 11
    171e:	cd bf       	out	0x3d, r28	; 61
    1720:	de bf       	out	0x3e, r29	; 62
    1722:	df 91       	pop	r29
    1724:	cf 91       	pop	r28
    1726:	1f 91       	pop	r17
    1728:	0f 91       	pop	r16
    172a:	ff 90       	pop	r15
    172c:	ef 90       	pop	r14
    172e:	df 90       	pop	r13
    1730:	cf 90       	pop	r12
    1732:	08 95       	ret

00001734 <USART0_ON>:
    1734:	23 98       	cbi	0x04, 3	; 4
    1736:	e3 e3       	ldi	r30, 0x33	; 51
    1738:	f4 e0       	ldi	r31, 0x04	; 4
    173a:	90 81       	ld	r25, Z
    173c:	97 7f       	andi	r25, 0xF7	; 247
    173e:	90 83       	st	Z, r25
    1740:	2a 9a       	sbi	0x05, 2	; 5
    1742:	22 9a       	sbi	0x04, 2	; 4
    1744:	2c e6       	ldi	r18, 0x6C	; 108
    1746:	35 e0       	ldi	r19, 0x05	; 5
    1748:	20 93 08 08 	sts	0x0808, r18	; 0x800808 <__TEXT_REGION_LENGTH__+0x700808>
    174c:	30 93 09 08 	sts	0x0809, r19	; 0x800809 <__TEXT_REGION_LENGTH__+0x700809>
    1750:	88 23       	and	r24, r24
    1752:	21 f0       	breq	.+8      	; 0x175c <USART0_ON+0x28>
    1754:	80 ec       	ldi	r24, 0xC0	; 192
    1756:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
    175a:	10 c0       	rjmp	.+32     	; 0x177c <USART0_ON+0x48>
    175c:	23 98       	cbi	0x04, 3	; 4
    175e:	e3 e3       	ldi	r30, 0x33	; 51
    1760:	f4 e0       	ldi	r31, 0x04	; 4
    1762:	80 81       	ld	r24, Z
    1764:	87 7f       	andi	r24, 0xF7	; 247
    1766:	80 83       	st	Z, r24
    1768:	2a 9a       	sbi	0x05, 2	; 5
    176a:	22 9a       	sbi	0x04, 2	; 4
    176c:	e0 e0       	ldi	r30, 0x00	; 0
    176e:	f8 e0       	ldi	r31, 0x08	; 8
    1770:	8c e6       	ldi	r24, 0x6C	; 108
    1772:	95 e0       	ldi	r25, 0x05	; 5
    1774:	80 87       	std	Z+8, r24	; 0x08
    1776:	91 87       	std	Z+9, r25	; 0x09
    1778:	80 e4       	ldi	r24, 0x40	; 64
    177a:	86 83       	std	Z+6, r24	; 0x06
    177c:	e0 e0       	ldi	r30, 0x00	; 0
    177e:	f8 e0       	ldi	r31, 0x08	; 8
    1780:	81 81       	ldd	r24, Z+1	; 0x01
    1782:	80 81       	ld	r24, Z
    1784:	08 95       	ret

00001786 <openGPSuBlox>:
    1786:	04 98       	cbi	0x00, 4	; 0
    1788:	e4 e1       	ldi	r30, 0x14	; 20
    178a:	f4 e0       	ldi	r31, 0x04	; 4
    178c:	80 81       	ld	r24, Z
    178e:	88 60       	ori	r24, 0x08	; 8
    1790:	80 83       	st	Z, r24
    1792:	45 9a       	sbi	0x08, 5	; 8
    1794:	4d 9a       	sbi	0x09, 5	; 9
    1796:	8c e0       	ldi	r24, 0x0C	; 12
    1798:	98 e3       	ldi	r25, 0x38	; 56
    179a:	80 93 01 39 	sts	0x3901, r24	; 0x803901 <p_GPSrcvData>
    179e:	90 93 02 39 	sts	0x3902, r25	; 0x803902 <p_GPSrcvData+0x1>
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	0e 94 9a 0b 	call	0x1734	; 0x1734 <USART0_ON>
    17a8:	08 95       	ret

000017aa <USART0_OFF>:
    17aa:	10 92 06 08 	sts	0x0806, r1	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
    17ae:	23 9a       	sbi	0x04, 3	; 4
    17b0:	22 9a       	sbi	0x04, 2	; 4
    17b2:	2a 98       	cbi	0x05, 2	; 5
    17b4:	2b 98       	cbi	0x05, 3	; 5
    17b6:	08 95       	ret

000017b8 <closeGPS>:
    17b8:	45 9a       	sbi	0x08, 5	; 8
    17ba:	4d 98       	cbi	0x09, 5	; 9
    17bc:	e4 e1       	ldi	r30, 0x14	; 20
    17be:	f4 e0       	ldi	r31, 0x04	; 4
    17c0:	80 81       	ld	r24, Z
    17c2:	87 7f       	andi	r24, 0xF7	; 247
    17c4:	80 83       	st	Z, r24
    17c6:	04 9a       	sbi	0x00, 4	; 0
    17c8:	0c 98       	cbi	0x01, 4	; 1
    17ca:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <USART0_OFF>
    17ce:	08 95       	ret

000017d0 <gTryUblox>:
    17d0:	9f 92       	push	r9
    17d2:	af 92       	push	r10
    17d4:	bf 92       	push	r11
    17d6:	cf 92       	push	r12
    17d8:	df 92       	push	r13
    17da:	ef 92       	push	r14
    17dc:	ff 92       	push	r15
    17de:	0f 93       	push	r16
    17e0:	1f 93       	push	r17
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29
    17e6:	68 94       	set
    17e8:	99 24       	eor	r9, r9
    17ea:	93 f8       	bld	r9, 3
    17ec:	e1 2c       	mov	r14, r1
    17ee:	68 94       	set
    17f0:	ff 24       	eor	r15, r15
    17f2:	f3 f8       	bld	r15, 3
    17f4:	06 e3       	ldi	r16, 0x36	; 54
    17f6:	14 e0       	ldi	r17, 0x04	; 4
    17f8:	c1 e1       	ldi	r28, 0x11	; 17
    17fa:	d4 e0       	ldi	r29, 0x04	; 4
    17fc:	0f 2e       	mov	r0, r31
    17fe:	f9 ef       	ldi	r31, 0xF9	; 249
    1800:	af 2e       	mov	r10, r31
    1802:	f0 2d       	mov	r31, r0
    1804:	0f 2e       	mov	r0, r31
    1806:	f3 e0       	ldi	r31, 0x03	; 3
    1808:	bf 2e       	mov	r11, r31
    180a:	f0 2d       	mov	r31, r0
    180c:	a8 95       	wdr
    180e:	6a ef       	ldi	r22, 0xFA	; 250
    1810:	70 e0       	ldi	r23, 0x00	; 0
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	0e 94 92 01 	call	0x324	; 0x324 <delay_ms>
    181a:	0e 94 00 03 	call	0x600	; 0x600 <clrRx>
    181e:	f7 01       	movw	r30, r14
    1820:	85 81       	ldd	r24, Z+5	; 0x05
    1822:	80 68       	ori	r24, 0x80	; 128
    1824:	85 83       	std	Z+5, r24	; 0x05
    1826:	78 94       	sei
    1828:	0e 94 ae 04 	call	0x95c	; 0x95c <gpsReqStatusUblox>
    182c:	6c 01       	movw	r12, r24
    182e:	f8 01       	movw	r30, r16
    1830:	80 81       	ld	r24, Z
    1832:	88 7f       	andi	r24, 0xF8	; 248
    1834:	82 60       	ori	r24, 0x02	; 2
    1836:	80 83       	st	Z, r24
    1838:	88 81       	ld	r24, Y
    183a:	88 7f       	andi	r24, 0xF8	; 248
    183c:	82 60       	ori	r24, 0x02	; 2
    183e:	88 83       	st	Y, r24
    1840:	ba 94       	dec	r11
    1842:	bb 20       	and	r11, r11
    1844:	31 f0       	breq	.+12     	; 0x1852 <gTryUblox+0x82>
    1846:	fa e9       	ldi	r31, 0x9A	; 154
    1848:	cf 16       	cp	r12, r31
    184a:	f2 e0       	ldi	r31, 0x02	; 2
    184c:	df 06       	cpc	r13, r31
    184e:	f1 f2       	breq	.-68     	; 0x180c <gTryUblox+0x3c>
    1850:	1f c0       	rjmp	.+62     	; 0x1890 <gTryUblox+0xc0>
    1852:	aa 94       	dec	r10
    1854:	aa 20       	and	r10, r10
    1856:	31 f0       	breq	.+12     	; 0x1864 <gTryUblox+0x94>
    1858:	8a e9       	ldi	r24, 0x9A	; 154
    185a:	c8 16       	cp	r12, r24
    185c:	82 e0       	ldi	r24, 0x02	; 2
    185e:	d8 06       	cpc	r13, r24
    1860:	89 f2       	breq	.-94     	; 0x1804 <gTryUblox+0x34>
    1862:	19 c0       	rjmp	.+50     	; 0x1896 <gTryUblox+0xc6>
    1864:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <closeGPS>
    1868:	68 ee       	ldi	r22, 0xE8	; 232
    186a:	73 e0       	ldi	r23, 0x03	; 3
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	0e 94 92 01 	call	0x324	; 0x324 <delay_ms>
    1874:	0e 94 c3 0b 	call	0x1786	; 0x1786 <openGPSuBlox>
    1878:	0e 94 ed 01 	call	0x3da	; 0x3da <initGPSuBlox>
    187c:	9a 94       	dec	r9
    187e:	99 20       	and	r9, r9
    1880:	51 f0       	breq	.+20     	; 0x1896 <gTryUblox+0xc6>
    1882:	ea e9       	ldi	r30, 0x9A	; 154
    1884:	ce 16       	cp	r12, r30
    1886:	e2 e0       	ldi	r30, 0x02	; 2
    1888:	de 06       	cpc	r13, r30
    188a:	09 f4       	brne	.+2      	; 0x188e <gTryUblox+0xbe>
    188c:	b7 cf       	rjmp	.-146    	; 0x17fc <gTryUblox+0x2c>
    188e:	03 c0       	rjmp	.+6      	; 0x1896 <gTryUblox+0xc6>
    1890:	f1 e0       	ldi	r31, 0x01	; 1
    1892:	af 16       	cp	r10, r31
    1894:	39 f3       	breq	.-50     	; 0x1864 <gTryUblox+0x94>
    1896:	c6 01       	movw	r24, r12
    1898:	df 91       	pop	r29
    189a:	cf 91       	pop	r28
    189c:	1f 91       	pop	r17
    189e:	0f 91       	pop	r16
    18a0:	ff 90       	pop	r15
    18a2:	ef 90       	pop	r14
    18a4:	df 90       	pop	r13
    18a6:	cf 90       	pop	r12
    18a8:	bf 90       	pop	r11
    18aa:	af 90       	pop	r10
    18ac:	9f 90       	pop	r9
    18ae:	08 95       	ret

000018b0 <sleepPins>:
    18b0:	cf 93       	push	r28
    18b2:	df 93       	push	r29
    18b4:	00 98       	cbi	0x00, 0	; 0
    18b6:	e0 e1       	ldi	r30, 0x10	; 16
    18b8:	f4 e0       	ldi	r31, 0x04	; 4
    18ba:	90 81       	ld	r25, Z
    18bc:	98 60       	ori	r25, 0x08	; 8
    18be:	90 83       	st	Z, r25
    18c0:	01 98       	cbi	0x00, 1	; 0
    18c2:	e1 e1       	ldi	r30, 0x11	; 17
    18c4:	f4 e0       	ldi	r31, 0x04	; 4
    18c6:	90 81       	ld	r25, Z
    18c8:	97 7f       	andi	r25, 0xF7	; 247
    18ca:	90 83       	st	Z, r25
    18cc:	02 98       	cbi	0x00, 2	; 0
    18ce:	e2 e1       	ldi	r30, 0x12	; 18
    18d0:	f4 e0       	ldi	r31, 0x04	; 4
    18d2:	90 81       	ld	r25, Z
    18d4:	98 60       	ori	r25, 0x08	; 8
    18d6:	90 83       	st	Z, r25
    18d8:	03 98       	cbi	0x00, 3	; 0
    18da:	e3 e1       	ldi	r30, 0x13	; 19
    18dc:	f4 e0       	ldi	r31, 0x04	; 4
    18de:	90 81       	ld	r25, Z
    18e0:	98 60       	ori	r25, 0x08	; 8
    18e2:	90 83       	st	Z, r25
    18e4:	e4 e1       	ldi	r30, 0x14	; 20
    18e6:	f4 e0       	ldi	r31, 0x04	; 4
    18e8:	90 81       	ld	r25, Z
    18ea:	97 7f       	andi	r25, 0xF7	; 247
    18ec:	90 83       	st	Z, r25
    18ee:	04 9a       	sbi	0x00, 4	; 0
    18f0:	0c 98       	cbi	0x01, 4	; 1
    18f2:	05 98       	cbi	0x00, 5	; 0
    18f4:	e5 e1       	ldi	r30, 0x15	; 21
    18f6:	f4 e0       	ldi	r31, 0x04	; 4
    18f8:	90 81       	ld	r25, Z
    18fa:	98 60       	ori	r25, 0x08	; 8
    18fc:	90 83       	st	Z, r25
    18fe:	06 98       	cbi	0x00, 6	; 0
    1900:	e6 e1       	ldi	r30, 0x16	; 22
    1902:	f4 e0       	ldi	r31, 0x04	; 4
    1904:	90 81       	ld	r25, Z
    1906:	98 60       	ori	r25, 0x08	; 8
    1908:	90 83       	st	Z, r25
    190a:	07 98       	cbi	0x00, 7	; 0
    190c:	e7 e1       	ldi	r30, 0x17	; 23
    190e:	f4 e0       	ldi	r31, 0x04	; 4
    1910:	90 81       	ld	r25, Z
    1912:	98 60       	ori	r25, 0x08	; 8
    1914:	90 83       	st	Z, r25
    1916:	20 98       	cbi	0x04, 0	; 4
    1918:	e0 e3       	ldi	r30, 0x30	; 48
    191a:	f4 e0       	ldi	r31, 0x04	; 4
    191c:	90 81       	ld	r25, Z
    191e:	97 7f       	andi	r25, 0xF7	; 247
    1920:	90 83       	st	Z, r25
    1922:	21 98       	cbi	0x04, 1	; 4
    1924:	e1 e3       	ldi	r30, 0x31	; 49
    1926:	f4 e0       	ldi	r31, 0x04	; 4
    1928:	90 81       	ld	r25, Z
    192a:	98 60       	ori	r25, 0x08	; 8
    192c:	90 83       	st	Z, r25
    192e:	22 98       	cbi	0x04, 2	; 4
    1930:	e2 e3       	ldi	r30, 0x32	; 50
    1932:	f4 e0       	ldi	r31, 0x04	; 4
    1934:	90 81       	ld	r25, Z
    1936:	97 7f       	andi	r25, 0xF7	; 247
    1938:	90 83       	st	Z, r25
    193a:	23 98       	cbi	0x04, 3	; 4
    193c:	e3 e3       	ldi	r30, 0x33	; 51
    193e:	f4 e0       	ldi	r31, 0x04	; 4
    1940:	90 81       	ld	r25, Z
    1942:	97 7f       	andi	r25, 0xF7	; 247
    1944:	90 83       	st	Z, r25
    1946:	24 98       	cbi	0x04, 4	; 4
    1948:	e4 e3       	ldi	r30, 0x34	; 52
    194a:	f4 e0       	ldi	r31, 0x04	; 4
    194c:	90 81       	ld	r25, Z
    194e:	98 60       	ori	r25, 0x08	; 8
    1950:	90 83       	st	Z, r25
    1952:	25 98       	cbi	0x04, 5	; 4
    1954:	e5 e3       	ldi	r30, 0x35	; 53
    1956:	f4 e0       	ldi	r31, 0x04	; 4
    1958:	90 81       	ld	r25, Z
    195a:	98 60       	ori	r25, 0x08	; 8
    195c:	90 83       	st	Z, r25
    195e:	26 98       	cbi	0x04, 6	; 4
    1960:	e6 e3       	ldi	r30, 0x36	; 54
    1962:	f4 e0       	ldi	r31, 0x04	; 4
    1964:	90 81       	ld	r25, Z
    1966:	97 7f       	andi	r25, 0xF7	; 247
    1968:	90 83       	st	Z, r25
    196a:	27 98       	cbi	0x04, 7	; 4
    196c:	e7 e3       	ldi	r30, 0x37	; 55
    196e:	f4 e0       	ldi	r31, 0x04	; 4
    1970:	90 81       	ld	r25, Z
    1972:	98 60       	ori	r25, 0x08	; 8
    1974:	90 83       	st	Z, r25
    1976:	40 98       	cbi	0x08, 0	; 8
    1978:	e0 e5       	ldi	r30, 0x50	; 80
    197a:	f4 e0       	ldi	r31, 0x04	; 4
    197c:	90 81       	ld	r25, Z
    197e:	98 60       	ori	r25, 0x08	; 8
    1980:	90 83       	st	Z, r25
    1982:	41 98       	cbi	0x08, 1	; 8
    1984:	e1 e5       	ldi	r30, 0x51	; 81
    1986:	f4 e0       	ldi	r31, 0x04	; 4
    1988:	90 81       	ld	r25, Z
    198a:	98 60       	ori	r25, 0x08	; 8
    198c:	90 83       	st	Z, r25
    198e:	88 23       	and	r24, r24
    1990:	29 f0       	breq	.+10     	; 0x199c <sleepPins+0xec>
    1992:	80 81       	ld	r24, Z
    1994:	88 7f       	andi	r24, 0xF8	; 248
    1996:	85 60       	ori	r24, 0x05	; 5
    1998:	80 83       	st	Z, r24
    199a:	05 c0       	rjmp	.+10     	; 0x19a6 <sleepPins+0xf6>
    199c:	e1 e5       	ldi	r30, 0x51	; 81
    199e:	f4 e0       	ldi	r31, 0x04	; 4
    19a0:	80 81       	ld	r24, Z
    19a2:	88 7f       	andi	r24, 0xF8	; 248
    19a4:	80 83       	st	Z, r24
    19a6:	42 98       	cbi	0x08, 2	; 8
    19a8:	e2 e5       	ldi	r30, 0x52	; 82
    19aa:	f4 e0       	ldi	r31, 0x04	; 4
    19ac:	80 81       	ld	r24, Z
    19ae:	88 60       	ori	r24, 0x08	; 8
    19b0:	80 83       	st	Z, r24
    19b2:	43 98       	cbi	0x08, 3	; 8
    19b4:	e3 e5       	ldi	r30, 0x53	; 83
    19b6:	f4 e0       	ldi	r31, 0x04	; 4
    19b8:	80 81       	ld	r24, Z
    19ba:	87 7f       	andi	r24, 0xF7	; 247
    19bc:	80 83       	st	Z, r24
    19be:	44 98       	cbi	0x08, 4	; 8
    19c0:	e4 e5       	ldi	r30, 0x54	; 84
    19c2:	f4 e0       	ldi	r31, 0x04	; 4
    19c4:	80 81       	ld	r24, Z
    19c6:	87 7f       	andi	r24, 0xF7	; 247
    19c8:	80 83       	st	Z, r24
    19ca:	c5 e5       	ldi	r28, 0x55	; 85
    19cc:	d4 e0       	ldi	r29, 0x04	; 4
    19ce:	88 81       	ld	r24, Y
    19d0:	87 7f       	andi	r24, 0xF7	; 247
    19d2:	88 83       	st	Y, r24
    19d4:	45 9a       	sbi	0x08, 5	; 8
    19d6:	4d 98       	cbi	0x09, 5	; 9
    19d8:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__TEXT_REGION_LENGTH__+0x7000a1>
    19dc:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <__TEXT_REGION_LENGTH__+0x700600>
    19e0:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <closeGPS>
    19e4:	88 81       	ld	r24, Y
    19e6:	88 60       	ori	r24, 0x08	; 8
    19e8:	88 83       	st	Y, r24
    19ea:	df 91       	pop	r29
    19ec:	cf 91       	pop	r28
    19ee:	08 95       	ret

000019f0 <getGPS>:
    19f0:	0f 93       	push	r16
    19f2:	1f 93       	push	r17
    19f4:	cf 93       	push	r28
    19f6:	df 93       	push	r29
    19f8:	0e 94 c3 0b 	call	0x1786	; 0x1786 <openGPSuBlox>
    19fc:	0e 94 ed 01 	call	0x3da	; 0x3da <initGPSuBlox>
    1a00:	0e 94 ed 01 	call	0x3da	; 0x3da <initGPSuBlox>
    1a04:	0e 94 ed 01 	call	0x3da	; 0x3da <initGPSuBlox>
    1a08:	10 92 f7 38 	sts	0x38F7, r1	; 0x8038f7 <timeToFix>
    1a0c:	10 92 f8 38 	sts	0x38F8, r1	; 0x8038f8 <timeToFix+0x1>
    1a10:	10 92 ed 38 	sts	0x38ED, r1	; 0x8038ed <gpsParams+0xf>
    1a14:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <gTryUblox>
    1a18:	8c 01       	movw	r16, r24
    1a1a:	89 2b       	or	r24, r25
    1a1c:	59 f0       	breq	.+22     	; 0x1a34 <getGPS+0x44>
    1a1e:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <closeGPS>
    1a22:	0a e9       	ldi	r16, 0x9A	; 154
    1a24:	12 e0       	ldi	r17, 0x02	; 2
    1a26:	4e c0       	rjmp	.+156    	; 0x1ac4 <getGPS+0xd4>
    1a28:	c1 50       	subi	r28, 0x01	; 1
    1a2a:	29 f4       	brne	.+10     	; 0x1a36 <getGPS+0x46>
    1a2c:	0f c0       	rjmp	.+30     	; 0x1a4c <getGPS+0x5c>
    1a2e:	c1 11       	cpse	r28, r1
    1a30:	09 c0       	rjmp	.+18     	; 0x1a44 <getGPS+0x54>
    1a32:	0c c0       	rjmp	.+24     	; 0x1a4c <getGPS+0x5c>
    1a34:	cf e0       	ldi	r28, 0x0F	; 15
    1a36:	0e 94 7b 04 	call	0x8f6	; 0x8f6 <GPSgetDate>
    1a3a:	89 2b       	or	r24, r25
    1a3c:	a9 f7       	brne	.-22     	; 0x1a28 <getGPS+0x38>
    1a3e:	f7 cf       	rjmp	.-18     	; 0x1a2e <getGPS+0x3e>
    1a40:	c1 50       	subi	r28, 0x01	; 1
    1a42:	21 f0       	breq	.+8      	; 0x1a4c <getGPS+0x5c>
    1a44:	0e 94 bf 07 	call	0xf7e	; 0xf7e <GPSgetTime>
    1a48:	89 2b       	or	r24, r25
    1a4a:	d1 f7       	brne	.-12     	; 0x1a40 <getGPS+0x50>
    1a4c:	6a e0       	ldi	r22, 0x0A	; 10
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	94 ea       	ldi	r25, 0xA4	; 164
    1a52:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <usart_put_string>
    1a56:	f8 94       	cli
    1a58:	c0 e0       	ldi	r28, 0x00	; 0
    1a5a:	a8 95       	wdr
    1a5c:	cf 5f       	subi	r28, 0xFF	; 255
    1a5e:	40 9a       	sbi	0x08, 0	; 8
    1a60:	48 98       	cbi	0x09, 0	; 9
    1a62:	8e ed       	ldi	r24, 0xDE	; 222
    1a64:	98 e3       	ldi	r25, 0x38	; 56
    1a66:	0e 94 cf 09 	call	0x139e	; 0x139e <send25BytesToBig>
    1a6a:	0e 94 5d 08 	call	0x10ba	; 0x10ba <getByteFromBig>
    1a6e:	d8 2f       	mov	r29, r24
    1a70:	6a e0       	ldi	r22, 0x0A	; 10
    1a72:	8b e0       	ldi	r24, 0x0B	; 11
    1a74:	94 ea       	ldi	r25, 0xA4	; 164
    1a76:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <usart_put_string>
    1a7a:	62 e0       	ldi	r22, 0x02	; 2
    1a7c:	8d 2f       	mov	r24, r29
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	0e 94 8e 02 	call	0x51c	; 0x51c <LCDshort>
    1a84:	6c 2f       	mov	r22, r28
    1a86:	62 95       	swap	r22
    1a88:	66 95       	lsr	r22
    1a8a:	66 95       	lsr	r22
    1a8c:	63 70       	andi	r22, 0x03	; 3
    1a8e:	70 e0       	ldi	r23, 0x00	; 0
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	0e 94 92 01 	call	0x324	; 0x324 <delay_ms>
    1a98:	d7 34       	cpi	r29, 0x47	; 71
    1a9a:	11 f0       	breq	.+4      	; 0x1aa0 <getGPS+0xb0>
    1a9c:	ce 31       	cpi	r28, 0x1E	; 30
    1a9e:	e9 f6       	brne	.-70     	; 0x1a5a <getGPS+0x6a>
    1aa0:	78 94       	sei
    1aa2:	a8 95       	wdr
    1aa4:	60 ed       	ldi	r22, 0xD0	; 208
    1aa6:	77 e0       	ldi	r23, 0x07	; 7
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	0e 94 92 01 	call	0x324	; 0x324 <delay_ms>
    1ab0:	a8 95       	wdr
    1ab2:	60 ed       	ldi	r22, 0xD0	; 208
    1ab4:	77 e0       	ldi	r23, 0x07	; 7
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	0e 94 92 01 	call	0x324	; 0x324 <delay_ms>
    1abe:	a8 95       	wdr
    1ac0:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <USART0_OFF>
    1ac4:	c8 01       	movw	r24, r16
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	1f 91       	pop	r17
    1acc:	0f 91       	pop	r16
    1ace:	08 95       	ret

00001ad0 <pirSUdelay>:
	TPA1_set_dir(PORT_DIR_IN);
}
/*******************************************
*    PIR SETUP DELAY
********************************************/
void pirSUdelay (void){
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
	uint32_t tickCtr;
	for(tickCtr=PIR_SU_DELAY;tickCtr>0;tickCtr--){NOP();}
    1ad4:	00 00       	nop
    1ad6:	01 96       	adiw	r24, 0x01	; 1
    1ad8:	88 32       	cpi	r24, 0x28	; 40
    1ada:	91 05       	cpc	r25, r1
    1adc:	d9 f7       	brne	.-10     	; 0x1ad4 <pirSUdelay+0x4>
}
    1ade:	08 95       	ret

00001ae0 <setPIRbitDN>:
	setPIRbitENT(pirrD);
}
/*******************************************
*    PIR Set Bit
********************************************/
void setPIRbitDN(char byteToSet){
    1ae0:	0f 93       	push	r16
    1ae2:	1f 93       	push	r17
    1ae4:	cf 93       	push	r28
    1ae6:	df 93       	push	r29
    1ae8:	c7 e0       	ldi	r28, 0x07	; 7
    1aea:	d0 e0       	ldi	r29, 0x00	; 0
		NOP();
		NOP();
		PORTB_set_pin_level(7, 1);
		NOP();
		NOP();
		if((byteToSet & (1<<(iters-1)))==0)PORTB_set_pin_level(7, 0); else PORTB_set_pin_level(7, 1);
    1aec:	08 2f       	mov	r16, r24
    1aee:	10 e0       	ldi	r17, 0x00	; 0
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    1af0:	2f 98       	cbi	0x05, 7	; 5
********************************************/
void setPIRbitDN(char byteToSet){
	char iters;
	for(iters=8;iters>0;iters--){
		PORTB_set_pin_level(7, 0);
		NOP();
    1af2:	00 00       	nop
		NOP();
    1af4:	00 00       	nop
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    1af6:	2f 9a       	sbi	0x05, 7	; 5
		PORTB_set_pin_level(7, 1);
		NOP();
    1af8:	00 00       	nop
		NOP();
    1afa:	00 00       	nop
		if((byteToSet & (1<<(iters-1)))==0)PORTB_set_pin_level(7, 0); else PORTB_set_pin_level(7, 1);
    1afc:	98 01       	movw	r18, r16
    1afe:	0c 2e       	mov	r0, r28
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <setPIRbitDN+0x26>
    1b02:	35 95       	asr	r19
    1b04:	27 95       	ror	r18
    1b06:	0a 94       	dec	r0
    1b08:	e2 f7       	brpl	.-8      	; 0x1b02 <setPIRbitDN+0x22>
    1b0a:	20 fd       	sbrc	r18, 0
    1b0c:	02 c0       	rjmp	.+4      	; 0x1b12 <setPIRbitDN+0x32>
	} else {
		VPORTB.OUT &= ~(1 << pin);
    1b0e:	2f 98       	cbi	0x05, 7	; 5
    1b10:	01 c0       	rjmp	.+2      	; 0x1b14 <setPIRbitDN+0x34>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    1b12:	2f 9a       	sbi	0x05, 7	; 5
		pirSUdelay();
    1b14:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <pirSUdelay>
    1b18:	21 97       	sbiw	r28, 0x01	; 1
    1b1a:	50 f7       	brcc	.-44     	; 0x1af0 <setPIRbitDN+0x10>
	}
}
    1b1c:	df 91       	pop	r29
    1b1e:	cf 91       	pop	r28
    1b20:	1f 91       	pop	r17
    1b22:	0f 91       	pop	r16
    1b24:	08 95       	ret

00001b26 <setPIRconfigDN>:
******************************************************************************************************
******************************************************************************************************/
/*******************************************
*    PIR DOWN Set Byte
********************************************/
void setPIRconfigDN(char pirrA,char pirrB,char pirrC,char pirrD){
    1b26:	0f 93       	push	r16
    1b28:	1f 93       	push	r17
    1b2a:	cf 93       	push	r28
    1b2c:	df 93       	push	r29
    1b2e:	08 2f       	mov	r16, r24
    1b30:	16 2f       	mov	r17, r22
    1b32:	d4 2f       	mov	r29, r20
    1b34:	c2 2f       	mov	r28, r18
	} else {
		VPORTB.OUT &= ~(1 << pin);
    1b36:	2f 98       	cbi	0x05, 7	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    1b38:	27 9a       	sbi	0x04, 7	; 4
	char iters;
	PORTB_set_pin_level(7, 0);
	TPB7_set_dir(PORT_DIR_OUT);
	pirSUdelay();
    1b3a:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <pirSUdelay>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    1b3e:	2f 9a       	sbi	0x05, 7	; 5
	PORTB_set_pin_level(7, 1);
	//	pirSUdelay();
	if((pirrA & 0x01)==0)PORTB_set_pin_level(7, 0); else PORTB_set_pin_level(7, 1);
    1b40:	00 fd       	sbrc	r16, 0
    1b42:	02 c0       	rjmp	.+4      	; 0x1b48 <setPIRconfigDN+0x22>
	} else {
		VPORTB.OUT &= ~(1 << pin);
    1b44:	2f 98       	cbi	0x05, 7	; 5
    1b46:	01 c0       	rjmp	.+2      	; 0x1b4a <setPIRconfigDN+0x24>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    1b48:	2f 9a       	sbi	0x05, 7	; 5
	pirSUdelay();
    1b4a:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <pirSUdelay>
	setPIRbitDN(pirrB);
    1b4e:	81 2f       	mov	r24, r17
    1b50:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <setPIRbitDN>
	setPIRbitDN(pirrC);
    1b54:	8d 2f       	mov	r24, r29
    1b56:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <setPIRbitDN>
	setPIRbitDN(pirrD);
    1b5a:	8c 2f       	mov	r24, r28
    1b5c:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <setPIRbitDN>
}
    1b60:	df 91       	pop	r29
    1b62:	cf 91       	pop	r28
    1b64:	1f 91       	pop	r17
    1b66:	0f 91       	pop	r16
    1b68:	08 95       	ret

00001b6a <setPIRbitENT>:
	}
}
/*******************************************
*    PIR Set Bit
********************************************/
void setPIRbitENT(char byteToSet){
    1b6a:	0f 93       	push	r16
    1b6c:	1f 93       	push	r17
    1b6e:	cf 93       	push	r28
    1b70:	df 93       	push	r29
    1b72:	c7 e0       	ldi	r28, 0x07	; 7
    1b74:	d0 e0       	ldi	r29, 0x00	; 0
		NOP();
		NOP();
		PORTA_set_pin_level(2, 1);
		NOP();
		NOP();
		if((byteToSet & (1<<(iters-1)))==0)PORTA_set_pin_level(2, 0); else PORTA_set_pin_level(2, 1);
    1b76:	08 2f       	mov	r16, r24
    1b78:	10 e0       	ldi	r17, 0x00	; 0
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    1b7a:	0a 98       	cbi	0x01, 2	; 1
********************************************/
void setPIRbitENT(char byteToSet){
	char iters;
	for(iters=8;iters>0;iters--){
		PORTA_set_pin_level(2, 0);
		NOP();
    1b7c:	00 00       	nop
		NOP();
    1b7e:	00 00       	nop
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    1b80:	0a 9a       	sbi	0x01, 2	; 1
		PORTA_set_pin_level(2, 1);
		NOP();
    1b82:	00 00       	nop
		NOP();
    1b84:	00 00       	nop
		if((byteToSet & (1<<(iters-1)))==0)PORTA_set_pin_level(2, 0); else PORTA_set_pin_level(2, 1);
    1b86:	98 01       	movw	r18, r16
    1b88:	0c 2e       	mov	r0, r28
    1b8a:	02 c0       	rjmp	.+4      	; 0x1b90 <setPIRbitENT+0x26>
    1b8c:	35 95       	asr	r19
    1b8e:	27 95       	ror	r18
    1b90:	0a 94       	dec	r0
    1b92:	e2 f7       	brpl	.-8      	; 0x1b8c <setPIRbitENT+0x22>
    1b94:	20 fd       	sbrc	r18, 0
    1b96:	02 c0       	rjmp	.+4      	; 0x1b9c <setPIRbitENT+0x32>
	} else {
		VPORTA.OUT &= ~(1 << pin);
    1b98:	0a 98       	cbi	0x01, 2	; 1
    1b9a:	01 c0       	rjmp	.+2      	; 0x1b9e <setPIRbitENT+0x34>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    1b9c:	0a 9a       	sbi	0x01, 2	; 1
		pirSUdelay();
    1b9e:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <pirSUdelay>
    1ba2:	21 97       	sbiw	r28, 0x01	; 1
    1ba4:	50 f7       	brcc	.-44     	; 0x1b7a <setPIRbitENT+0x10>
	}
}
    1ba6:	df 91       	pop	r29
    1ba8:	cf 91       	pop	r28
    1baa:	1f 91       	pop	r17
    1bac:	0f 91       	pop	r16
    1bae:	08 95       	ret

00001bb0 <setPIRconfigENT>:
	setPIRbitDN(pirrD);
}
/*******************************************
*    PIR ENTRANCE Set Byte
********************************************/
void setPIRconfigENT(char pirrA,char pirrB,char pirrC,char pirrD){
    1bb0:	0f 93       	push	r16
    1bb2:	1f 93       	push	r17
    1bb4:	cf 93       	push	r28
    1bb6:	df 93       	push	r29
    1bb8:	08 2f       	mov	r16, r24
    1bba:	16 2f       	mov	r17, r22
    1bbc:	d4 2f       	mov	r29, r20
    1bbe:	c2 2f       	mov	r28, r18
	} else {
		VPORTA.OUT &= ~(1 << pin);
    1bc0:	0a 98       	cbi	0x01, 2	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    1bc2:	02 9a       	sbi	0x00, 2	; 0
	char iters;
	PORTA_set_pin_level(2, 0);
	TPA2_set_dir(PORT_DIR_OUT);
	pirSUdelay();
    1bc4:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <pirSUdelay>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    1bc8:	0a 9a       	sbi	0x01, 2	; 1
	PORTA_set_pin_level(2, 1);
	//	pirSUdelay();
	if((pirrA & 0x01)==0)PORTA_set_pin_level(2, 0); else PORTA_set_pin_level(2, 1);
    1bca:	00 fd       	sbrc	r16, 0
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <setPIRconfigENT+0x22>
	} else {
		VPORTA.OUT &= ~(1 << pin);
    1bce:	0a 98       	cbi	0x01, 2	; 1
    1bd0:	01 c0       	rjmp	.+2      	; 0x1bd4 <setPIRconfigENT+0x24>
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
    1bd2:	0a 9a       	sbi	0x01, 2	; 1
	pirSUdelay();
    1bd4:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <pirSUdelay>
	setPIRbitENT(pirrB);
    1bd8:	81 2f       	mov	r24, r17
    1bda:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <setPIRbitENT>
	setPIRbitENT(pirrC);
    1bde:	8d 2f       	mov	r24, r29
    1be0:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <setPIRbitENT>
	setPIRbitENT(pirrD);
    1be4:	8c 2f       	mov	r24, r28
    1be6:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <setPIRbitENT>
}
    1bea:	df 91       	pop	r29
    1bec:	cf 91       	pop	r28
    1bee:	1f 91       	pop	r17
    1bf0:	0f 91       	pop	r16
    1bf2:	08 95       	ret

00001bf4 <pirENDdelay>:
	for(tickCtr=PIR_SU_DELAY;tickCtr>0;tickCtr--){NOP();}
}
/*******************************************
*    PIR RX DELAY
********************************************/
void pirENDdelay (void){
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	90 e0       	ldi	r25, 0x00	; 0
	uint32_t tickCtr;
	for(tickCtr=PIR_END_DELAY;tickCtr>0;tickCtr--){NOP();}
    1bf8:	00 00       	nop
    1bfa:	01 96       	adiw	r24, 0x01	; 1
    1bfc:	8c 33       	cpi	r24, 0x3C	; 60
    1bfe:	91 05       	cpc	r25, r1
    1c00:	d9 f7       	brne	.-10     	; 0x1bf8 <pirENDdelay+0x4>
}
    1c02:	08 95       	ret

00001c04 <clearBothPIRinterrupts>:
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    1c04:	2e 98       	cbi	0x05, 6	; 5
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    1c06:	26 9a       	sbi	0x04, 6	; 4
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
    1c08:	09 98       	cbi	0x01, 1	; 1
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    1c0a:	01 9a       	sbi	0x00, 1	; 0
void clearBothPIRinterrupts(){
	PORTB_set_pin_level(6, 0);
	TPB6_set_dir(PORT_DIR_OUT);
	PORTA_set_pin_level(1, 0);
	TPA1_set_dir(PORT_DIR_OUT);
	pirENDdelay();
    1c0c:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <pirENDdelay>
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
    1c10:	26 98       	cbi	0x04, 6	; 4
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    1c12:	01 98       	cbi	0x00, 1	; 0
    1c14:	08 95       	ret

00001c16 <main>:
	char returnStr[]={0x0A,0x0D};
	int countGPStest = 0;
	int delay_ctr;
	short gotALS,gotProx;

	g_motionMinTotalDN=0;
    1c16:	10 92 0a 38 	sts	0x380A, r1	; 0x80380a <g_motionMinTotalDN>
	g_motionMinTotalENT=0;
    1c1a:	10 92 04 38 	sts	0x3804, r1	; 0x803804 <g_motionMinTotalENT>
	g_rxDataIndex=0;
	g_durCtr=DURCTR_MAX;
    1c1e:	8e ef       	ldi	r24, 0xFE	; 254
    1c20:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <_edata>
//	g_numTripZeroCtrDN=0;
	g_numTripZeroCtrENT=0;
    1c24:	10 92 08 38 	sts	0x3808, r1	; 0x803808 <g_numTripZeroCtrENT>
	g_numTrips=0;
	g_durIndexENT=DUR_INDEX;
    1c28:	8a e0       	ldi	r24, 0x0A	; 10
    1c2a:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <g_durIndexENT>
    1c2e:	ee ed       	ldi	r30, 0xDE	; 222
    1c30:	f8 e3       	ldi	r31, 0x38	; 56
    1c32:	87 ef       	ldi	r24, 0xF7	; 247
    1c34:	98 e3       	ldi	r25, 0x38	; 56

	
	for (iters=0;iters<SIZEOFGPSPARAMS;iters++)gpsParams[iters]=0;
    1c36:	11 92       	st	Z+, r1
    1c38:	e8 17       	cp	r30, r24
    1c3a:	f9 07       	cpc	r31, r25
    1c3c:	e1 f7       	brne	.-8      	; 0x1c36 <main+0x20>
	
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    1c3e:	0e 94 aa 00 	call	0x154	; 0x154 <atmel_start_init>
	CCP = 0xD8;//enable writes to WDT
    1c42:	88 ed       	ldi	r24, 0xD8	; 216
    1c44:	84 bf       	out	0x34, r24	; 52
	WDT.STATUS = 0x00;//
    1c46:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
	CCP = 0xD8;//enable writes to WDT
    1c4a:	84 bf       	out	0x34, r24	; 52

	DISABLE_INTERRUPTS();
    1c4c:	f8 94       	cli
	ccp_write_io((void*)&(CLKCTRL.OSC32KCTRLA),1 << CLKCTRL_RUNSTDBY_bp /* Run standby: enabled */);
    1c4e:	62 e0       	ldi	r22, 0x02	; 2
    1c50:	70 e0       	ldi	r23, 0x00	; 0
    1c52:	88 e7       	ldi	r24, 0x78	; 120
    1c54:	90 e0       	ldi	r25, 0x00	; 0
    1c56:	0e 94 96 11 	call	0x232c	; 0x232c <ccp_write_io>
#ifdef DO_DIAGS
	redBlink(11);
    1c5a:	8b e0       	ldi	r24, 0x0B	; 11
    1c5c:	0e 94 a9 01 	call	0x352	; 0x352 <redBlink>
#endif	
	mState=BEGIN;
    1c60:	10 92 00 39 	sts	0x3900, r1	; 0x803900 <mState>
    1c64:	c2 ec       	ldi	r28, 0xC2	; 194
    1c66:	d8 e3       	ldi	r29, 0x38	; 56
    1c68:	0e ed       	ldi	r16, 0xDE	; 222
    1c6a:	18 e3       	ldi	r17, 0x38	; 56
    1c6c:	fe 01       	movw	r30, r28
	for (iters=0;iters<SIZEOFMOTPARAMS;iters++)motParams[iters]=0x00;//
    1c6e:	11 92       	st	Z+, r1
    1c70:	e0 17       	cp	r30, r16
    1c72:	f1 07       	cpc	r31, r17
    1c74:	e1 f7       	brne	.-8      	; 0x1c6e <main+0x58>
	for (iters=0;iters<10;iters++)partialParams[iters]=0;//Initialize place holders for partial GPS loc params.
	sleepPins(1);
    1c76:	81 e0       	ldi	r24, 0x01	; 1
    1c78:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <sleepPins>
	SLPCTRL.CTRLA = 0x03;	//03=enable STANDBY SLEEP 0.0021 mA. 01=enable IDLE SLEEP  0.774 mA. 05=enable PWR DN SLEEP  0.0007 mA	but no RTC wakeup
	NOP();
	sleep_enable();
	sleep_cpu();
#endif
	WDT.CTRLA = MY_WDT;//MY_WDT;//0=disable watchdog. 0x0B=8 seconds
    1c7c:	8b e0       	ldi	r24, 0x0B	; 11
    1c7e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
#ifdef DO_DIAGS
	USART_0_initialization();
    1c82:	0e 94 57 11 	call	0x22ae	; 0x22ae <USART_0_initialization>
	USART_0_initialization();
    1c86:	0e 94 57 11 	call	0x22ae	; 0x22ae <USART_0_initialization>
#endif
	NOP();
    1c8a:	00 00       	nop
	WDT_RST();
    1c8c:	a8 95       	wdr
#ifdef DO_DIAGS
//	usart_put_string(&("HeartBeat "),10);
#endif
  }
#endif
	DISABLE_INTERRUPTS();
    1c8e:	f8 94       	cli

#ifdef DO_DIAGS
	short battVal;
   USART_0_initialization();
    1c90:	0e 94 57 11 	call	0x22ae	; 0x22ae <USART_0_initialization>
	redBlink(3);
    1c94:	83 e0       	ldi	r24, 0x03	; 3
    1c96:	0e 94 a9 01 	call	0x352	; 0x352 <redBlink>
	usart_put_string(&("\r\nBOOT TINY\r\n"),13);
    1c9a:	6d e0       	ldi	r22, 0x0D	; 13
    1c9c:	89 e2       	ldi	r24, 0x29	; 41
    1c9e:	94 ea       	ldi	r25, 0xA4	; 164
    1ca0:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <usart_put_string>
	WDT_RST();
    1ca4:	a8 95       	wdr
	delay_ms(1000);
    1ca6:	68 ee       	ldi	r22, 0xE8	; 232
    1ca8:	73 e0       	ldi	r23, 0x03	; 3
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	0e 94 92 01 	call	0x324	; 0x324 <delay_ms>
// 	}
// 	WDT_RST();
// 	delay_ms(1000);
#endif
//	usart_put_string("PAST SOLAR\r\n",12);
	DISABLE_INTERRUPTS();
    1cb2:	f8 94       	cli
	for (iters=0;iters<SIZEOFMOTPARAMS;iters++)motParams[iters]=0x00;//
    1cb4:	19 92       	st	Y+, r1
    1cb6:	c0 17       	cp	r28, r16
    1cb8:	d1 07       	cpc	r29, r17
    1cba:	e1 f7       	brne	.-8      	; 0x1cb4 <main+0x9e>
	for (iters=0;iters<10;iters++)partialParams[iters]=iters+0xF0;//Initialize place holders for partial GPS loc params.
	sleepPins(1);
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <sleepPins>
	NOP();
    1cc2:	00 00       	nop
	WDT_RST();
    1cc4:	a8 95       	wdr
	DISABLE_INTERRUPTS();
    1cc6:	f8 94       	cli

	g_sensitivityHiBit = sensitivtyAll>>8;
    1cc8:	10 92 03 39 	sts	0x3903, r1	; 0x803903 <g_sensitivityHiBit>
	g_sensitivityLoByte = (char)((sensitivtyAll&0x00FF)<<1);
    1ccc:	80 ea       	ldi	r24, 0xA0	; 160
    1cce:	80 93 ff 38 	sts	0x38FF, r24	; 0x8038ff <g_sensitivityLoByte>

 int PIRa;
 short PIRb,PIRc;
 char* lastByte;
 
	VPORTA_INTFLAGS = 0xFF;
    1cd2:	8f ef       	ldi	r24, 0xFF	; 255
    1cd4:	83 b9       	out	0x03, r24	; 3
	VPORTB_INTFLAGS = 0xFF;
    1cd6:	87 b9       	out	0x07, r24	; 7
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    1cd8:	27 9a       	sbi	0x04, 7	; 4

 /** CONFIG DOWN PIR **/
	TPB7_set_dir(PORT_DIR_OUT);
	setPIRconfigDN(g_sensitivityHiBit,g_sensitivityLoByte,0x01,0x31);//sensitivity 01,FE,00,00. Lower number is more sensitive. 0,08
    1cda:	21 e3       	ldi	r18, 0x31	; 49
    1cdc:	41 e0       	ldi	r20, 0x01	; 1
    1cde:	60 91 ff 38 	lds	r22, 0x38FF	; 0x8038ff <g_sensitivityLoByte>
    1ce2:	80 91 03 39 	lds	r24, 0x3903	; 0x803903 <g_sensitivityHiBit>
    1ce6:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <setPIRconfigDN>
	delay_ms(500);
    1cea:	64 ef       	ldi	r22, 0xF4	; 244
    1cec:	71 e0       	ldi	r23, 0x01	; 1
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	0e 94 92 01 	call	0x324	; 0x324 <delay_ms>
	setPIRconfigDN(g_sensitivityHiBit,g_sensitivityLoByte,0x01,0x31);//sensitivity 01,FE,00,00. Lower number is more sensitive. 0,08
    1cf6:	21 e3       	ldi	r18, 0x31	; 49
    1cf8:	41 e0       	ldi	r20, 0x01	; 1
    1cfa:	60 91 ff 38 	lds	r22, 0x38FF	; 0x8038ff <g_sensitivityLoByte>
    1cfe:	80 91 03 39 	lds	r24, 0x3903	; 0x803903 <g_sensitivityHiBit>
    1d02:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <setPIRconfigDN>
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    1d06:	e6 e3       	ldi	r30, 0x36	; 54
    1d08:	f4 e0       	ldi	r31, 0x04	; 4
    1d0a:	80 81       	ld	r24, Z
    1d0c:	88 7f       	andi	r24, 0xF8	; 248
    1d0e:	82 60       	ori	r24, 0x02	; 2
    1d10:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
    1d12:	02 9a       	sbi	0x00, 2	; 0
	TPB6_set_isc(PORT_ISC_RISING_gc);//Motion Switch

 /** CONFIG ENTRANCE PIR **/
	 TPA2_set_dir(PORT_DIR_OUT);
	 setPIRconfigENT(g_sensitivityHiBit,g_sensitivityLoByte,0x01,0x31);//sensitivity 01,FE,00,00. Lower number is more sensitive. 0,08
    1d14:	21 e3       	ldi	r18, 0x31	; 49
    1d16:	41 e0       	ldi	r20, 0x01	; 1
    1d18:	60 91 ff 38 	lds	r22, 0x38FF	; 0x8038ff <g_sensitivityLoByte>
    1d1c:	80 91 03 39 	lds	r24, 0x3903	; 0x803903 <g_sensitivityHiBit>
    1d20:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <setPIRconfigENT>
	 delay_ms(500);
    1d24:	64 ef       	ldi	r22, 0xF4	; 244
    1d26:	71 e0       	ldi	r23, 0x01	; 1
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	0e 94 92 01 	call	0x324	; 0x324 <delay_ms>
	 setPIRconfigENT(g_sensitivityHiBit,g_sensitivityLoByte,0x01,0x31);//sensitivity 01,FE,00,00. Lower number is more sensitive. 0,08
    1d30:	21 e3       	ldi	r18, 0x31	; 49
    1d32:	41 e0       	ldi	r20, 0x01	; 1
    1d34:	60 91 ff 38 	lds	r22, 0x38FF	; 0x8038ff <g_sensitivityLoByte>
    1d38:	80 91 03 39 	lds	r24, 0x3903	; 0x803903 <g_sensitivityHiBit>
    1d3c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <setPIRconfigENT>
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    1d40:	e1 e1       	ldi	r30, 0x11	; 17
    1d42:	f4 e0       	ldi	r31, 0x04	; 4
    1d44:	80 81       	ld	r24, Z
    1d46:	88 7f       	andi	r24, 0xF8	; 248
    1d48:	82 60       	ori	r24, 0x02	; 2
    1d4a:	80 83       	st	Z, r24
	 TPA1_set_isc(PORT_ISC_RISING_gc);//Motion Switch
	 
	 
#ifdef HAS_GPS
	mState=BEGIN;
    1d4c:	10 92 00 39 	sts	0x3900, r1	; 0x803900 <mState>
// 				LCDspace();
			
				delay_ms(15);
			#endif
			break;
		default: mState=IDLE;
    1d50:	0f 2e       	mov	r0, r31
    1d52:	f7 e0       	ldi	r31, 0x07	; 7
    1d54:	7f 2e       	mov	r7, r31
    1d56:	f0 2d       	mov	r31, r0
			if(!getGPS())mState=IDLE; //returns 0 if uBloxStatus = 41 and then got good date and time and sent to BIG
			else mState=NO_INITIAL_GPS_LONGTERM;
			break;
		case IDLE://7
 			WDT_RST();
			WDT.CTRLA = MY_WDT;//watchdog
    1d58:	a1 2c       	mov	r10, r1
    1d5a:	bb 24       	eor	r11, r11
    1d5c:	b3 94       	inc	r11
    1d5e:	0f 2e       	mov	r0, r31
    1d60:	fb e0       	ldi	r31, 0x0B	; 11
    1d62:	5f 2e       	mov	r5, r31
    1d64:	f0 2d       	mov	r31, r0
 			WDT_RST();
			clearBothPIRinterrupts();
#ifdef HAS_GPS
			if((g_rcvdCmd&0x10)==0x10){
				g_rcvdCmd=0;
				mState=GET_GPS;
    1d66:	68 94       	set
    1d68:	44 24       	eor	r4, r4
    1d6a:	41 f8       	bld	r4, 1
			if(!getGPS())mState=IDLE; //returns 0 if uBloxStatus = 41 and then got good date and time and sent to BIG
			else mState=NO_INITIAL_GPS_LONGTERM;
			break;
		case NO_INITIAL_GPS_LONGTERM://6
			if(!getGPS())mState=IDLE; //returns 0 if uBloxStatus = 41 and then got good date and time and sent to BIG
			else mState=NO_INITIAL_GPS_LONGTERM;
    1d6c:	0f 2e       	mov	r0, r31
    1d6e:	f6 e0       	ldi	r31, 0x06	; 6
    1d70:	6f 2e       	mov	r6, r31
    1d72:	f0 2d       	mov	r31, r0
			if(!getGPS())mState=IDLE; //returns 0 if uBloxStatus = 41 and then got good date and time and sent to BIG
			else mState=NO_INITIAL_GPS_B;
			break;
		case NO_INITIAL_GPS_B://4
			if(!getGPS())mState=IDLE; //returns 0 if uBloxStatus = 41 and then got good date and time and sent to BIG
			else mState=NO_INITIAL_GPS_C;
    1d74:	0f 2e       	mov	r0, r31
    1d76:	f5 e0       	ldi	r31, 0x05	; 5
    1d78:	3f 2e       	mov	r3, r31
    1d7a:	f0 2d       	mov	r31, r0
			#endif				
			mState=IDLE;
			break;
		case NO_INITIAL_GPS_A://3
			if(!getGPS())mState=IDLE; //returns 0 if uBloxStatus = 41 and then got good date and time and sent to BIG
			else mState=NO_INITIAL_GPS_B;
    1d7c:	68 94       	set
    1d7e:	22 24       	eor	r2, r2
    1d80:	22 f8       	bld	r2, 2
		case BEGIN://0
			mState=INITIAL_GPS;
			break;
		case INITIAL_GPS://
			if(!getGPS())mState=IDLE; //returns 0 if uBloxStatus = 41 and then got good date and time and sent to BIG
			else mState=NO_INITIAL_GPS_A;
    1d82:	0f 2e       	mov	r0, r31
    1d84:	f3 e0       	ldi	r31, 0x03	; 3
    1d86:	8f 2e       	mov	r8, r31
    1d88:	f0 2d       	mov	r31, r0
for(;;){
	WDT_RST();
	clearBothPIRinterrupts();
	switch(mState){
		case BEGIN://0
			mState=INITIAL_GPS;
    1d8a:	99 24       	eor	r9, r9
    1d8c:	93 94       	inc	r9
 */
static inline void PORTC_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    1d8e:	0f 2e       	mov	r0, r31
    1d90:	f1 e5       	ldi	r31, 0x51	; 81
    1d92:	ef 2e       	mov	r14, r31
    1d94:	f4 e0       	ldi	r31, 0x04	; 4
    1d96:	ff 2e       	mov	r15, r31
    1d98:	f0 2d       	mov	r31, r0
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    1d9a:	06 e3       	ldi	r16, 0x36	; 54
    1d9c:	14 e0       	ldi	r17, 0x04	; 4
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    1d9e:	c1 e1       	ldi	r28, 0x11	; 17
    1da0:	d4 e0       	ldi	r29, 0x04	; 4
	sleepPins(1);
	ENABLE_INTERRUPTS();//might not have to do this every time.
	TPC1_set_isc(PORT_ISC_LEVEL_gc);//C1=WAKEUP FROM BIG
	TPB6_set_isc(PORT_ISC_RISING_gc);	//Motion Direct Line
	TPA1_set_isc(PORT_ISC_RISING_gc);	//Motion Direct Line
	SLPCTRL.CTRLA = 0x03;	//03=enable STANDBY SLEEP 0.0021 mA. 01=enable IDLE SLEEP  0.774 mA. 05=enable PWR DN SLEEP  0.0007 mA	but no RTC wakeup
    1da2:	0f 2e       	mov	r0, r31
    1da4:	f0 e5       	ldi	r31, 0x50	; 80
    1da6:	cf 2e       	mov	r12, r31
    1da8:	d1 2c       	mov	r13, r1
    1daa:	f0 2d       	mov	r31, r0
#else
	mState=IDLE;
#endif

for(;;){
	WDT_RST();
    1dac:	a8 95       	wdr
	clearBothPIRinterrupts();
    1dae:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <clearBothPIRinterrupts>
	switch(mState){
    1db2:	e0 91 00 39 	lds	r30, 0x3900	; 0x803900 <mState>
    1db6:	8e 2f       	mov	r24, r30
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	88 30       	cpi	r24, 0x08	; 8
    1dbc:	91 05       	cpc	r25, r1
    1dbe:	08 f0       	brcs	.+2      	; 0x1dc2 <main+0x1ac>
    1dc0:	6c c0       	rjmp	.+216    	; 0x1e9a <main+0x284>
    1dc2:	fc 01       	movw	r30, r24
    1dc4:	e2 57       	subi	r30, 0x72	; 114
    1dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc8:	0c 94 90 11 	jmp	0x2320	; 0x2320 <__tablejump2__>
		case BEGIN://0
			mState=INITIAL_GPS;
    1dcc:	90 92 00 39 	sts	0x3900, r9	; 0x803900 <mState>
			break;
    1dd0:	67 c0       	rjmp	.+206    	; 0x1ea0 <main+0x28a>
		case INITIAL_GPS://
			if(!getGPS())mState=IDLE; //returns 0 if uBloxStatus = 41 and then got good date and time and sent to BIG
    1dd2:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <getGPS>
    1dd6:	89 2b       	or	r24, r25
    1dd8:	19 f4       	brne	.+6      	; 0x1de0 <main+0x1ca>
    1dda:	70 92 00 39 	sts	0x3900, r7	; 0x803900 <mState>
    1dde:	02 c0       	rjmp	.+4      	; 0x1de4 <main+0x1ce>
			else mState=NO_INITIAL_GPS_A;
    1de0:	80 92 00 39 	sts	0x3900, r8	; 0x803900 <mState>
			#ifdef DO_DIAGS
				USART_0_initialization();
    1de4:	0e 94 57 11 	call	0x22ae	; 0x22ae <USART_0_initialization>
				LCDclear();
    1de8:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCDclear>
				usart_put_string("Got Initial GPS",15);
    1dec:	6f e0       	ldi	r22, 0x0F	; 15
    1dee:	87 e3       	ldi	r24, 0x37	; 55
    1df0:	94 ea       	ldi	r25, 0xA4	; 164
    1df2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <usart_put_string>
			#endif
			break;
    1df6:	54 c0       	rjmp	.+168    	; 0x1ea0 <main+0x28a>
		case GET_GPS://2
			getGPS();
    1df8:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <getGPS>
			closeGPS();
    1dfc:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <closeGPS>
			#ifdef DO_DIAGS
				USART_0_initialization();
    1e00:	0e 94 57 11 	call	0x22ae	; 0x22ae <USART_0_initialization>
				LCDclear ();
    1e04:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <LCDclear>
				usart_put_string("GotGPS",6);
    1e08:	66 2d       	mov	r22, r6
    1e0a:	87 e4       	ldi	r24, 0x47	; 71
    1e0c:	94 ea       	ldi	r25, 0xA4	; 164
    1e0e:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <usart_put_string>
			#endif				
			mState=IDLE;
    1e12:	70 92 00 39 	sts	0x3900, r7	; 0x803900 <mState>
			break;
    1e16:	44 c0       	rjmp	.+136    	; 0x1ea0 <main+0x28a>
		case NO_INITIAL_GPS_A://3
			if(!getGPS())mState=IDLE; //returns 0 if uBloxStatus = 41 and then got good date and time and sent to BIG
    1e18:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <getGPS>
    1e1c:	89 2b       	or	r24, r25
    1e1e:	19 f4       	brne	.+6      	; 0x1e26 <main+0x210>
    1e20:	70 92 00 39 	sts	0x3900, r7	; 0x803900 <mState>
    1e24:	3d c0       	rjmp	.+122    	; 0x1ea0 <main+0x28a>
			else mState=NO_INITIAL_GPS_B;
    1e26:	20 92 00 39 	sts	0x3900, r2	; 0x803900 <mState>
    1e2a:	3a c0       	rjmp	.+116    	; 0x1ea0 <main+0x28a>
			break;
		case NO_INITIAL_GPS_B://4
			if(!getGPS())mState=IDLE; //returns 0 if uBloxStatus = 41 and then got good date and time and sent to BIG
    1e2c:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <getGPS>
    1e30:	89 2b       	or	r24, r25
    1e32:	19 f4       	brne	.+6      	; 0x1e3a <main+0x224>
    1e34:	70 92 00 39 	sts	0x3900, r7	; 0x803900 <mState>
    1e38:	33 c0       	rjmp	.+102    	; 0x1ea0 <main+0x28a>
			else mState=NO_INITIAL_GPS_C;
    1e3a:	30 92 00 39 	sts	0x3900, r3	; 0x803900 <mState>
    1e3e:	30 c0       	rjmp	.+96     	; 0x1ea0 <main+0x28a>
			break;
		case NO_INITIAL_GPS_C://5
			if(!getGPS())mState=IDLE; //returns 0 if uBloxStatus = 41 and then got good date and time and sent to BIG
    1e40:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <getGPS>
    1e44:	89 2b       	or	r24, r25
    1e46:	19 f4       	brne	.+6      	; 0x1e4e <main+0x238>
    1e48:	70 92 00 39 	sts	0x3900, r7	; 0x803900 <mState>
    1e4c:	29 c0       	rjmp	.+82     	; 0x1ea0 <main+0x28a>
			else mState=NO_INITIAL_GPS_LONGTERM;
    1e4e:	60 92 00 39 	sts	0x3900, r6	; 0x803900 <mState>
    1e52:	26 c0       	rjmp	.+76     	; 0x1ea0 <main+0x28a>
			break;
		case NO_INITIAL_GPS_LONGTERM://6
			if(!getGPS())mState=IDLE; //returns 0 if uBloxStatus = 41 and then got good date and time and sent to BIG
    1e54:	0e 94 f8 0c 	call	0x19f0	; 0x19f0 <getGPS>
    1e58:	89 2b       	or	r24, r25
    1e5a:	19 f4       	brne	.+6      	; 0x1e62 <main+0x24c>
    1e5c:	70 92 00 39 	sts	0x3900, r7	; 0x803900 <mState>
    1e60:	1f c0       	rjmp	.+62     	; 0x1ea0 <main+0x28a>
			else mState=NO_INITIAL_GPS_LONGTERM;
    1e62:	60 92 00 39 	sts	0x3900, r6	; 0x803900 <mState>
    1e66:	1c c0       	rjmp	.+56     	; 0x1ea0 <main+0x28a>
			break;
		case IDLE://7
 			WDT_RST();
    1e68:	a8 95       	wdr
			WDT.CTRLA = MY_WDT;//watchdog
    1e6a:	f5 01       	movw	r30, r10
    1e6c:	50 82       	st	Z, r5
			closeGPS();
    1e6e:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <closeGPS>
 			WDT_RST();
    1e72:	a8 95       	wdr
			clearBothPIRinterrupts();
    1e74:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <clearBothPIRinterrupts>
#ifdef HAS_GPS
			if((g_rcvdCmd&0x10)==0x10){
    1e78:	80 91 fa 38 	lds	r24, 0x38FA	; 0x8038fa <g_rcvdCmd>
    1e7c:	84 ff       	sbrs	r24, 4
    1e7e:	04 c0       	rjmp	.+8      	; 0x1e88 <main+0x272>
				g_rcvdCmd=0;
    1e80:	10 92 fa 38 	sts	0x38FA, r1	; 0x8038fa <g_rcvdCmd>
				mState=GET_GPS;
    1e84:	40 92 00 39 	sts	0x3900, r4	; 0x803900 <mState>
				}
#endif				
			#ifdef DO_DIAGS
				USART_0_initialization();
    1e88:	0e 94 57 11 	call	0x22ae	; 0x22ae <USART_0_initialization>
//				char battv = getBatt();The VREF for getBatt() can mess up kill current after a handoff to Big
//				usart_put_string("IDLE ",5);
// 				LCDshort(battv,2);
// 				LCDspace();
			
				delay_ms(15);
    1e8c:	6f e0       	ldi	r22, 0x0F	; 15
    1e8e:	70 e0       	ldi	r23, 0x00	; 0
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	0e 94 92 01 	call	0x324	; 0x324 <delay_ms>
			#endif
			break;
    1e98:	03 c0       	rjmp	.+6      	; 0x1ea0 <main+0x28a>
		default: mState=IDLE;
    1e9a:	70 92 00 39 	sts	0x3900, r7	; 0x803900 <mState>
 			WDT_RST();
    1e9e:	a8 95       	wdr
			break;
	}
	sleepPins(1);
    1ea0:	89 2d       	mov	r24, r9
    1ea2:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <sleepPins>
	ENABLE_INTERRUPTS();//might not have to do this every time.
    1ea6:	78 94       	sei
 */
static inline void PORTC_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    1ea8:	f7 01       	movw	r30, r14
    1eaa:	80 81       	ld	r24, Z
    1eac:	88 7f       	andi	r24, 0xF8	; 248
    1eae:	85 60       	ori	r24, 0x05	; 5
    1eb0:	80 83       	st	Z, r24
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    1eb2:	f8 01       	movw	r30, r16
    1eb4:	80 81       	ld	r24, Z
    1eb6:	88 7f       	andi	r24, 0xF8	; 248
    1eb8:	82 60       	ori	r24, 0x02	; 2
    1eba:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    1ebc:	88 81       	ld	r24, Y
    1ebe:	88 7f       	andi	r24, 0xF8	; 248
    1ec0:	82 60       	ori	r24, 0x02	; 2
    1ec2:	88 83       	st	Y, r24
	TPC1_set_isc(PORT_ISC_LEVEL_gc);//C1=WAKEUP FROM BIG
	TPB6_set_isc(PORT_ISC_RISING_gc);	//Motion Direct Line
	TPA1_set_isc(PORT_ISC_RISING_gc);	//Motion Direct Line
	SLPCTRL.CTRLA = 0x03;	//03=enable STANDBY SLEEP 0.0021 mA. 01=enable IDLE SLEEP  0.774 mA. 05=enable PWR DN SLEEP  0.0007 mA	but no RTC wakeup
    1ec4:	f6 01       	movw	r30, r12
    1ec6:	80 82       	st	Z, r8
	NOP();
    1ec8:	00 00       	nop
	SLEEP();
    1eca:	88 95       	sleep
}
    1ecc:	6f cf       	rjmp	.-290    	; 0x1dac <main+0x196>

00001ece <__vector_13>:
***********************************************************************
***********************************************************************/
/***********************************************************************
*  ISR TCB0 Timer for Prox PWM capture
***********************************************************************/
ISR(TCB0_INT_vect){
    1ece:	1f 92       	push	r1
    1ed0:	0f 92       	push	r0
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	0f 92       	push	r0
    1ed6:	11 24       	eor	r1, r1
    1ed8:	8f 93       	push	r24
    1eda:	9f 93       	push	r25
	short dumb;
		dumb=TCB0_CCMP;
    1edc:	80 91 4c 0a 	lds	r24, 0x0A4C	; 0x800a4c <__TEXT_REGION_LENGTH__+0x700a4c>
    1ee0:	90 91 4d 0a 	lds	r25, 0x0A4D	; 0x800a4d <__TEXT_REGION_LENGTH__+0x700a4d>
// 		TCB0_INTCTRL = 0x01;//Enable capture interrupt flag
// 		TCB0_EVCTRL = 0x11;//Enable Captu
}
    1ee4:	9f 91       	pop	r25
    1ee6:	8f 91       	pop	r24
    1ee8:	0f 90       	pop	r0
    1eea:	0f be       	out	0x3f, r0	; 63
    1eec:	0f 90       	pop	r0
    1eee:	1f 90       	pop	r1
    1ef0:	18 95       	reti

00001ef2 <__vector_5>:
/***********************************************************************
*  ISR WAKEUP FROM BIG
***********************************************************************/
//	APRIL 2, 2020: THERE CAN BE A 30ms DELAY RESPONDING TO THE INTERRUPT FROM BIG BECAUSE TINY IS BUSY WITH RTC-PIT INTERRUPT
ISR(PORTC_PORT_vect){
    1ef2:	1f 92       	push	r1
    1ef4:	0f 92       	push	r0
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	0f 92       	push	r0
    1efa:	11 24       	eor	r1, r1
    1efc:	2f 93       	push	r18
    1efe:	3f 93       	push	r19
    1f00:	4f 93       	push	r20
    1f02:	5f 93       	push	r21
    1f04:	6f 93       	push	r22
    1f06:	7f 93       	push	r23
    1f08:	8f 93       	push	r24
    1f0a:	9f 93       	push	r25
    1f0c:	af 93       	push	r26
    1f0e:	bf 93       	push	r27
    1f10:	ef 93       	push	r30
    1f12:	ff 93       	push	r31
	DISABLE_INTERRUPTS();
    1f14:	f8 94       	cli
 */
static inline void PORTC_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    1f16:	e1 e5       	ldi	r30, 0x51	; 81
    1f18:	f4 e0       	ldi	r31, 0x04	; 4
    1f1a:	80 81       	ld	r24, Z
    1f1c:	88 7f       	andi	r24, 0xF8	; 248
    1f1e:	80 83       	st	Z, r24
	TPC1_set_isc(PORT_ISC_INTDISABLE_gc);//C1=WAKEUP FROM BIG
	PORTC.INTFLAGS |= (1 << 1);
    1f20:	e0 e4       	ldi	r30, 0x40	; 64
    1f22:	f4 e0       	ldi	r31, 0x04	; 4
    1f24:	81 85       	ldd	r24, Z+9	; 0x09
    1f26:	82 60       	ori	r24, 0x02	; 2
    1f28:	81 87       	std	Z+9, r24	; 0x09
	char gotCmd;
	char iters;
	
	if(mState!=SOLAR_WAIT)gotCmd=getPacketFromBig();
    1f2a:	80 91 00 39 	lds	r24, 0x3900	; 0x803900 <mState>
    1f2e:	88 30       	cpi	r24, 0x08	; 8
    1f30:	11 f0       	breq	.+4      	; 0x1f36 <__vector_5+0x44>
    1f32:	0e 94 0d 0a 	call	0x141a	; 0x141a <getPacketFromBig>
	PORTC.INTFLAGS |= (1 << 1);
    1f36:	e0 e4       	ldi	r30, 0x40	; 64
    1f38:	f4 e0       	ldi	r31, 0x04	; 4
    1f3a:	81 85       	ldd	r24, Z+9	; 0x09
    1f3c:	82 60       	ori	r24, 0x02	; 2
    1f3e:	81 87       	std	Z+9, r24	; 0x09
	if(mState==IDLE){
    1f40:	80 91 00 39 	lds	r24, 0x3900	; 0x803900 <mState>
    1f44:	87 30       	cpi	r24, 0x07	; 7
    1f46:	31 f4       	brne	.+12     	; 0x1f54 <__vector_5+0x62>
		sleepPins(1);//
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <sleepPins>
		sleepPins(1);//
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <sleepPins>
	}
	WDT_RST();//
    1f54:	a8 95       	wdr
    1f56:	e1 e5       	ldi	r30, 0x51	; 81
    1f58:	f4 e0       	ldi	r31, 0x04	; 4
    1f5a:	80 81       	ld	r24, Z
    1f5c:	88 7f       	andi	r24, 0xF8	; 248
    1f5e:	85 60       	ori	r24, 0x05	; 5
    1f60:	80 83       	st	Z, r24
	TPC1_set_isc(PORT_ISC_LEVEL_gc);//C1=WAKEUP FROM BIG
	ENABLE_INTERRUPTS();
    1f62:	78 94       	sei
}
    1f64:	ff 91       	pop	r31
    1f66:	ef 91       	pop	r30
    1f68:	bf 91       	pop	r27
    1f6a:	af 91       	pop	r26
    1f6c:	9f 91       	pop	r25
    1f6e:	8f 91       	pop	r24
    1f70:	7f 91       	pop	r23
    1f72:	6f 91       	pop	r22
    1f74:	5f 91       	pop	r21
    1f76:	4f 91       	pop	r20
    1f78:	3f 91       	pop	r19
    1f7a:	2f 91       	pop	r18
    1f7c:	0f 90       	pop	r0
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	0f 90       	pop	r0
    1f82:	1f 90       	pop	r1
    1f84:	18 95       	reti

00001f86 <__vector_27>:
/***********************************************************************
*  ISR USART RX
***********************************************************************/
ISR(USART0_RXC_vect){
    1f86:	1f 92       	push	r1
    1f88:	0f 92       	push	r0
    1f8a:	0f b6       	in	r0, 0x3f	; 63
    1f8c:	0f 92       	push	r0
    1f8e:	11 24       	eor	r1, r1
    1f90:	8f 93       	push	r24
    1f92:	9f 93       	push	r25
    1f94:	ef 93       	push	r30
    1f96:	ff 93       	push	r31
	if(p_GPSrcvData>=(g_GPSrcv_buffer+GPS_BUFFER_SIZE))p_GPSrcvData=g_GPSrcv_buffer+GPS_BUFFER_SIZE-1;
    1f98:	e0 91 01 39 	lds	r30, 0x3901	; 0x803901 <p_GPSrcvData>
    1f9c:	f0 91 02 39 	lds	r31, 0x3902	; 0x803902 <p_GPSrcvData+0x1>
    1fa0:	88 e3       	ldi	r24, 0x38	; 56
    1fa2:	e2 3c       	cpi	r30, 0xC2	; 194
    1fa4:	f8 07       	cpc	r31, r24
    1fa6:	d8 f0       	brcs	.+54     	; 0x1fde <__vector_27+0x58>
    1fa8:	81 ec       	ldi	r24, 0xC1	; 193
    1faa:	98 e3       	ldi	r25, 0x38	; 56
    1fac:	80 93 01 39 	sts	0x3901, r24	; 0x803901 <p_GPSrcvData>
    1fb0:	90 93 02 39 	sts	0x3902, r25	; 0x803902 <p_GPSrcvData+0x1>
	if((p_GPSrcvData>=g_GPSrcv_buffer)&&(p_GPSrcvData<g_GPSrcv_buffer+GPS_BUFFER_SIZE))
    1fb4:	fc 01       	movw	r30, r24
		*p_GPSrcvData=USART0.RXDATAL;
    1fb6:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
    1fba:	80 83       	st	Z, r24
		if(USART0.RXDATAL==0x0A)endOfLineFlag=1;
    1fbc:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
    1fc0:	8a 30       	cpi	r24, 0x0A	; 10
    1fc2:	19 f4       	brne	.+6      	; 0x1fca <__vector_27+0x44>
    1fc4:	81 e0       	ldi	r24, 0x01	; 1
    1fc6:	80 93 f9 38 	sts	0x38F9, r24	; 0x8038f9 <endOfLineFlag>
	p_GPSrcvData++;
    1fca:	80 91 01 39 	lds	r24, 0x3901	; 0x803901 <p_GPSrcvData>
    1fce:	90 91 02 39 	lds	r25, 0x3902	; 0x803902 <p_GPSrcvData+0x1>
    1fd2:	01 96       	adiw	r24, 0x01	; 1
    1fd4:	80 93 01 39 	sts	0x3901, r24	; 0x803901 <p_GPSrcvData>
    1fd8:	90 93 02 39 	sts	0x3902, r25	; 0x803902 <p_GPSrcvData+0x1>
}
    1fdc:	05 c0       	rjmp	.+10     	; 0x1fe8 <__vector_27+0x62>
/***********************************************************************
*  ISR USART RX
***********************************************************************/
ISR(USART0_RXC_vect){
	if(p_GPSrcvData>=(g_GPSrcv_buffer+GPS_BUFFER_SIZE))p_GPSrcvData=g_GPSrcv_buffer+GPS_BUFFER_SIZE-1;
	if((p_GPSrcvData>=g_GPSrcv_buffer)&&(p_GPSrcvData<g_GPSrcv_buffer+GPS_BUFFER_SIZE))
    1fde:	88 e3       	ldi	r24, 0x38	; 56
    1fe0:	ec 30       	cpi	r30, 0x0C	; 12
    1fe2:	f8 07       	cpc	r31, r24
    1fe4:	58 f3       	brcs	.-42     	; 0x1fbc <__vector_27+0x36>
    1fe6:	e7 cf       	rjmp	.-50     	; 0x1fb6 <__vector_27+0x30>
		*p_GPSrcvData=USART0.RXDATAL;
		if(USART0.RXDATAL==0x0A)endOfLineFlag=1;
	p_GPSrcvData++;
}
    1fe8:	ff 91       	pop	r31
    1fea:	ef 91       	pop	r30
    1fec:	9f 91       	pop	r25
    1fee:	8f 91       	pop	r24
    1ff0:	0f 90       	pop	r0
    1ff2:	0f be       	out	0x3f, r0	; 63
    1ff4:	0f 90       	pop	r0
    1ff6:	1f 90       	pop	r1
    1ff8:	18 95       	reti

00001ffa <__vector_4>:
/***********************************************************************
*  ISR DOWN MOTION
***********************************************************************/
ISR(PORTB_PORT_vect){
    1ffa:	1f 92       	push	r1
    1ffc:	0f 92       	push	r0
    1ffe:	0f b6       	in	r0, 0x3f	; 63
    2000:	0f 92       	push	r0
    2002:	11 24       	eor	r1, r1
    2004:	8f 93       	push	r24
    2006:	ef 93       	push	r30
    2008:	ff 93       	push	r31
	// B6 is Motion
	WDT_RST();//
    200a:	a8 95       	wdr
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
    200c:	26 98       	cbi	0x04, 6	; 4
// 		motParams[NUM_TRIPS_INDEX]++;
// 		g_durCtr=0;
// 	}
//	g_numTripZeroCtrDN=0;
	TPB6_set_dir(PORT_DIR_IN);
	g_gotMotionDN=1;
    200e:	81 e0       	ldi	r24, 0x01	; 1
    2010:	80 93 0b 38 	sts	0x380B, r24	; 0x80380b <g_gotMotionDN>
	PORTB.INTFLAGS |= (1 << 6);
    2014:	e0 e2       	ldi	r30, 0x20	; 32
    2016:	f4 e0       	ldi	r31, 0x04	; 4
    2018:	81 85       	ldd	r24, Z+9	; 0x09
    201a:	80 64       	ori	r24, 0x40	; 64
    201c:	81 87       	std	Z+9, r24	; 0x09
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    201e:	e6 e3       	ldi	r30, 0x36	; 54
    2020:	f4 e0       	ldi	r31, 0x04	; 4
    2022:	80 81       	ld	r24, Z
    2024:	88 7f       	andi	r24, 0xF8	; 248
    2026:	80 83       	st	Z, r24
	TPB6_set_isc(PORT_ISC_INTDISABLE_gc);
}
    2028:	ff 91       	pop	r31
    202a:	ef 91       	pop	r30
    202c:	8f 91       	pop	r24
    202e:	0f 90       	pop	r0
    2030:	0f be       	out	0x3f, r0	; 63
    2032:	0f 90       	pop	r0
    2034:	1f 90       	pop	r1
    2036:	18 95       	reti

00002038 <__vector_3>:
/***********************************************************************
*  ISR ENTRANCE MOTION
***********************************************************************/
ISR(PORTA_PORT_vect){
    2038:	1f 92       	push	r1
    203a:	0f 92       	push	r0
    203c:	0f b6       	in	r0, 0x3f	; 63
    203e:	0f 92       	push	r0
    2040:	11 24       	eor	r1, r1
    2042:	8f 93       	push	r24
    2044:	ef 93       	push	r30
    2046:	ff 93       	push	r31
	// A1 is Motion
	WDT_RST();//
    2048:	a8 95       	wdr
	if(!g_tripFlagENT){
    204a:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <g_tripFlagENT>
    204e:	81 11       	cpse	r24, r1
    2050:	0a c0       	rjmp	.+20     	; 0x2066 <__vector_3+0x2e>
		g_tripFlagENT=1;
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	80 93 07 38 	sts	0x3807, r24	; 0x803807 <g_tripFlagENT>
		motParams[NUM_TRIPS_INDEX]++;
    2058:	e2 ec       	ldi	r30, 0xC2	; 194
    205a:	f8 e3       	ldi	r31, 0x38	; 56
    205c:	86 89       	ldd	r24, Z+22	; 0x16
    205e:	8f 5f       	subi	r24, 0xFF	; 255
    2060:	86 8b       	std	Z+22, r24	; 0x16
		g_durCtr=0;
    2062:	10 92 00 38 	sts	0x3800, r1	; 0x803800 <_edata>
	}
	g_numTripZeroCtrENT=0;
    2066:	10 92 08 38 	sts	0x3808, r1	; 0x803808 <g_numTripZeroCtrENT>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    206a:	01 98       	cbi	0x00, 1	; 0
	TPA1_set_dir(PORT_DIR_IN);
	g_gotMotionENT=1;
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	80 93 09 38 	sts	0x3809, r24	; 0x803809 <g_gotMotionENT>
	PORTA.INTFLAGS |= (1 << 1);
    2072:	e0 e0       	ldi	r30, 0x00	; 0
    2074:	f4 e0       	ldi	r31, 0x04	; 4
    2076:	81 85       	ldd	r24, Z+9	; 0x09
    2078:	82 60       	ori	r24, 0x02	; 2
    207a:	81 87       	std	Z+9, r24	; 0x09
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    207c:	e1 e1       	ldi	r30, 0x11	; 17
    207e:	f4 e0       	ldi	r31, 0x04	; 4
    2080:	80 81       	ld	r24, Z
    2082:	88 7f       	andi	r24, 0xF8	; 248
    2084:	80 83       	st	Z, r24
	TPA1_set_isc(PORT_ISC_INTDISABLE_gc);
}
    2086:	ff 91       	pop	r31
    2088:	ef 91       	pop	r30
    208a:	8f 91       	pop	r24
    208c:	0f 90       	pop	r0
    208e:	0f be       	out	0x3f, r0	; 63
    2090:	0f 90       	pop	r0
    2092:	1f 90       	pop	r1
    2094:	18 95       	reti

00002096 <__vector_7>:
/***********************************************************************
*  ISR PIT (RTC)  
*  BAD COMMS FROM BIG HIT WHEN TINY IS BUSY WITH THIS RTC-PIT INTERRUPT WHEN INTERRUPT FROM BIG HITS. RTC-PIT INTERRUPT ROUTINE TAKES ABOUT 30ms.
***********************************************************************/
ISR(RTC_PIT_vect)
{
    2096:	1f 92       	push	r1
    2098:	0f 92       	push	r0
    209a:	0f b6       	in	r0, 0x3f	; 63
    209c:	0f 92       	push	r0
    209e:	11 24       	eor	r1, r1
    20a0:	2f 93       	push	r18
    20a2:	3f 93       	push	r19
    20a4:	4f 93       	push	r20
    20a6:	5f 93       	push	r21
    20a8:	6f 93       	push	r22
    20aa:	7f 93       	push	r23
    20ac:	8f 93       	push	r24
    20ae:	9f 93       	push	r25
    20b0:	af 93       	push	r26
    20b2:	bf 93       	push	r27
    20b4:	ef 93       	push	r30
    20b6:	ff 93       	push	r31
	char iters;

	WDT_RST();//seems to require this one. Not sure why the main loop doesn't take care of it.
    20b8:	a8 95       	wdr
	if((g_tripFlagENT)&&(g_durCtr!=DURCTR_MAX))g_durCtr++;
    20ba:	80 91 07 38 	lds	r24, 0x3807	; 0x803807 <g_tripFlagENT>
    20be:	88 23       	and	r24, r24
    20c0:	39 f0       	breq	.+14     	; 0x20d0 <__vector_7+0x3a>
    20c2:	80 91 00 38 	lds	r24, 0x3800	; 0x803800 <_edata>
    20c6:	8e 3f       	cpi	r24, 0xFE	; 254
    20c8:	19 f0       	breq	.+6      	; 0x20d0 <__vector_7+0x3a>
    20ca:	8f 5f       	subi	r24, 0xFF	; 255
    20cc:	80 93 00 38 	sts	0x3800, r24	; 0x803800 <_edata>
#ifdef DO_DIAGS
	USART_0_initialization();
    20d0:	0e 94 57 11 	call	0x22ae	; 0x22ae <USART_0_initialization>
	USART_0_initialization();
    20d4:	0e 94 57 11 	call	0x22ae	; 0x22ae <USART_0_initialization>
	if(g_gotMotionDN) usart_put_string("1",1);
    20d8:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <g_gotMotionDN>
    20dc:	88 23       	and	r24, r24
    20de:	31 f0       	breq	.+12     	; 0x20ec <__vector_7+0x56>
    20e0:	61 e0       	ldi	r22, 0x01	; 1
    20e2:	8e e4       	ldi	r24, 0x4E	; 78
    20e4:	94 ea       	ldi	r25, 0xA4	; 164
    20e6:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <usart_put_string>
    20ea:	05 c0       	rjmp	.+10     	; 0x20f6 <__vector_7+0x60>
	else usart_put_string("0",1);
    20ec:	61 e0       	ldi	r22, 0x01	; 1
    20ee:	80 e5       	ldi	r24, 0x50	; 80
    20f0:	94 ea       	ldi	r25, 0xA4	; 164
    20f2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <usart_put_string>
	if(g_gotMotionENT) usart_put_string("2",1);
    20f6:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <g_gotMotionENT>
    20fa:	88 23       	and	r24, r24
    20fc:	31 f0       	breq	.+12     	; 0x210a <__vector_7+0x74>
    20fe:	61 e0       	ldi	r22, 0x01	; 1
    2100:	82 e5       	ldi	r24, 0x52	; 82
    2102:	94 ea       	ldi	r25, 0xA4	; 164
    2104:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <usart_put_string>
    2108:	05 c0       	rjmp	.+10     	; 0x2114 <__vector_7+0x7e>
	else usart_put_string("0",1);
    210a:	61 e0       	ldi	r22, 0x01	; 1
    210c:	80 e5       	ldi	r24, 0x50	; 80
    210e:	94 ea       	ldi	r25, 0xA4	; 164
    2110:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <usart_put_string>
	delay_ms(30);
    2114:	6e e1       	ldi	r22, 0x1E	; 30
    2116:	70 e0       	ldi	r23, 0x00	; 0
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	0e 94 92 01 	call	0x324	; 0x324 <delay_ms>
#endif
	if(g_motSecCtrENT>59)g_holdForBigFlag--;
    2120:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <g_motSecCtrENT>
    2124:	8c 33       	cpi	r24, 0x3C	; 60
    2126:	28 f0       	brcs	.+10     	; 0x2132 <__vector_7+0x9c>
    2128:	90 91 01 38 	lds	r25, 0x3801	; 0x803801 <g_holdForBigFlag>
    212c:	91 50       	subi	r25, 0x01	; 1
    212e:	90 93 01 38 	sts	0x3801, r25	; 0x803801 <g_holdForBigFlag>
	if((++g_motSecCtrENT>59)&&(g_holdForBigFlag<5)){
    2132:	8f 5f       	subi	r24, 0xFF	; 255
    2134:	80 93 06 38 	sts	0x3806, r24	; 0x803806 <g_motSecCtrENT>
    2138:	8c 33       	cpi	r24, 0x3C	; 60
    213a:	98 f0       	brcs	.+38     	; 0x2162 <__vector_7+0xcc>
    213c:	80 91 01 38 	lds	r24, 0x3801	; 0x803801 <g_holdForBigFlag>
    2140:	85 30       	cpi	r24, 0x05	; 5
    2142:	78 f4       	brcc	.+30     	; 0x2162 <__vector_7+0xcc>
		g_holdForBigFlag=58;//reset for one minute of holding data before giving up on Big and restarting anyway.
    2144:	8a e3       	ldi	r24, 0x3A	; 58
    2146:	80 93 01 38 	sts	0x3801, r24	; 0x803801 <g_holdForBigFlag>
		g_noMotionFlagENT=1;
		g_motSecCtrENT=0;
    214a:	10 92 06 38 	sts	0x3806, r1	; 0x803806 <g_motSecCtrENT>
		g_durIndexENT=DUR_INDEX;
    214e:	8a e0       	ldi	r24, 0x0A	; 10
    2150:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <g_durIndexENT>
		g_motionPatternIndexENT=MOTION_INDEX;//1 because the raw motion patterns go into motParams[1..8]
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <g_motionPatternIndexENT>
		g_motionPatternMaskENT=0x80;
    215a:	80 e8       	ldi	r24, 0x80	; 128
    215c:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <g_motionPatternMaskENT>
    2160:	15 c0       	rjmp	.+42     	; 0x218c <__vector_7+0xf6>
		}else{
		g_motionPatternMaskENT>>=1;
    2162:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <g_motionPatternMaskENT>
    2166:	86 95       	lsr	r24
		if(g_motionPatternMaskENT==0){
    2168:	19 f0       	breq	.+6      	; 0x2170 <__vector_7+0xda>
		g_motSecCtrENT=0;
		g_durIndexENT=DUR_INDEX;
		g_motionPatternIndexENT=MOTION_INDEX;//1 because the raw motion patterns go into motParams[1..8]
		g_motionPatternMaskENT=0x80;
		}else{
		g_motionPatternMaskENT>>=1;
    216a:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <g_motionPatternMaskENT>
    216e:	0e c0       	rjmp	.+28     	; 0x218c <__vector_7+0xf6>
		if(g_motionPatternMaskENT==0){
			g_motionPatternMaskENT=0x80;
    2170:	80 e8       	ldi	r24, 0x80	; 128
    2172:	80 93 02 38 	sts	0x3802, r24	; 0x803802 <g_motionPatternMaskENT>
			if(++g_motionPatternIndexENT>8)g_motionPatternIndexENT=1;
    2176:	80 91 03 38 	lds	r24, 0x3803	; 0x803803 <g_motionPatternIndexENT>
    217a:	8f 5f       	subi	r24, 0xFF	; 255
    217c:	89 30       	cpi	r24, 0x09	; 9
    217e:	18 f4       	brcc	.+6      	; 0x2186 <__vector_7+0xf0>
    2180:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <g_motionPatternIndexENT>
    2184:	03 c0       	rjmp	.+6      	; 0x218c <__vector_7+0xf6>
    2186:	81 e0       	ldi	r24, 0x01	; 1
    2188:	80 93 03 38 	sts	0x3803, r24	; 0x803803 <g_motionPatternIndexENT>
		}
	}//end of <59 or >59

	if(g_gotMotionDN){
    218c:	80 91 0b 38 	lds	r24, 0x380B	; 0x80380b <g_gotMotionDN>
    2190:	88 23       	and	r24, r24
    2192:	29 f0       	breq	.+10     	; 0x219e <__vector_7+0x108>
//		g_noMotionFlagDN=0;
		g_motionMinTotalDN++;
    2194:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <g_motionMinTotalDN>
    2198:	8f 5f       	subi	r24, 0xFF	; 255
    219a:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <g_motionMinTotalDN>
// 			g_durCtr=DURCTR_MAX;
// 			g_durIndexDN++;
// 		}
	}

	if(g_gotMotionENT){
    219e:	80 91 09 38 	lds	r24, 0x3809	; 0x803809 <g_gotMotionENT>
    21a2:	88 23       	and	r24, r24
    21a4:	a1 f0       	breq	.+40     	; 0x21ce <__vector_7+0x138>
		g_noMotionFlagENT=0;
		g_motionMinTotalENT++;
    21a6:	80 91 04 38 	lds	r24, 0x3804	; 0x803804 <g_motionMinTotalENT>
    21aa:	8f 5f       	subi	r24, 0xFF	; 255
    21ac:	80 93 04 38 	sts	0x3804, r24	; 0x803804 <g_motionMinTotalENT>
		if(g_motSecCtrENT<60)motParams[g_motionPatternIndexENT]|=g_motionPatternMaskENT;
    21b0:	80 91 06 38 	lds	r24, 0x3806	; 0x803806 <g_motSecCtrENT>
    21b4:	8c 33       	cpi	r24, 0x3C	; 60
    21b6:	50 f5       	brcc	.+84     	; 0x220c <__vector_7+0x176>
    21b8:	e0 91 03 38 	lds	r30, 0x3803	; 0x803803 <g_motionPatternIndexENT>
    21bc:	f0 e0       	ldi	r31, 0x00	; 0
    21be:	ee 53       	subi	r30, 0x3E	; 62
    21c0:	f7 4c       	sbci	r31, 0xC7	; 199
    21c2:	90 81       	ld	r25, Z
    21c4:	80 91 02 38 	lds	r24, 0x3802	; 0x803802 <g_motionPatternMaskENT>
    21c8:	89 2b       	or	r24, r25
    21ca:	80 83       	st	Z, r24
    21cc:	1f c0       	rjmp	.+62     	; 0x220c <__vector_7+0x176>

		}else{
		g_numTripZeroCtrENT++;
    21ce:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <g_numTripZeroCtrENT>
    21d2:	8f 5f       	subi	r24, 0xFF	; 255
    21d4:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <g_numTripZeroCtrENT>
		if(g_numTripZeroCtrENT>100)g_numTripZeroCtrENT=100;
    21d8:	85 36       	cpi	r24, 0x65	; 101
    21da:	20 f0       	brcs	.+8      	; 0x21e4 <__vector_7+0x14e>
    21dc:	84 e6       	ldi	r24, 0x64	; 100
    21de:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <g_numTripZeroCtrENT>
    21e2:	14 c0       	rjmp	.+40     	; 0x220c <__vector_7+0x176>
		if(g_numTripZeroCtrENT==NUMMOTSECS_BETWEEN_TRIPS){
    21e4:	85 30       	cpi	r24, 0x05	; 5
    21e6:	91 f4       	brne	.+36     	; 0x220c <__vector_7+0x176>
			motParams[g_durIndexENT]=g_durCtr-NUMMOTSECS_BETWEEN_TRIPS;
    21e8:	80 91 05 38 	lds	r24, 0x3805	; 0x803805 <g_durIndexENT>
    21ec:	e8 2f       	mov	r30, r24
    21ee:	f0 e0       	ldi	r31, 0x00	; 0
    21f0:	ee 53       	subi	r30, 0x3E	; 62
    21f2:	f7 4c       	sbci	r31, 0xC7	; 199
    21f4:	90 91 00 38 	lds	r25, 0x3800	; 0x803800 <_edata>
    21f8:	95 50       	subi	r25, 0x05	; 5
    21fa:	90 83       	st	Z, r25
			g_tripFlagENT=0;
    21fc:	10 92 07 38 	sts	0x3807, r1	; 0x803807 <g_tripFlagENT>
			g_durCtr=DURCTR_MAX;
    2200:	9e ef       	ldi	r25, 0xFE	; 254
    2202:	90 93 00 38 	sts	0x3800, r25	; 0x803800 <_edata>
			g_durIndexENT++;
    2206:	8f 5f       	subi	r24, 0xFF	; 255
    2208:	80 93 05 38 	sts	0x3805, r24	; 0x803805 <g_durIndexENT>
		}
	}
	clearBothPIRinterrupts();//PIR DL line (interrupts) can get stuck high if not acknowledged by a pull low.	
    220c:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <clearBothPIRinterrupts>
	/* Overflow interrupt flag has to be cleared manually */
	g_gotMotionDN=0;
    2210:	10 92 0b 38 	sts	0x380B, r1	; 0x80380b <g_gotMotionDN>
	g_gotMotionENT=0;
    2214:	10 92 09 38 	sts	0x3809, r1	; 0x803809 <g_gotMotionENT>
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    2218:	e6 e3       	ldi	r30, 0x36	; 54
    221a:	f4 e0       	ldi	r31, 0x04	; 4
    221c:	80 81       	ld	r24, Z
    221e:	88 7f       	andi	r24, 0xF8	; 248
    2220:	82 60       	ori	r24, 0x02	; 2
    2222:	80 83       	st	Z, r24
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    2224:	e1 e1       	ldi	r30, 0x11	; 17
    2226:	f4 e0       	ldi	r31, 0x04	; 4
    2228:	80 81       	ld	r24, Z
    222a:	88 7f       	andi	r24, 0xF8	; 248
    222c:	82 60       	ori	r24, 0x02	; 2
    222e:	80 83       	st	Z, r24
	TPB6_set_isc(PORT_ISC_RISING_gc);
	TPA1_set_isc(PORT_ISC_RISING_gc);
	RTC.PITINTFLAGS = 1;
    2230:	81 e0       	ldi	r24, 0x01	; 1
    2232:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x700153>
}
    2236:	ff 91       	pop	r31
    2238:	ef 91       	pop	r30
    223a:	bf 91       	pop	r27
    223c:	af 91       	pop	r26
    223e:	9f 91       	pop	r25
    2240:	8f 91       	pop	r24
    2242:	7f 91       	pop	r23
    2244:	6f 91       	pop	r22
    2246:	5f 91       	pop	r21
    2248:	4f 91       	pop	r20
    224a:	3f 91       	pop	r19
    224c:	2f 91       	pop	r18
    224e:	0f 90       	pop	r0
    2250:	0f be       	out	0x3f, r0	; 63
    2252:	0f 90       	pop	r0
    2254:	1f 90       	pop	r1
    2256:	18 95       	reti

00002258 <BOD_init>:
	//		 | BOD_VLMCFG_ABOVE_gc; /* Interrupt when supply goes above VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
    2258:	80 e0       	ldi	r24, 0x00	; 0
    225a:	08 95       	ret

0000225c <CLKCTRL_init>:
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
	protected_write_io(addr, CCP_IOREG_gc, value);
    225c:	42 e0       	ldi	r20, 0x02	; 2
    225e:	68 ed       	ldi	r22, 0xD8	; 216
    2260:	88 e7       	ldi	r24, 0x78	; 120
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	0e 94 71 11 	call	0x22e2	; 0x22e2 <protected_write_io>
    2268:	40 e0       	ldi	r20, 0x00	; 0
    226a:	68 ed       	ldi	r22, 0xD8	; 216
    226c:	80 e7       	ldi	r24, 0x70	; 112
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	0e 94 71 11 	call	0x22e2	; 0x22e2 <protected_write_io>
    2274:	40 e0       	ldi	r20, 0x00	; 0
    2276:	68 ed       	ldi	r22, 0xD8	; 216
    2278:	80 e6       	ldi	r24, 0x60	; 96
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	0e 94 71 11 	call	0x22e2	; 0x22e2 <protected_write_io>
	 //ccp_write_io((void*)&(CLKCTRL.OSC20MCTRLA),1 << CLKCTRL_RUNSTDBY_bp /* Run standby: ENabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	08 95       	ret

00002284 <CPUINT_init>:
	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

//	ENABLE_INTERRUPTS();

	return 0;
}
    2284:	80 e0       	ldi	r24, 0x00	; 0
    2286:	08 95       	ret

00002288 <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
    2288:	e0 e1       	ldi	r30, 0x10	; 16
    228a:	f4 e0       	ldi	r31, 0x04	; 4
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    228c:	80 81       	ld	r24, Z
    228e:	88 60       	ori	r24, 0x08	; 8
    2290:	81 93       	st	Z+, r24
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    2292:	e8 31       	cpi	r30, 0x18	; 24
    2294:	84 e0       	ldi	r24, 0x04	; 4
    2296:	f8 07       	cpc	r31, r24
    2298:	c9 f7       	brne	.-14     	; 0x228c <mcu_init+0x4>
    229a:	e0 e3       	ldi	r30, 0x30	; 48
    229c:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    229e:	80 81       	ld	r24, Z
    22a0:	88 60       	ori	r24, 0x08	; 8
    22a2:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    22a4:	e8 33       	cpi	r30, 0x38	; 56
    22a6:	84 e0       	ldi	r24, 0x04	; 4
    22a8:	f8 07       	cpc	r31, r24
    22aa:	c9 f7       	brne	.-14     	; 0x229e <mcu_init+0x16>
	}

//	for (uint8_t i = 0; i < 8; i++) {
//		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
//	}
}
    22ac:	08 95       	ret

000022ae <USART_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
    22ae:	23 98       	cbi	0x04, 3	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    22b0:	e3 e3       	ldi	r30, 0x33	; 51
    22b2:	f4 e0       	ldi	r31, 0x04	; 4
    22b4:	80 81       	ld	r24, Z
    22b6:	87 7f       	andi	r24, 0xF7	; 247
    22b8:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    22ba:	22 9a       	sbi	0x04, 2	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    22bc:	2a 98       	cbi	0x05, 2	; 5
{
	TPB3_set_dir(PORT_DIR_IN);
	TPB3_set_pull_mode(PORT_PULL_OFF);
	TPB2_set_dir(PORT_DIR_OUT);
	TPB2_set_level(0);
	USART_0_init();
    22be:	0e 94 84 11 	call	0x2308	; 0x2308 <USART_0_init>
    22c2:	08 95       	ret

000022c4 <system_init>:
}
void system_init()
{
	mcu_init();
    22c4:	0e 94 44 11 	call	0x2288	; 0x2288 <mcu_init>

	/* PORT setting on PB4 */

	CLKCTRL_init();
    22c8:	0e 94 2e 11 	call	0x225c	; 0x225c <CLKCTRL_init>

	RTC_0_init();
    22cc:	0e 94 75 11 	call	0x22ea	; 0x22ea <RTC_0_init>

//	ADC_0_initialization();

	USART_0_initialization();
    22d0:	0e 94 57 11 	call	0x22ae	; 0x22ae <USART_0_initialization>

	CPUINT_init();
    22d4:	0e 94 42 11 	call	0x2284	; 0x2284 <CPUINT_init>

	SLPCTRL_init();
    22d8:	0e 94 82 11 	call	0x2304	; 0x2304 <SLPCTRL_init>

	BOD_init();
    22dc:	0e 94 2c 11 	call	0x2258	; 0x2258 <BOD_init>
    22e0:	08 95       	ret

000022e2 <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
    22e2:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    22e4:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    22e6:	40 83       	st	Z, r20
	ret                             // Return to caller
    22e8:	08 95       	ret

000022ea <RTC_0_init>:
 * \brief Initialize RTC interface
 */
int8_t RTC_0_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
    22ea:	e0 e4       	ldi	r30, 0x40	; 64
    22ec:	f1 e0       	ldi	r31, 0x01	; 1
    22ee:	81 81       	ldd	r24, Z+1	; 0x01
    22f0:	81 11       	cpse	r24, r1
    22f2:	fd cf       	rjmp	.-6      	; 0x22ee <RTC_0_init+0x4>

// 	RTC.INTCTRL = 0 << RTC_CMP_bp    /* Compare Match Interrupt enable: disabled */
// 	              | 1 << RTC_OVF_bp; /* Overflow Interrupt enable: enabled */


	RTC.PITCTRLA = RTC_PERIOD_CYC32768_gc /* Off */
    22f4:	e0 e4       	ldi	r30, 0x40	; 64
    22f6:	f1 e0       	ldi	r31, 0x01	; 1
    22f8:	81 e7       	ldi	r24, 0x71	; 113
    22fa:	80 8b       	std	Z+16, r24	; 0x10
//	RTC.PITCTRLA = RTC_PERIOD_CYC16384_gc /* Off */
			 | 1 << RTC_PITEN_bp; /* Enable: disabled */

	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.PITINTCTRL = 1 << RTC_PI_bp; /* Periodic Interrupt: disabled */
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	82 8b       	std	Z+18, r24	; 0x12

	return 0;
}
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	08 95       	ret

00002304 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	08 95       	ret

00002308 <USART_0_init>:
 * \brief Initialize usart interface
 */
int8_t USART_0_init()
{

	USART0.BAUD = (uint16_t)USART0_BAUD_RATE(9600); /* set baud rate register */
    2308:	e0 e0       	ldi	r30, 0x00	; 0
    230a:	f8 e0       	ldi	r31, 0x08	; 8
    230c:	8c e6       	ldi	r24, 0x6C	; 108
    230e:	95 e0       	ldi	r25, 0x05	; 5
    2310:	80 87       	std	Z+8, r24	; 0x08
    2312:	91 87       	std	Z+9, r25	; 0x09

	 USART0.CTRLA = 0 << USART_ABEIE_bp /* Auto-baud Error Interrupt Enable: disabled */
    2314:	80 e8       	ldi	r24, 0x80	; 128
    2316:	85 83       	std	Z+5, r24	; 0x05
			 | USART_RS485_OFF_gc /* RS485 Mode disabled */
			 | 1 << USART_RXCIE_bp /* Receive Complete Interrupt Enable: enabled */
			 | 0 << USART_RXSIE_bp /* Receiver Start Frame Interrupt Enable: disabled */
			 | 0 << USART_TXCIE_bp; /* Transmit Complete Interrupt Enable: disabled */
		
	USART0.CTRLB = 0 << USART_MPCM_bp       /* Multi-processor Communication Mode: disabled */
    2318:	80 ec       	ldi	r24, 0xC0	; 192
    231a:	86 83       	std	Z+6, r24	; 0x06
	// USART0.RXPLCTRL = 0x0 << USART_RXPL_gp; /* Receiver Pulse Lenght: 0x0 */

	// USART0.TXPLCTRL = 0x0 << USART_TXPL_gp; /* Transmit pulse length: 0x0 */

	return 0;
}
    231c:	80 e0       	ldi	r24, 0x00	; 0
    231e:	08 95       	ret

00002320 <__tablejump2__>:
    2320:	ee 0f       	add	r30, r30
    2322:	ff 1f       	adc	r31, r31
    2324:	05 90       	lpm	r0, Z+
    2326:	f4 91       	lpm	r31, Z
    2328:	e0 2d       	mov	r30, r0
    232a:	09 94       	ijmp

0000232c <ccp_write_io>:
    232c:	dc 01       	movw	r26, r24
    232e:	28 ed       	ldi	r18, 0xD8	; 216
    2330:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
    2334:	6c 93       	st	X, r22
    2336:	08 95       	ret

00002338 <_exit>:
    2338:	f8 94       	cli

0000233a <__stop_program>:
    233a:	ff cf       	rjmp	.-2      	; 0x233a <__stop_program>
