
ATTiny_Collar.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00803e00  00803e00  00001b52  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000019ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  000099ee  000019ee  00001a82  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          000000b9  00803e00  00803e00  00001b52  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00001b52  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001b84  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000298  00000000  00000000  00001bc0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000067e2  00000000  00000000  00001e58  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001e91  00000000  00000000  0000863a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002576  00000000  00000000  0000a4cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000628  00000000  00000000  0000ca44  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001db5  00000000  00000000  0000d06c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00002fac  00000000  00000000  0000ee21  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000218  00000000  00000000  00011dcd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
       2:	5a c0       	rjmp	.+180    	; 0xb8 <__bad_interrupt>
       4:	59 c0       	rjmp	.+178    	; 0xb8 <__bad_interrupt>
       6:	58 c0       	rjmp	.+176    	; 0xb8 <__bad_interrupt>
       8:	48 cc       	rjmp	.-1904   	; 0xfffff89a <__eeprom_end+0xff7ef89a>
       a:	c9 cb       	rjmp	.-2158   	; 0xfffff79e <__eeprom_end+0xff7ef79e>
       c:	5b cc       	rjmp	.-1866   	; 0xfffff8c4 <__eeprom_end+0xff7ef8c4>
       e:	54 c0       	rjmp	.+168    	; 0xb8 <__bad_interrupt>
      10:	53 c0       	rjmp	.+166    	; 0xb8 <__bad_interrupt>
      12:	52 c0       	rjmp	.+164    	; 0xb8 <__bad_interrupt>
      14:	51 c0       	rjmp	.+162    	; 0xb8 <__bad_interrupt>
      16:	50 c0       	rjmp	.+160    	; 0xb8 <__bad_interrupt>
      18:	4f c0       	rjmp	.+158    	; 0xb8 <__bad_interrupt>
      1a:	4e c0       	rjmp	.+156    	; 0xb8 <__bad_interrupt>
      1c:	4d c0       	rjmp	.+154    	; 0xb8 <__bad_interrupt>
      1e:	4c c0       	rjmp	.+152    	; 0xb8 <__bad_interrupt>
      20:	4b c0       	rjmp	.+150    	; 0xb8 <__bad_interrupt>
      22:	4a c0       	rjmp	.+148    	; 0xb8 <__bad_interrupt>
      24:	49 c0       	rjmp	.+146    	; 0xb8 <__bad_interrupt>
      26:	48 c0       	rjmp	.+144    	; 0xb8 <__bad_interrupt>
      28:	47 c0       	rjmp	.+142    	; 0xb8 <__bad_interrupt>
      2a:	46 c0       	rjmp	.+140    	; 0xb8 <__bad_interrupt>
      2c:	05 cc       	rjmp	.-2038   	; 0xfffff838 <__eeprom_end+0xff7ef838>
      2e:	44 c0       	rjmp	.+136    	; 0xb8 <__bad_interrupt>
      30:	43 c0       	rjmp	.+134    	; 0xb8 <__bad_interrupt>
      32:	42 c0       	rjmp	.+132    	; 0xb8 <__bad_interrupt>
      34:	98 c0       	rjmp	.+304    	; 0x166 <asciiToHex+0x18>
      36:	9a c0       	rjmp	.+308    	; 0x16c <asciiToHex+0x1e>
      38:	9c c0       	rjmp	.+312    	; 0x172 <asciiToHex+0x24>
      3a:	9e c0       	rjmp	.+316    	; 0x178 <asciiToHex+0x2a>
      3c:	a0 c0       	rjmp	.+320    	; 0x17e <asciiToHex+0x30>
      3e:	a2 c0       	rjmp	.+324    	; 0x184 <asciiToHex+0x36>
      40:	a4 c0       	rjmp	.+328    	; 0x18a <asciiToHex+0x3c>
      42:	a6 c0       	rjmp	.+332    	; 0x190 <asciiToHex+0x42>
      44:	a8 c0       	rjmp	.+336    	; 0x196 <asciiToHex+0x48>
      46:	cd c0       	rjmp	.+410    	; 0x1e2 <asciiToHex+0x94>
      48:	b5 c0       	rjmp	.+362    	; 0x1b4 <asciiToHex+0x66>
      4a:	b6 c0       	rjmp	.+364    	; 0x1b8 <asciiToHex+0x6a>
      4c:	b7 c0       	rjmp	.+366    	; 0x1bc <asciiToHex+0x6e>
      4e:	b8 c0       	rjmp	.+368    	; 0x1c0 <asciiToHex+0x72>
      50:	b9 c0       	rjmp	.+370    	; 0x1c4 <asciiToHex+0x76>
      52:	ba c0       	rjmp	.+372    	; 0x1c8 <asciiToHex+0x7a>
      54:	bb c0       	rjmp	.+374    	; 0x1cc <asciiToHex+0x7e>
      56:	bd c0       	rjmp	.+378    	; 0x1d2 <asciiToHex+0x84>
      58:	bf c0       	rjmp	.+382    	; 0x1d8 <asciiToHex+0x8a>
      5a:	97 c1       	rjmp	.+814    	; 0x38a <hex1ToAscii+0xc>
      5c:	98 c1       	rjmp	.+816    	; 0x38e <hex1ToAscii+0x10>
      5e:	99 c1       	rjmp	.+818    	; 0x392 <hex1ToAscii+0x14>
      60:	9a c1       	rjmp	.+820    	; 0x396 <hex1ToAscii+0x18>
      62:	9b c1       	rjmp	.+822    	; 0x39a <hex1ToAscii+0x1c>
      64:	9c c1       	rjmp	.+824    	; 0x39e <hex1ToAscii+0x20>
      66:	9d c1       	rjmp	.+826    	; 0x3a2 <hex1ToAscii+0x24>
      68:	9e c1       	rjmp	.+828    	; 0x3a6 <hex1ToAscii+0x28>
      6a:	9f c1       	rjmp	.+830    	; 0x3aa <hex1ToAscii+0x2c>
      6c:	a0 c1       	rjmp	.+832    	; 0x3ae <hex1ToAscii+0x30>
      6e:	a1 c1       	rjmp	.+834    	; 0x3b2 <hex1ToAscii+0x34>
      70:	a2 c1       	rjmp	.+836    	; 0x3b6 <hex1ToAscii+0x38>
      72:	a3 c1       	rjmp	.+838    	; 0x3ba <hex1ToAscii+0x3c>
      74:	a4 c1       	rjmp	.+840    	; 0x3be <hex1ToAscii+0x40>
      76:	a5 c1       	rjmp	.+842    	; 0x3c2 <hex1ToAscii+0x44>
      78:	a6 c1       	rjmp	.+844    	; 0x3c6 <hex1ToAscii+0x48>
      7a:	d9 ca       	rjmp	.-2638   	; 0xfffff62e <__eeprom_end+0xff7ef62e>
      7c:	e3 ca       	rjmp	.-2618   	; 0xfffff644 <__eeprom_end+0xff7ef644>
      7e:	ee ca       	rjmp	.-2596   	; 0xfffff65c <__eeprom_end+0xff7ef65c>
      80:	f8 ca       	rjmp	.-2576   	; 0xfffff672 <__eeprom_end+0xff7ef672>
      82:	fd ca       	rjmp	.-2566   	; 0xfffff67e <__eeprom_end+0xff7ef67e>
      84:	07 cb       	rjmp	.-2546   	; 0xfffff694 <__eeprom_end+0xff7ef694>
      86:	11 cb       	rjmp	.-2526   	; 0xfffff6aa <__eeprom_end+0xff7ef6aa>
      88:	13 cb       	rjmp	.-2522   	; 0xfffff6b0 <__eeprom_end+0xff7ef6b0>
      8a:	23 cb       	rjmp	.-2490   	; 0xfffff6d2 <__eeprom_end+0xff7ef6d2>
      8c:	2e cb       	rjmp	.-2468   	; 0xfffff6ea <__eeprom_end+0xff7ef6ea>
      8e:	3e cb       	rjmp	.-2436   	; 0xfffff70c <__eeprom_end+0xff7ef70c>
      90:	4e cb       	rjmp	.-2404   	; 0xfffff72e <__eeprom_end+0xff7ef72e>
      92:	5e cb       	rjmp	.-2372   	; 0xfffff750 <__eeprom_end+0xff7ef750>
      94:	6e cb       	rjmp	.-2340   	; 0xfffff772 <__eeprom_end+0xff7ef772>
      96:	76 cb       	rjmp	.-2324   	; 0xfffff784 <__eeprom_end+0xff7ef784>

00000098 <__ctors_end>:
      98:	11 24       	eor	r1, r1
      9a:	1f be       	out	0x3f, r1	; 63
      9c:	cf ef       	ldi	r28, 0xFF	; 255
      9e:	cd bf       	out	0x3d, r28	; 61
      a0:	df e3       	ldi	r29, 0x3F	; 63
      a2:	de bf       	out	0x3e, r29	; 62

000000a4 <__do_clear_bss>:
      a4:	2e e3       	ldi	r18, 0x3E	; 62
      a6:	a0 e0       	ldi	r26, 0x00	; 0
      a8:	be e3       	ldi	r27, 0x3E	; 62
      aa:	01 c0       	rjmp	.+2      	; 0xae <.do_clear_bss_start>

000000ac <.do_clear_bss_loop>:
      ac:	1d 92       	st	X+, r1

000000ae <.do_clear_bss_start>:
      ae:	a9 3b       	cpi	r26, 0xB9	; 185
      b0:	b2 07       	cpc	r27, r18
      b2:	e1 f7       	brne	.-8      	; 0xac <.do_clear_bss_loop>
      b4:	91 d9       	rcall	.-3294   	; 0xfffff3d8 <__eeprom_end+0xff7ef3d8>
      b6:	99 cc       	rjmp	.-1742   	; 0xfffff9ea <__eeprom_end+0xff7ef9ea>

000000b8 <__bad_interrupt>:
      b8:	a3 cf       	rjmp	.-186    	; 0x0 <__vectors>

000000ba <atmel_start_init>:
/**
 * Initializes MCU, drivers and middleware in the project
**/
void atmel_start_init(void)
{
	system_init();
      ba:	68 dc       	rcall	.-1840   	; 0xfffff98c <__eeprom_end+0xff7ef98c>
      bc:	08 95       	ret

000000be <searchRcvBuffuBlox>:
int8_t USART_0_putc(const uint8_t data)
{
	while( !(USART0.STATUS & USART_DREIF_bm) );
	USART0.TXDATAL = data;
	return 0;
}
      be:	25 e0       	ldi	r18, 0x05	; 5
      c0:	3e e3       	ldi	r19, 0x3E	; 62
      c2:	20 93 b7 3e 	sts	0x3EB7, r18	; 0x803eb7 <GPSSearchPtr>
      c6:	30 93 b8 3e 	sts	0x3EB8, r19	; 0x803eb8 <GPSSearchPtr+0x1>
      ca:	a0 91 b2 3e 	lds	r26, 0x3EB2	; 0x803eb2 <p_rcvData>
      ce:	b0 91 b3 3e 	lds	r27, 0x3EB3	; 0x803eb3 <p_rcvData+0x1>
      d2:	15 97       	sbiw	r26, 0x05	; 5
      d4:	e0 91 b7 3e 	lds	r30, 0x3EB7	; 0x803eb7 <GPSSearchPtr>
      d8:	f0 91 b8 3e 	lds	r31, 0x3EB8	; 0x803eb8 <GPSSearchPtr+0x1>
      dc:	9f 01       	movw	r18, r30
      de:	2f 5f       	subi	r18, 0xFF	; 255
      e0:	3f 4f       	sbci	r19, 0xFF	; 255
      e2:	20 93 b7 3e 	sts	0x3EB7, r18	; 0x803eb7 <GPSSearchPtr>
      e6:	30 93 b8 3e 	sts	0x3EB8, r19	; 0x803eb8 <GPSSearchPtr+0x1>
      ea:	91 81       	ldd	r25, Z+1	; 0x01
      ec:	98 13       	cpse	r25, r24
      ee:	06 c0       	rjmp	.+12     	; 0xfc <searchRcvBuffuBlox+0x3e>
      f0:	92 81       	ldd	r25, Z+2	; 0x02
      f2:	96 13       	cpse	r25, r22
      f4:	03 c0       	rjmp	.+6      	; 0xfc <searchRcvBuffuBlox+0x3e>
      f6:	93 81       	ldd	r25, Z+3	; 0x03
      f8:	94 17       	cp	r25, r20
      fa:	31 f0       	breq	.+12     	; 0x108 <searchRcvBuffuBlox+0x4a>
      fc:	2a 17       	cp	r18, r26
      fe:	3b 07       	cpc	r19, r27
     100:	48 f3       	brcs	.-46     	; 0xd4 <searchRcvBuffuBlox+0x16>
     102:	8a e9       	ldi	r24, 0x9A	; 154
     104:	92 e0       	ldi	r25, 0x02	; 2
     106:	08 95       	ret
     108:	80 e0       	ldi	r24, 0x00	; 0
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	08 95       	ret

0000010e <openGPSuBlox>:
     10e:	24 9a       	sbi	0x04, 4	; 4
     110:	23 9a       	sbi	0x04, 3	; 4
     112:	22 9a       	sbi	0x04, 2	; 4
     114:	2a 9a       	sbi	0x05, 2	; 5
     116:	2b 9a       	sbi	0x05, 3	; 5
     118:	2c 9a       	sbi	0x05, 4	; 5
     11a:	02 9a       	sbi	0x00, 2	; 0
     11c:	0a 9a       	sbi	0x01, 2	; 1
     11e:	23 98       	cbi	0x04, 3	; 4
     120:	e0 e0       	ldi	r30, 0x00	; 0
     122:	f8 e0       	ldi	r31, 0x08	; 8
     124:	8c e6       	ldi	r24, 0x6C	; 108
     126:	95 e0       	ldi	r25, 0x05	; 5
     128:	80 87       	std	Z+8, r24	; 0x08
     12a:	91 87       	std	Z+9, r25	; 0x09
     12c:	80 ec       	ldi	r24, 0xC0	; 192
     12e:	86 83       	std	Z+6, r24	; 0x06
     130:	86 e0       	ldi	r24, 0x06	; 6
     132:	9e e3       	ldi	r25, 0x3E	; 62
     134:	80 93 b2 3e 	sts	0x3EB2, r24	; 0x803eb2 <p_rcvData>
     138:	90 93 b3 3e 	sts	0x3EB3, r25	; 0x803eb3 <p_rcvData+0x1>
     13c:	08 95       	ret

0000013e <closeGPS>:
     13e:	10 92 06 08 	sts	0x0806, r1	; 0x800806 <__TEXT_REGION_LENGTH__+0x700806>
     142:	02 9a       	sbi	0x00, 2	; 0
     144:	0a 98       	cbi	0x01, 2	; 1
     146:	24 9a       	sbi	0x04, 4	; 4
     148:	23 9a       	sbi	0x04, 3	; 4
     14a:	2b 98       	cbi	0x05, 3	; 5
     14c:	08 95       	ret

0000014e <asciiToHex>:
     14e:	e8 2f       	mov	r30, r24
     150:	86 2f       	mov	r24, r22
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	c1 97       	sbiw	r24, 0x31	; 49
     156:	89 30       	cpi	r24, 0x09	; 9
     158:	91 05       	cpc	r25, r1
     15a:	00 f5       	brcc	.+64     	; 0x19c <asciiToHex+0x4e>
     15c:	86 5e       	subi	r24, 0xE6	; 230
     15e:	9f 4f       	sbci	r25, 0xFF	; 255
     160:	8f 93       	push	r24
     162:	9f 93       	push	r25
     164:	08 95       	ret
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	1a c0       	rjmp	.+52     	; 0x1a0 <asciiToHex+0x52>
     16c:	82 e0       	ldi	r24, 0x02	; 2
     16e:	90 e0       	ldi	r25, 0x00	; 0
     170:	17 c0       	rjmp	.+46     	; 0x1a0 <asciiToHex+0x52>
     172:	83 e0       	ldi	r24, 0x03	; 3
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	14 c0       	rjmp	.+40     	; 0x1a0 <asciiToHex+0x52>
     178:	84 e0       	ldi	r24, 0x04	; 4
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	11 c0       	rjmp	.+34     	; 0x1a0 <asciiToHex+0x52>
     17e:	85 e0       	ldi	r24, 0x05	; 5
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	0e c0       	rjmp	.+28     	; 0x1a0 <asciiToHex+0x52>
     184:	86 e0       	ldi	r24, 0x06	; 6
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	0b c0       	rjmp	.+22     	; 0x1a0 <asciiToHex+0x52>
     18a:	87 e0       	ldi	r24, 0x07	; 7
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	08 c0       	rjmp	.+16     	; 0x1a0 <asciiToHex+0x52>
     190:	88 e0       	ldi	r24, 0x08	; 8
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	05 c0       	rjmp	.+10     	; 0x1a0 <asciiToHex+0x52>
     196:	89 e0       	ldi	r24, 0x09	; 9
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	02 c0       	rjmp	.+4      	; 0x1a0 <asciiToHex+0x52>
     19c:	80 e0       	ldi	r24, 0x00	; 0
     19e:	90 e0       	ldi	r25, 0x00	; 0
     1a0:	4e 2f       	mov	r20, r30
     1a2:	50 e0       	ldi	r21, 0x00	; 0
     1a4:	fa 01       	movw	r30, r20
     1a6:	f0 97       	sbiw	r30, 0x30	; 48
     1a8:	ea 30       	cpi	r30, 0x0A	; 10
     1aa:	f1 05       	cpc	r31, r1
     1ac:	c0 f4       	brcc	.+48     	; 0x1de <asciiToHex+0x90>
     1ae:	ed 5d       	subi	r30, 0xDD	; 221
     1b0:	ff 4f       	sbci	r31, 0xFF	; 255
     1b2:	09 94       	ijmp
     1b4:	0a 96       	adiw	r24, 0x0a	; 10
     1b6:	08 95       	ret
     1b8:	44 96       	adiw	r24, 0x14	; 20
     1ba:	08 95       	ret
     1bc:	4e 96       	adiw	r24, 0x1e	; 30
     1be:	08 95       	ret
     1c0:	88 96       	adiw	r24, 0x28	; 40
     1c2:	08 95       	ret
     1c4:	c2 96       	adiw	r24, 0x32	; 50
     1c6:	08 95       	ret
     1c8:	cc 96       	adiw	r24, 0x3c	; 60
     1ca:	08 95       	ret
     1cc:	8a 5b       	subi	r24, 0xBA	; 186
     1ce:	9f 4f       	sbci	r25, 0xFF	; 255
     1d0:	08 95       	ret
     1d2:	80 5b       	subi	r24, 0xB0	; 176
     1d4:	9f 4f       	sbci	r25, 0xFF	; 255
     1d6:	08 95       	ret
     1d8:	86 5a       	subi	r24, 0xA6	; 166
     1da:	9f 4f       	sbci	r25, 0xFF	; 255
     1dc:	08 95       	ret
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	90 e0       	ldi	r25, 0x00	; 0
     1e2:	08 95       	ret

000001e4 <myDelay_ms>:
     1e4:	ab 01       	movw	r20, r22
     1e6:	bc 01       	movw	r22, r24
     1e8:	41 15       	cp	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	61 05       	cpc	r22, r1
     1ee:	71 05       	cpc	r23, r1
     1f0:	61 f4       	brne	.+24     	; 0x20a <myDelay_ms+0x26>
     1f2:	08 95       	ret
     1f4:	00 00       	nop
     1f6:	01 96       	adiw	r24, 0x01	; 1
     1f8:	8a 39       	cpi	r24, 0x9A	; 154
     1fa:	21 e0       	ldi	r18, 0x01	; 1
     1fc:	92 07       	cpc	r25, r18
     1fe:	d1 f7       	brne	.-12     	; 0x1f4 <myDelay_ms+0x10>
     200:	41 50       	subi	r20, 0x01	; 1
     202:	51 09       	sbc	r21, r1
     204:	61 09       	sbc	r22, r1
     206:	71 09       	sbc	r23, r1
     208:	19 f0       	breq	.+6      	; 0x210 <myDelay_ms+0x2c>
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	f2 cf       	rjmp	.-28     	; 0x1f4 <myDelay_ms+0x10>
     210:	08 95       	ret

00000212 <redBlink>:
     212:	cf 93       	push	r28
     214:	c8 2f       	mov	r28, r24
     216:	42 9a       	sbi	0x08, 2	; 8
     218:	88 23       	and	r24, r24
     21a:	71 f0       	breq	.+28     	; 0x238 <redBlink+0x26>
     21c:	4a 98       	cbi	0x09, 2	; 9
     21e:	6a e0       	ldi	r22, 0x0A	; 10
     220:	70 e0       	ldi	r23, 0x00	; 0
     222:	80 e0       	ldi	r24, 0x00	; 0
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	de df       	rcall	.-68     	; 0x1e4 <myDelay_ms>
     228:	4a 9a       	sbi	0x09, 2	; 9
     22a:	62 e3       	ldi	r22, 0x32	; 50
     22c:	70 e0       	ldi	r23, 0x00	; 0
     22e:	80 e0       	ldi	r24, 0x00	; 0
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	d8 df       	rcall	.-80     	; 0x1e4 <myDelay_ms>
     234:	c1 50       	subi	r28, 0x01	; 1
     236:	91 f7       	brne	.-28     	; 0x21c <redBlink+0xa>
     238:	42 98       	cbi	0x08, 2	; 8
     23a:	e2 e5       	ldi	r30, 0x52	; 82
     23c:	f4 e0       	ldi	r31, 0x04	; 4
     23e:	80 81       	ld	r24, Z
     240:	88 60       	ori	r24, 0x08	; 8
     242:	80 83       	st	Z, r24
     244:	cf 91       	pop	r28
     246:	08 95       	ret

00000248 <redBlinkLong>:
     248:	cf 93       	push	r28
     24a:	c8 2f       	mov	r28, r24
     24c:	42 9a       	sbi	0x08, 2	; 8
     24e:	88 23       	and	r24, r24
     250:	71 f0       	breq	.+28     	; 0x26e <redBlinkLong+0x26>
     252:	4a 98       	cbi	0x09, 2	; 9
     254:	6c e2       	ldi	r22, 0x2C	; 44
     256:	71 e0       	ldi	r23, 0x01	; 1
     258:	80 e0       	ldi	r24, 0x00	; 0
     25a:	90 e0       	ldi	r25, 0x00	; 0
     25c:	c3 df       	rcall	.-122    	; 0x1e4 <myDelay_ms>
     25e:	4a 9a       	sbi	0x09, 2	; 9
     260:	62 e3       	ldi	r22, 0x32	; 50
     262:	70 e0       	ldi	r23, 0x00	; 0
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	bd df       	rcall	.-134    	; 0x1e4 <myDelay_ms>
     26a:	c1 50       	subi	r28, 0x01	; 1
     26c:	91 f7       	brne	.-28     	; 0x252 <redBlinkLong+0xa>
     26e:	42 98       	cbi	0x08, 2	; 8
     270:	e2 e5       	ldi	r30, 0x52	; 82
     272:	f4 e0       	ldi	r31, 0x04	; 4
     274:	80 81       	ld	r24, Z
     276:	88 60       	ori	r24, 0x08	; 8
     278:	80 83       	st	Z, r24
     27a:	cf 91       	pop	r28
     27c:	08 95       	ret

0000027e <myDelay_hus>:
     27e:	ab 01       	movw	r20, r22
     280:	bc 01       	movw	r22, r24
     282:	41 15       	cp	r20, r1
     284:	51 05       	cpc	r21, r1
     286:	61 05       	cpc	r22, r1
     288:	71 05       	cpc	r23, r1
     28a:	59 f4       	brne	.+22     	; 0x2a2 <myDelay_hus+0x24>
     28c:	08 95       	ret
     28e:	00 00       	nop
     290:	01 96       	adiw	r24, 0x01	; 1
     292:	8e 32       	cpi	r24, 0x2E	; 46
     294:	91 05       	cpc	r25, r1
     296:	d9 f7       	brne	.-10     	; 0x28e <myDelay_hus+0x10>
     298:	41 50       	subi	r20, 0x01	; 1
     29a:	51 09       	sbc	r21, r1
     29c:	61 09       	sbc	r22, r1
     29e:	71 09       	sbc	r23, r1
     2a0:	19 f0       	breq	.+6      	; 0x2a8 <myDelay_hus+0x2a>
     2a2:	80 e0       	ldi	r24, 0x00	; 0
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	f3 cf       	rjmp	.-26     	; 0x28e <myDelay_hus+0x10>
     2a8:	08 95       	ret

000002aa <usart_put_string>:

// USART Functions
void usart_put_string(const char str[], const uint8_t STR_LEN)
{
	for (int i = 0; i < STR_LEN; i++) {
     2aa:	66 23       	and	r22, r22
     2ac:	71 f0       	breq	.+28     	; 0x2ca <usart_put_string+0x20>
     2ae:	dc 01       	movw	r26, r24
     2b0:	9c 01       	movw	r18, r24
     2b2:	26 0f       	add	r18, r22
     2b4:	31 1d       	adc	r19, r1
		while( !(USART0.STATUS & USART_DREIF_bm) );
     2b6:	e0 e0       	ldi	r30, 0x00	; 0
     2b8:	f8 e0       	ldi	r31, 0x08	; 8
     2ba:	94 81       	ldd	r25, Z+4	; 0x04
     2bc:	95 ff       	sbrs	r25, 5
     2be:	fd cf       	rjmp	.-6      	; 0x2ba <usart_put_string+0x10>
		USART0.TXDATAL = str[i];
     2c0:	9d 91       	ld	r25, X+
     2c2:	92 83       	std	Z+2, r25	; 0x02
}

// USART Functions
void usart_put_string(const char str[], const uint8_t STR_LEN)
{
	for (int i = 0; i < STR_LEN; i++) {
     2c4:	a2 17       	cp	r26, r18
     2c6:	b3 07       	cpc	r27, r19
     2c8:	c1 f7       	brne	.-16     	; 0x2ba <usart_put_string+0x10>
     2ca:	08 95       	ret

000002cc <initGPSuBlox>:
/***********************************************************************/
/*  GPS Init for uBlox
 *	uBlox: B5 62 class(1) ID(1) LenPayload(2) payload CRC(2)
 */
/***********************************************************************/
void initGPSuBlox (void) {
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	cd b7       	in	r28, 0x3d	; 61
     2d2:	de b7       	in	r29, 0x3e	; 62
     2d4:	c1 59       	subi	r28, 0x91	; 145
     2d6:	d1 09       	sbc	r29, r1
     2d8:	cd bf       	out	0x3d, r28	; 61
     2da:	de bf       	out	0x3e, r29	; 62
  myDelay_ms(1000);    //Aug 2011, Trimble would fail at halfSec. Didn't use for HCS12
     2dc:	68 ee       	ldi	r22, 0xE8	; 232
     2de:	73 e0       	ldi	r23, 0x03	; 3
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	7f df       	rcall	.-258    	; 0x1e4 <myDelay_ms>
  char stuffToSend[] = {'$','P','U','B','X',',','4','0',',','G','L','L',',','1',',','0',',','1',',','1',',','1',',','0','*',0x35,0x43,0x0D,0x0A};
     2e6:	8d e1       	ldi	r24, 0x1D	; 29
     2e8:	ee ee       	ldi	r30, 0xEE	; 238
     2ea:	f9 e9       	ldi	r31, 0x99	; 153
     2ec:	de 01       	movw	r26, r28
     2ee:	11 96       	adiw	r26, 0x01	; 1
     2f0:	01 90       	ld	r0, Z+
     2f2:	0d 92       	st	X+, r0
     2f4:	8a 95       	dec	r24
     2f6:	e1 f7       	brne	.-8      	; 0x2f0 <initGPSuBlox+0x24>
  usart_put_string(stuffToSend, 29);
     2f8:	6d e1       	ldi	r22, 0x1D	; 29
     2fa:	ce 01       	movw	r24, r28
     2fc:	01 96       	adiw	r24, 0x01	; 1
     2fe:	d5 df       	rcall	.-86     	; 0x2aa <usart_put_string>
  char stuffToSend2[] = {'$','P','U','B','X',',','4','0',',','G','S','A',',','1',',','0',',','1',',','1',',','1',',','0','*',0x34,0x45,0x0D,0x0A};
     300:	8d e1       	ldi	r24, 0x1D	; 29
     302:	eb e0       	ldi	r30, 0x0B	; 11
     304:	fa e9       	ldi	r31, 0x9A	; 154
     306:	de 01       	movw	r26, r28
     308:	5e 96       	adiw	r26, 0x1e	; 30
     30a:	01 90       	ld	r0, Z+
     30c:	0d 92       	st	X+, r0
     30e:	8a 95       	dec	r24
     310:	e1 f7       	brne	.-8      	; 0x30a <initGPSuBlox+0x3e>
  usart_put_string(stuffToSend2, 29);
     312:	6d e1       	ldi	r22, 0x1D	; 29
     314:	ce 01       	movw	r24, r28
     316:	4e 96       	adiw	r24, 0x1e	; 30
     318:	c8 df       	rcall	.-112    	; 0x2aa <usart_put_string>
  char stuffToSend3[] = {'$','P','U','B','X',',','4','0',',','G','S','V',',','1',',','0',',','1',',','1',',','1',',','0','*',0x35,0x39,0x0D,0x0A};
     31a:	8d e1       	ldi	r24, 0x1D	; 29
     31c:	e8 e2       	ldi	r30, 0x28	; 40
     31e:	fa e9       	ldi	r31, 0x9A	; 154
     320:	de 01       	movw	r26, r28
     322:	db 96       	adiw	r26, 0x3b	; 59
     324:	01 90       	ld	r0, Z+
     326:	0d 92       	st	X+, r0
     328:	8a 95       	dec	r24
     32a:	e1 f7       	brne	.-8      	; 0x324 <initGPSuBlox+0x58>
  usart_put_string(stuffToSend3, 29);
     32c:	6d e1       	ldi	r22, 0x1D	; 29
     32e:	ce 01       	movw	r24, r28
     330:	cb 96       	adiw	r24, 0x3b	; 59
     332:	bb df       	rcall	.-138    	; 0x2aa <usart_put_string>
  char stuffToSend4[] = {'$','P','U','B','X',',','4','0',',','G','G','A',',','1',',','0',',','1',',','1',',','1',',','0','*',0x35,0x41,0x0D,0x0A};
     334:	8d e1       	ldi	r24, 0x1D	; 29
     336:	e5 e4       	ldi	r30, 0x45	; 69
     338:	fa e9       	ldi	r31, 0x9A	; 154
     33a:	de 01       	movw	r26, r28
     33c:	a8 5a       	subi	r26, 0xA8	; 168
     33e:	bf 4f       	sbci	r27, 0xFF	; 255
     340:	01 90       	ld	r0, Z+
     342:	0d 92       	st	X+, r0
     344:	8a 95       	dec	r24
     346:	e1 f7       	brne	.-8      	; 0x340 <initGPSuBlox+0x74>
  usart_put_string(stuffToSend4, 29);
     348:	6d e1       	ldi	r22, 0x1D	; 29
     34a:	ce 01       	movw	r24, r28
     34c:	88 5a       	subi	r24, 0xA8	; 168
     34e:	9f 4f       	sbci	r25, 0xFF	; 255
     350:	ac df       	rcall	.-168    	; 0x2aa <usart_put_string>
  char stuffToSend5[] = {'$','P','U','B','X',',','4','0',',','V','T','G',',','1',',','0',',','1',',','1',',','1',',','0','*',0x35,0x45,0x0D,0x0A};
     352:	8d e1       	ldi	r24, 0x1D	; 29
     354:	e2 e6       	ldi	r30, 0x62	; 98
     356:	fa e9       	ldi	r31, 0x9A	; 154
     358:	de 01       	movw	r26, r28
     35a:	ab 58       	subi	r26, 0x8B	; 139
     35c:	bf 4f       	sbci	r27, 0xFF	; 255
     35e:	01 90       	ld	r0, Z+
     360:	0d 92       	st	X+, r0
     362:	8a 95       	dec	r24
     364:	e1 f7       	brne	.-8      	; 0x35e <initGPSuBlox+0x92>
  usart_put_string(stuffToSend5, 29);
     366:	6d e1       	ldi	r22, 0x1D	; 29
     368:	ce 01       	movw	r24, r28
     36a:	8b 58       	subi	r24, 0x8B	; 139
     36c:	9f 4f       	sbci	r25, 0xFF	; 255
     36e:	9d df       	rcall	.-198    	; 0x2aa <usart_put_string>
  }
     370:	cf 56       	subi	r28, 0x6F	; 111
     372:	df 4f       	sbci	r29, 0xFF	; 255
     374:	cd bf       	out	0x3d, r28	; 61
     376:	de bf       	out	0x3e, r29	; 62
     378:	df 91       	pop	r29
     37a:	cf 91       	pop	r28
     37c:	08 95       	ret

0000037e <hex1ToAscii>:
 /*  hex1ToAscii nibble to 2-byte Ascii
 /***********************************************************************/
 char hex1ToAscii(char hex){
   int a;
   hex &= 0x000F;
     switch (hex) {
     37e:	8f 70       	andi	r24, 0x0F	; 15
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	fc 01       	movw	r30, r24
     384:	e3 5d       	subi	r30, 0xD3	; 211
     386:	ff 4f       	sbci	r31, 0xFF	; 255
     388:	09 94       	ijmp
       case 0: a = 0x30;
     38a:	80 e3       	ldi	r24, 0x30	; 48
     38c:	08 95       	ret
       break;
       case 1: a = 0x31;
     38e:	81 e3       	ldi	r24, 0x31	; 49
       break;
     390:	08 95       	ret
       case 2: a = 0x32;
     392:	82 e3       	ldi	r24, 0x32	; 50
       break;
     394:	08 95       	ret
       case 3: a = 0x33;
     396:	83 e3       	ldi	r24, 0x33	; 51
       break;
     398:	08 95       	ret
       case 4: a = 0x34;
     39a:	84 e3       	ldi	r24, 0x34	; 52
       break;
     39c:	08 95       	ret
       case 5: a = 0x35;
     39e:	85 e3       	ldi	r24, 0x35	; 53
       break;
     3a0:	08 95       	ret
       case 6: a = 0x36;
     3a2:	86 e3       	ldi	r24, 0x36	; 54
       break;
     3a4:	08 95       	ret
       case 7: a = 0x37;
     3a6:	87 e3       	ldi	r24, 0x37	; 55
       break;
     3a8:	08 95       	ret
       case 8: a = 0x38;
     3aa:	88 e3       	ldi	r24, 0x38	; 56
       break;
     3ac:	08 95       	ret
       case 9: a = 0x39;
     3ae:	89 e3       	ldi	r24, 0x39	; 57
       break;
     3b0:	08 95       	ret
       case 10: a = 0x41;
     3b2:	81 e4       	ldi	r24, 0x41	; 65
       break;
     3b4:	08 95       	ret
       case 11: a = 0x42;
     3b6:	82 e4       	ldi	r24, 0x42	; 66
       break;
     3b8:	08 95       	ret
       case 12: a = 0x43;
     3ba:	83 e4       	ldi	r24, 0x43	; 67
       break;
     3bc:	08 95       	ret
       case 13: a = 0x44;
     3be:	84 e4       	ldi	r24, 0x44	; 68
       break;
     3c0:	08 95       	ret
       case 14: a = 0x45;
     3c2:	85 e4       	ldi	r24, 0x45	; 69
       break;
     3c4:	08 95       	ret
       case 15: a = 0x46;
     3c6:	86 e4       	ldi	r24, 0x46	; 70
       break;
     };
    return a;
 }
     3c8:	08 95       	ret

000003ca <hex2ToAscii>:
    }
 }
   /***********************************************************************/
 /*  hex2ToAscii 4 bytes hex to 8 bytes Ascii
 /***********************************************************************/
 unsigned int hex2ToAscii(int hexx){
     3ca:	1f 93       	push	r17
     3cc:	cf 93       	push	r28
     3ce:	df 93       	push	r29
     3d0:	ec 01       	movw	r28, r24
   int a,b,c,d;
   hexx &= 0x0000FFFF;
   a = (hex1ToAscii(hexx));
     3d2:	d5 df       	rcall	.-86     	; 0x37e <hex1ToAscii>
     3d4:	18 2f       	mov	r17, r24
   hexx >>= 4;
   b = (hex1ToAscii(hexx));
     3d6:	ce 01       	movw	r24, r28
     3d8:	95 95       	asr	r25
     3da:	87 95       	ror	r24
     3dc:	95 95       	asr	r25
     3de:	87 95       	ror	r24
     3e0:	95 95       	asr	r25
     3e2:	87 95       	ror	r24
     3e4:	95 95       	asr	r25
     3e6:	87 95       	ror	r24
     3e8:	ca df       	rcall	.-108    	; 0x37e <hex1ToAscii>
     3ea:	90 e0       	ldi	r25, 0x00	; 0
   c = (hex1ToAscii(hexx));
   c <<= 16;
   hexx >>= 4;
   d = (hex1ToAscii(hexx));
   d <<= 24;
   return a + b + c + d;
     3ec:	98 2f       	mov	r25, r24
     3ee:	88 27       	eor	r24, r24
 }
     3f0:	81 0f       	add	r24, r17
     3f2:	91 1d       	adc	r25, r1
     3f4:	df 91       	pop	r29
     3f6:	cf 91       	pop	r28
     3f8:	1f 91       	pop	r17
     3fa:	08 95       	ret

000003fc <sendLCDshort>:
	}
}
/***********************************************************************/
 /*  send LCD int
 /***********************************************************************/
 void sendLCDshort(short a, char d){
     3fc:	df 92       	push	r13
     3fe:	ef 92       	push	r14
     400:	ff 92       	push	r15
     402:	0f 93       	push	r16
     404:	1f 93       	push	r17
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	00 d0       	rcall	.+0      	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
     40c:	00 d0       	rcall	.+0      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
     40e:	cd b7       	in	r28, 0x3d	; 61
     410:	de b7       	in	r29, 0x3e	; 62
     412:	7c 01       	movw	r14, r24
     414:	16 2f       	mov	r17, r22
    short z,zz;
    z=hex2ToAscii((a>>8)&0x000000FF);
     416:	8f 2d       	mov	r24, r15
     418:	90 e0       	ldi	r25, 0x00	; 0
     41a:	d7 df       	rcall	.-82     	; 0x3ca <hex2ToAscii>
     41c:	08 2f       	mov	r16, r24
     41e:	d9 2e       	mov	r13, r25
    zz=hex2ToAscii(a&0x000000FF);
     420:	c7 01       	movw	r24, r14
     422:	99 27       	eor	r25, r25
     424:	d2 df       	rcall	.-92     	; 0x3ca <hex2ToAscii>
     426:	f8 2e       	mov	r15, r24
     428:	e9 2e       	mov	r14, r25
    if(d>=4){
     42a:	14 30       	cpi	r17, 0x04	; 4
     42c:	40 f0       	brcs	.+16     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
      char sendchars2[4]={
     42e:	d9 82       	std	Y+1, r13	; 0x01
     430:	0a 83       	std	Y+2, r16	; 0x02
     432:	9b 83       	std	Y+3, r25	; 0x03
     434:	8c 83       	std	Y+4, r24	; 0x04
    	(char)(z>>8),(char)(z),(char)(zz>>8),(char)(zz)};
      usart_put_string(sendchars2,4);
     436:	64 e0       	ldi	r22, 0x04	; 4
     438:	ce 01       	movw	r24, r28
     43a:	01 96       	adiw	r24, 0x01	; 1
     43c:	36 df       	rcall	.-404    	; 0x2aa <usart_put_string>
    }
    if(d==3){
     43e:	13 30       	cpi	r17, 0x03	; 3
     440:	41 f4       	brne	.+16     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
      char sendchars2[3]={
     442:	09 83       	std	Y+1, r16	; 0x01
     444:	ea 82       	std	Y+2, r14	; 0x02
     446:	fb 82       	std	Y+3, r15	; 0x03
     (char)(z),(char)(zz>>8),(char)(zz)};
      usart_put_string(sendchars2,3);
     448:	63 e0       	ldi	r22, 0x03	; 3
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	2d df       	rcall	.-422    	; 0x2aa <usart_put_string>
     450:	10 c0       	rjmp	.+32     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
    }
    if(d==2){
     452:	12 30       	cpi	r17, 0x02	; 2
     454:	39 f4       	brne	.+14     	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
      char sendchars2[2]={
     456:	e9 82       	std	Y+1, r14	; 0x01
     458:	fa 82       	std	Y+2, r15	; 0x02
      (char)(zz>>8),(char)(zz)};
      usart_put_string(sendchars2,2);
     45a:	62 e0       	ldi	r22, 0x02	; 2
     45c:	ce 01       	movw	r24, r28
     45e:	01 96       	adiw	r24, 0x01	; 1
     460:	24 df       	rcall	.-440    	; 0x2aa <usart_put_string>
     462:	07 c0       	rjmp	.+14     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
    }
    if(d==1){
     464:	11 30       	cpi	r17, 0x01	; 1
     466:	29 f4       	brne	.+10     	; 0x472 <__LOCK_REGION_LENGTH__+0x72>
      char sendchars2[1]={(char)(zz)};
     468:	f9 82       	std	Y+1, r15	; 0x01
      usart_put_string(sendchars2,1);
     46a:	61 e0       	ldi	r22, 0x01	; 1
     46c:	ce 01       	movw	r24, r28
     46e:	01 96       	adiw	r24, 0x01	; 1
     470:	1c df       	rcall	.-456    	; 0x2aa <usart_put_string>
    }
 }
     472:	24 96       	adiw	r28, 0x04	; 4
     474:	cd bf       	out	0x3d, r28	; 61
     476:	de bf       	out	0x3e, r29	; 62
     478:	df 91       	pop	r29
     47a:	cf 91       	pop	r28
     47c:	1f 91       	pop	r17
     47e:	0f 91       	pop	r16
     480:	ff 90       	pop	r15
     482:	ef 90       	pop	r14
     484:	df 90       	pop	r13
     486:	08 95       	ret

00000488 <LCDclear>:
 }

 /***********************************************************************
 *    LCD Functions
 ***********************************************************************/
void LCDclear (void){
     488:	cf 93       	push	r28
     48a:	df 93       	push	r29
     48c:	cd b7       	in	r28, 0x3d	; 61
     48e:	de b7       	in	r29, 0x3e	; 62
     490:	28 97       	sbiw	r28, 0x08	; 8
     492:	cd bf       	out	0x3d, r28	; 61
     494:	de bf       	out	0x3e, r29	; 62
	USART_0_initialization();
     496:	70 da       	rcall	.-2848   	; 0xfffff978 <__eeprom_end+0xff7ef978>
	char sndStr2[8] = {0xFE,0x46,0xFE,0x48,0xFE,0x4C,0xFE,0x51};//clear display, cursor home
     498:	88 e0       	ldi	r24, 0x08	; 8
     49a:	ef e7       	ldi	r30, 0x7F	; 127
     49c:	fa e9       	ldi	r31, 0x9A	; 154
     49e:	de 01       	movw	r26, r28
     4a0:	11 96       	adiw	r26, 0x01	; 1
     4a2:	01 90       	ld	r0, Z+
     4a4:	0d 92       	st	X+, r0
     4a6:	8a 95       	dec	r24
     4a8:	e1 f7       	brne	.-8      	; 0x4a2 <LCDclear+0x1a>
	usart_put_string(sndStr2,8);
     4aa:	68 e0       	ldi	r22, 0x08	; 8
     4ac:	ce 01       	movw	r24, r28
     4ae:	01 96       	adiw	r24, 0x01	; 1
     4b0:	fc de       	rcall	.-520    	; 0x2aa <usart_put_string>
	myDelay_ms(10);
     4b2:	6a e0       	ldi	r22, 0x0A	; 10
     4b4:	70 e0       	ldi	r23, 0x00	; 0
     4b6:	80 e0       	ldi	r24, 0x00	; 0
     4b8:	90 e0       	ldi	r25, 0x00	; 0
     4ba:	94 de       	rcall	.-728    	; 0x1e4 <myDelay_ms>
}
     4bc:	28 96       	adiw	r28, 0x08	; 8
     4be:	cd bf       	out	0x3d, r28	; 61
     4c0:	de bf       	out	0x3e, r29	; 62
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	08 95       	ret

000004c8 <LCDbottomLine>:
void LCDbottomLine (void){
     4c8:	cf 93       	push	r28
     4ca:	df 93       	push	r29
     4cc:	00 d0       	rcall	.+0      	; 0x4ce <LCDbottomLine+0x6>
     4ce:	1f 92       	push	r1
     4d0:	cd b7       	in	r28, 0x3d	; 61
     4d2:	de b7       	in	r29, 0x3e	; 62
	char sndStr3[3] = {0xFE,0x45,0x40};//clear display, cursor home
     4d4:	8e ef       	ldi	r24, 0xFE	; 254
     4d6:	89 83       	std	Y+1, r24	; 0x01
     4d8:	85 e4       	ldi	r24, 0x45	; 69
     4da:	8a 83       	std	Y+2, r24	; 0x02
     4dc:	80 e4       	ldi	r24, 0x40	; 64
     4de:	8b 83       	std	Y+3, r24	; 0x03
	usart_put_string(sndStr3,3);
     4e0:	63 e0       	ldi	r22, 0x03	; 3
     4e2:	ce 01       	movw	r24, r28
     4e4:	01 96       	adiw	r24, 0x01	; 1
     4e6:	e1 de       	rcall	.-574    	; 0x2aa <usart_put_string>
	myDelay_ms(10);
     4e8:	6a e0       	ldi	r22, 0x0A	; 10
     4ea:	70 e0       	ldi	r23, 0x00	; 0
     4ec:	80 e0       	ldi	r24, 0x00	; 0
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	79 de       	rcall	.-782    	; 0x1e4 <myDelay_ms>
}
     4f2:	23 96       	adiw	r28, 0x03	; 3
     4f4:	cd bf       	out	0x3d, r28	; 61
     4f6:	de bf       	out	0x3e, r29	; 62
     4f8:	df 91       	pop	r29
     4fa:	cf 91       	pop	r28
     4fc:	08 95       	ret

000004fe <LCDspace>:
void LCDspace (void){
	usart_put_string(&(" "),1);
     4fe:	61 e0       	ldi	r22, 0x01	; 1
     500:	88 ea       	ldi	r24, 0xA8	; 168
     502:	9a e9       	ldi	r25, 0x9A	; 154
     504:	d2 de       	rcall	.-604    	; 0x2aa <usart_put_string>
	myDelay_ms(10);
     506:	6a e0       	ldi	r22, 0x0A	; 10
     508:	70 e0       	ldi	r23, 0x00	; 0
     50a:	80 e0       	ldi	r24, 0x00	; 0
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	6a de       	rcall	.-812    	; 0x1e4 <myDelay_ms>
     510:	08 95       	ret

00000512 <clrRx>:
/***********************************************************************
*  XBee Clear Rx Buff and initialize the pointer
***********************************************************************/
void clrRx (void){
  int i;
	p_rcvData = g_uc_receive_buffer;
     512:	86 e0       	ldi	r24, 0x06	; 6
     514:	9e e3       	ldi	r25, 0x3E	; 62
     516:	80 93 b2 3e 	sts	0x3EB2, r24	; 0x803eb2 <p_rcvData>
     51a:	90 93 b3 3e 	sts	0x3EB3, r25	; 0x803eb3 <p_rcvData+0x1>
   for(i=0;i<BUFFER_SIZE;i++){
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	90 e0       	ldi	r25, 0x00	; 0
     p_rcvData[i]='X';
     522:	28 e5       	ldi	r18, 0x58	; 88
     524:	e0 91 b2 3e 	lds	r30, 0x3EB2	; 0x803eb2 <p_rcvData>
     528:	f0 91 b3 3e 	lds	r31, 0x3EB3	; 0x803eb3 <p_rcvData+0x1>
     52c:	e8 0f       	add	r30, r24
     52e:	f9 1f       	adc	r31, r25
     530:	20 83       	st	Z, r18
*  XBee Clear Rx Buff and initialize the pointer
***********************************************************************/
void clrRx (void){
  int i;
	p_rcvData = g_uc_receive_buffer;
   for(i=0;i<BUFFER_SIZE;i++){
     532:	01 96       	adiw	r24, 0x01	; 1
     534:	88 37       	cpi	r24, 0x78	; 120
     536:	91 05       	cpc	r25, r1
     538:	a9 f7       	brne	.-22     	; 0x524 <clrRx+0x12>
     p_rcvData[i]='X';
     }
	p_rcvData = g_uc_receive_buffer;
     53a:	86 e0       	ldi	r24, 0x06	; 6
     53c:	9e e3       	ldi	r25, 0x3E	; 62
     53e:	80 93 b2 3e 	sts	0x3EB2, r24	; 0x803eb2 <p_rcvData>
     542:	90 93 b3 3e 	sts	0x3EB3, r25	; 0x803eb3 <p_rcvData+0x1>
     546:	08 95       	ret

00000548 <gpsReqDateUblox>:
	if((gpsReqDateUblox()==0)&&((*(GPSSearchPtr+10))!='X'))return 0;else return 666;
}
/***********************************************************************/
/*  GPS Req Date uBlox
/***********************************************************************/
char gpsReqDateUblox (void){
     548:	cf 92       	push	r12
     54a:	df 92       	push	r13
     54c:	ef 92       	push	r14
     54e:	ff 92       	push	r15
     550:	0f 93       	push	r16
     552:	1f 93       	push	r17
     554:	cf 93       	push	r28
     556:	df 93       	push	r29
     558:	cd b7       	in	r28, 0x3d	; 61
     55a:	de b7       	in	r29, 0x3e	; 62
     55c:	6f 97       	sbiw	r28, 0x1f	; 31
     55e:	cd bf       	out	0x3d, r28	; 61
     560:	de bf       	out	0x3e, r29	; 62
	char i=5;
	unsigned char validDate, numCommas=0;
	char stuffToSend[] = {'$','G','N','G','N','Q',',','Z','D','A','*',0x32,0x32,0x0D,0x0A};
     562:	8f e0       	ldi	r24, 0x0F	; 15
     564:	e7 e8       	ldi	r30, 0x87	; 135
     566:	fa e9       	ldi	r31, 0x9A	; 154
     568:	de 01       	movw	r26, r28
     56a:	11 96       	adiw	r26, 0x01	; 1
     56c:	01 90       	ld	r0, Z+
     56e:	0d 92       	st	X+, r0
     570:	8a 95       	dec	r24
     572:	e1 f7       	brne	.-8      	; 0x56c <gpsReqDateUblox+0x24>
     574:	68 94       	set
     576:	ff 24       	eor	r15, r15
     578:	f2 f8       	bld	r15, 2
	char validCtr=0;
     57a:	e1 2c       	mov	r14, r1
	char dayLowTest[4];
	char dayHighTest[4];
	for(i=0;i<4;i++){//try it four times. This value must match the size of dateGoodTestX[4]
		usart_put_string(stuffToSend,15);
		clrRx();
		USART0.CTRLA |= USART_RXCIE_bm;
     57c:	00 e0       	ldi	r16, 0x00	; 0
     57e:	18 e0       	ldi	r17, 0x08	; 8
	char monthHighTest[4];
	char monthLowTest[4];
	char dayLowTest[4];
	char dayHighTest[4];
	for(i=0;i<4;i++){//try it four times. This value must match the size of dateGoodTestX[4]
		usart_put_string(stuffToSend,15);
     580:	6f e0       	ldi	r22, 0x0F	; 15
     582:	ce 01       	movw	r24, r28
     584:	01 96       	adiw	r24, 0x01	; 1
     586:	91 de       	rcall	.-734    	; 0x2aa <usart_put_string>
		clrRx();
     588:	c4 df       	rcall	.-120    	; 0x512 <clrRx>
		USART0.CTRLA |= USART_RXCIE_bm;
     58a:	f8 01       	movw	r30, r16
     58c:	85 81       	ldd	r24, Z+5	; 0x05
     58e:	80 68       	ori	r24, 0x80	; 128
     590:	85 83       	std	Z+5, r24	; 0x05
		ENABLE_INTERRUPTS();
     592:	78 94       	sei
		myDelay_ms(1100);
     594:	6c e4       	ldi	r22, 0x4C	; 76
     596:	74 e0       	ldi	r23, 0x04	; 4
     598:	80 e0       	ldi	r24, 0x00	; 0
     59a:	90 e0       	ldi	r25, 0x00	; 0
     59c:	23 de       	rcall	.-954    	; 0x1e4 <myDelay_ms>
		timeToFix++;
     59e:	80 91 ac 3e 	lds	r24, 0x3EAC	; 0x803eac <timeToFix>
     5a2:	90 91 ad 3e 	lds	r25, 0x3EAD	; 0x803ead <timeToFix+0x1>
     5a6:	01 96       	adiw	r24, 0x01	; 1
     5a8:	80 93 ac 3e 	sts	0x3EAC, r24	; 0x803eac <timeToFix>
     5ac:	90 93 ad 3e 	sts	0x3EAD, r25	; 0x803ead <timeToFix+0x1>
		if((timeToFix>MAX_GPS_ACQ)&&(mState!=INITIAL_GPS)){
     5b0:	89 3c       	cpi	r24, 0xC9	; 201
     5b2:	91 05       	cpc	r25, r1
     5b4:	64 f0       	brlt	.+24     	; 0x5ce <gpsReqDateUblox+0x86>
     5b6:	80 91 b1 3e 	lds	r24, 0x3EB1	; 0x803eb1 <mState>
     5ba:	87 30       	cpi	r24, 0x07	; 7
     5bc:	41 f0       	breq	.+16     	; 0x5ce <gpsReqDateUblox+0x86>
			uBloxStatus=66;
     5be:	82 e4       	ldi	r24, 0x42	; 66
     5c0:	80 93 b4 3e 	sts	0x3EB4, r24	; 0x803eb4 <uBloxStatus>
			return 66;
     5c4:	0f 2e       	mov	r0, r31
     5c6:	f2 e4       	ldi	r31, 0x42	; 66
     5c8:	ff 2e       	mov	r15, r31
     5ca:	f0 2d       	mov	r31, r0
     5cc:	d2 c0       	rjmp	.+420    	; 0x772 <gpsReqDateUblox+0x22a>
		}
	  	USART0.CTRLA &= ~USART_RXCIE_bm;//DISABLE Rx Interrupt
     5ce:	f8 01       	movw	r30, r16
     5d0:	85 81       	ldd	r24, Z+5	; 0x05
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	85 83       	std	Z+5, r24	; 0x05
		if(searchRcvBuffuBlox('Z','D','A')==0){
     5d6:	41 e4       	ldi	r20, 0x41	; 65
     5d8:	64 e4       	ldi	r22, 0x44	; 68
     5da:	8a e5       	ldi	r24, 0x5A	; 90
     5dc:	70 dd       	rcall	.-1312   	; 0xbe <searchRcvBuffuBlox>
     5de:	89 2b       	or	r24, r25
     5e0:	a9 f1       	breq	.+106    	; 0x64c <gpsReqDateUblox+0x104>
     5e2:	3d c0       	rjmp	.+122    	; 0x65e <gpsReqDateUblox+0x116>
			numCommas=0;
			while (GPSSearchPtr < &(g_uc_receive_buffer[BUFFER_SIZE])){
				GPSSearchPtr++;
     5e4:	cf 01       	movw	r24, r30
     5e6:	01 96       	adiw	r24, 0x01	; 1
     5e8:	80 93 b7 3e 	sts	0x3EB7, r24	; 0x803eb7 <GPSSearchPtr>
     5ec:	90 93 b8 3e 	sts	0x3EB8, r25	; 0x803eb8 <GPSSearchPtr+0x1>
				if(*GPSSearchPtr == ','){
     5f0:	81 81       	ldd	r24, Z+1	; 0x01
     5f2:	8c 32       	cpi	r24, 0x2C	; 44
     5f4:	61 f5       	brne	.+88     	; 0x64e <gpsReqDateUblox+0x106>
					numCommas++;
     5f6:	2f 5f       	subi	r18, 0xFF	; 255
					if(numCommas==2){
     5f8:	22 30       	cpi	r18, 0x02	; 2
     5fa:	49 f5       	brne	.+82     	; 0x64e <gpsReqDateUblox+0x106>
						if(((*(GPSSearchPtr+1))==',')||((*(GPSSearchPtr+5))=='X'))break;
     5fc:	22 81       	ldd	r18, Z+2	; 0x02
     5fe:	2c 32       	cpi	r18, 0x2C	; 44
     600:	71 f1       	breq	.+92     	; 0x65e <gpsReqDateUblox+0x116>
     602:	36 81       	ldd	r19, Z+6	; 0x06
     604:	38 35       	cpi	r19, 0x58	; 88
     606:	59 f1       	breq	.+86     	; 0x65e <gpsReqDateUblox+0x116>
						else{
							monthLowTest[validCtr]=(*(GPSSearchPtr+5));
     608:	8e 2d       	mov	r24, r14
     60a:	90 e0       	ldi	r25, 0x00	; 0
     60c:	a4 e1       	ldi	r26, 0x14	; 20
     60e:	b0 e0       	ldi	r27, 0x00	; 0
     610:	ac 0f       	add	r26, r28
     612:	bd 1f       	adc	r27, r29
     614:	a8 0f       	add	r26, r24
     616:	b9 1f       	adc	r27, r25
     618:	3c 93       	st	X, r19
							monthHighTest[validCtr]=(*(GPSSearchPtr+4));
     61a:	a0 e1       	ldi	r26, 0x10	; 16
     61c:	b0 e0       	ldi	r27, 0x00	; 0
     61e:	ac 0f       	add	r26, r28
     620:	bd 1f       	adc	r27, r29
     622:	a8 0f       	add	r26, r24
     624:	b9 1f       	adc	r27, r25
     626:	35 81       	ldd	r19, Z+5	; 0x05
     628:	3c 93       	st	X, r19
							dayLowTest[validCtr]=(*(GPSSearchPtr+2));
     62a:	a8 e1       	ldi	r26, 0x18	; 24
     62c:	b0 e0       	ldi	r27, 0x00	; 0
     62e:	ac 0f       	add	r26, r28
     630:	bd 1f       	adc	r27, r29
     632:	a8 0f       	add	r26, r24
     634:	b9 1f       	adc	r27, r25
     636:	33 81       	ldd	r19, Z+3	; 0x03
     638:	3c 93       	st	X, r19
							dayHighTest[validCtr]=(*(GPSSearchPtr+1));
     63a:	ec e1       	ldi	r30, 0x1C	; 28
     63c:	f0 e0       	ldi	r31, 0x00	; 0
     63e:	ec 0f       	add	r30, r28
     640:	fd 1f       	adc	r31, r29
     642:	e8 0f       	add	r30, r24
     644:	f9 1f       	adc	r31, r25
     646:	20 83       	st	Z, r18
							validCtr++;
     648:	e3 94       	inc	r14
							break;
     64a:	09 c0       	rjmp	.+18     	; 0x65e <gpsReqDateUblox+0x116>
     64c:	20 e0       	ldi	r18, 0x00	; 0
			return 66;
		}
	  	USART0.CTRLA &= ~USART_RXCIE_bm;//DISABLE Rx Interrupt
		if(searchRcvBuffuBlox('Z','D','A')==0){
			numCommas=0;
			while (GPSSearchPtr < &(g_uc_receive_buffer[BUFFER_SIZE])){
     64e:	e0 91 b7 3e 	lds	r30, 0x3EB7	; 0x803eb7 <GPSSearchPtr>
     652:	f0 91 b8 3e 	lds	r31, 0x3EB8	; 0x803eb8 <GPSSearchPtr+0x1>
     656:	8e e3       	ldi	r24, 0x3E	; 62
     658:	ee 37       	cpi	r30, 0x7E	; 126
     65a:	f8 07       	cpc	r31, r24
     65c:	18 f2       	brcs	.-122    	; 0x5e4 <gpsReqDateUblox+0x9c>
     65e:	fa 94       	dec	r15
	char validCtr=0;
	char monthHighTest[4];
	char monthLowTest[4];
	char dayLowTest[4];
	char dayHighTest[4];
	for(i=0;i<4;i++){//try it four times. This value must match the size of dateGoodTestX[4]
     660:	f1 10       	cpse	r15, r1
     662:	8e cf       	rjmp	.-228    	; 0x580 <gpsReqDateUblox+0x38>
		}
	}
	}//end of if 3 of 4 are good, including the last one

validCtr=0;
if(monthLowTest[3]==monthLowTest[2])validCtr++;
     664:	1f 89       	ldd	r17, Y+23	; 0x17
		}
		}
	}
	}//end of if 3 of 4 are good, including the last one

validCtr=0;
     666:	81 e0       	ldi	r24, 0x01	; 1
     668:	9e 89       	ldd	r25, Y+22	; 0x16
     66a:	91 13       	cpse	r25, r17
     66c:	80 e0       	ldi	r24, 0x00	; 0
if(monthLowTest[3]==monthLowTest[2])validCtr++;
if(monthLowTest[3]==monthLowTest[1])validCtr++;
     66e:	9d 89       	ldd	r25, Y+21	; 0x15
     670:	19 13       	cpse	r17, r25
     672:	01 c0       	rjmp	.+2      	; 0x676 <gpsReqDateUblox+0x12e>
     674:	8f 5f       	subi	r24, 0xFF	; 255
if(monthLowTest[3]==monthLowTest[0])validCtr++;
     676:	9c 89       	ldd	r25, Y+20	; 0x14
     678:	19 13       	cpse	r17, r25
     67a:	01 c0       	rjmp	.+2      	; 0x67e <gpsReqDateUblox+0x136>
     67c:	8f 5f       	subi	r24, 0xFF	; 255
if(validCtr<3)return 666;	
     67e:	83 30       	cpi	r24, 0x03	; 3
     680:	08 f4       	brcc	.+2      	; 0x684 <gpsReqDateUblox+0x13c>
     682:	56 c0       	rjmp	.+172    	; 0x730 <gpsReqDateUblox+0x1e8>
validCtr=0;
if(monthHighTest[3]==monthHighTest[2])validCtr++;
     684:	0b 89       	ldd	r16, Y+19	; 0x13
validCtr=0;
if(monthLowTest[3]==monthLowTest[2])validCtr++;
if(monthLowTest[3]==monthLowTest[1])validCtr++;
if(monthLowTest[3]==monthLowTest[0])validCtr++;
if(validCtr<3)return 666;	
validCtr=0;
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	9a 89       	ldd	r25, Y+18	; 0x12
     68a:	90 13       	cpse	r25, r16
     68c:	80 e0       	ldi	r24, 0x00	; 0
if(monthHighTest[3]==monthHighTest[2])validCtr++;
if(monthHighTest[3]==monthHighTest[1])validCtr++;
     68e:	99 89       	ldd	r25, Y+17	; 0x11
     690:	09 13       	cpse	r16, r25
     692:	01 c0       	rjmp	.+2      	; 0x696 <gpsReqDateUblox+0x14e>
     694:	8f 5f       	subi	r24, 0xFF	; 255
if(monthHighTest[3]==monthHighTest[0])validCtr++;
     696:	98 89       	ldd	r25, Y+16	; 0x10
     698:	09 13       	cpse	r16, r25
     69a:	01 c0       	rjmp	.+2      	; 0x69e <gpsReqDateUblox+0x156>
     69c:	8f 5f       	subi	r24, 0xFF	; 255
if(validCtr<3)return 666;
     69e:	83 30       	cpi	r24, 0x03	; 3
     6a0:	08 f4       	brcc	.+2      	; 0x6a4 <gpsReqDateUblox+0x15c>
     6a2:	4b c0       	rjmp	.+150    	; 0x73a <gpsReqDateUblox+0x1f2>
validCtr=0;
if(dayLowTest[3]==dayLowTest[2])validCtr++;
     6a4:	eb 8c       	ldd	r14, Y+27	; 0x1b
validCtr=0;
if(monthHighTest[3]==monthHighTest[2])validCtr++;
if(monthHighTest[3]==monthHighTest[1])validCtr++;
if(monthHighTest[3]==monthHighTest[0])validCtr++;
if(validCtr<3)return 666;
validCtr=0;
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	9a 8d       	ldd	r25, Y+26	; 0x1a
     6aa:	9e 11       	cpse	r25, r14
     6ac:	80 e0       	ldi	r24, 0x00	; 0
if(dayLowTest[3]==dayLowTest[2])validCtr++;
if(dayLowTest[3]==dayLowTest[1])validCtr++;
     6ae:	99 8d       	ldd	r25, Y+25	; 0x19
     6b0:	e9 12       	cpse	r14, r25
     6b2:	01 c0       	rjmp	.+2      	; 0x6b6 <gpsReqDateUblox+0x16e>
     6b4:	8f 5f       	subi	r24, 0xFF	; 255
if(dayLowTest[3]==dayLowTest[0])validCtr++;
     6b6:	98 8d       	ldd	r25, Y+24	; 0x18
     6b8:	e9 12       	cpse	r14, r25
     6ba:	01 c0       	rjmp	.+2      	; 0x6be <gpsReqDateUblox+0x176>
     6bc:	8f 5f       	subi	r24, 0xFF	; 255
if(validCtr<3)return 666;
     6be:	83 30       	cpi	r24, 0x03	; 3
     6c0:	08 f4       	brcc	.+2      	; 0x6c4 <gpsReqDateUblox+0x17c>
     6c2:	40 c0       	rjmp	.+128    	; 0x744 <gpsReqDateUblox+0x1fc>
validCtr=0;
if(dayHighTest[3]==dayHighTest[2])validCtr++;
     6c4:	df 8c       	ldd	r13, Y+31	; 0x1f
validCtr=0;
if(dayLowTest[3]==dayLowTest[2])validCtr++;
if(dayLowTest[3]==dayLowTest[1])validCtr++;
if(dayLowTest[3]==dayLowTest[0])validCtr++;
if(validCtr<3)return 666;
validCtr=0;
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     6ca:	9d 11       	cpse	r25, r13
     6cc:	80 e0       	ldi	r24, 0x00	; 0
if(dayHighTest[3]==dayHighTest[2])validCtr++;
if(dayHighTest[3]==dayHighTest[1])validCtr++;
     6ce:	9d 8d       	ldd	r25, Y+29	; 0x1d
     6d0:	d9 12       	cpse	r13, r25
     6d2:	01 c0       	rjmp	.+2      	; 0x6d6 <gpsReqDateUblox+0x18e>
     6d4:	8f 5f       	subi	r24, 0xFF	; 255
if(dayHighTest[3]==dayHighTest[0])validCtr++;
     6d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     6d8:	d9 12       	cpse	r13, r25
     6da:	48 c0       	rjmp	.+144    	; 0x76c <gpsReqDateUblox+0x224>
if(validCtr<3)return 666;
     6dc:	8f 5f       	subi	r24, 0xFF	; 255
     6de:	83 30       	cpi	r24, 0x03	; 3
     6e0:	b0 f1       	brcs	.+108    	; 0x74e <gpsReqDateUblox+0x206>
     6e2:	e5 e9       	ldi	r30, 0x95	; 149
     6e4:	fe e3       	ldi	r31, 0x3E	; 62
     6e6:	8c ea       	ldi	r24, 0xAC	; 172
     6e8:	9e e3       	ldi	r25, 0x3E	; 62
for(validCtr=0;validCtr<SIZEOFGPSPARAMS;validCtr++){
	gpsParams[validCtr]=0;
     6ea:	11 92       	st	Z+, r1
validCtr=0;
if(dayHighTest[3]==dayHighTest[2])validCtr++;
if(dayHighTest[3]==dayHighTest[1])validCtr++;
if(dayHighTest[3]==dayHighTest[0])validCtr++;
if(validCtr<3)return 666;
for(validCtr=0;validCtr<SIZEOFGPSPARAMS;validCtr++){
     6ec:	e8 17       	cp	r30, r24
     6ee:	f9 07       	cpc	r31, r25
     6f0:	e1 f7       	brne	.-8      	; 0x6ea <gpsReqDateUblox+0x1a2>
	gpsParams[validCtr]=0;
}
if((dayLowTest[3])!=','){
     6f2:	9c e2       	ldi	r25, 0x2C	; 44
     6f4:	e9 16       	cp	r14, r25
     6f6:	81 f1       	breq	.+96     	; 0x758 <gpsReqDateUblox+0x210>
	gpsParams[0]=((char)(asciiToHex(0x30,*(GPSSearchPtr+10)))<<4)		   /*last digit of year*/
     6f8:	e0 91 b7 3e 	lds	r30, 0x3EB7	; 0x803eb7 <GPSSearchPtr>
     6fc:	f0 91 b8 3e 	lds	r31, 0x3EB8	; 0x803eb8 <GPSSearchPtr+0x1>
     700:	62 85       	ldd	r22, Z+10	; 0x0a
     702:	80 e3       	ldi	r24, 0x30	; 48
     704:	24 dd       	rcall	.-1464   	; 0x14e <asciiToHex>
     706:	c8 2e       	mov	r12, r24
	+asciiToHex(monthHighTest[3],monthLowTest[3]);		/*month uBlox*/
     708:	61 2f       	mov	r22, r17
     70a:	80 2f       	mov	r24, r16
     70c:	20 dd       	rcall	.-1472   	; 0x14e <asciiToHex>
if(validCtr<3)return 666;
for(validCtr=0;validCtr<SIZEOFGPSPARAMS;validCtr++){
	gpsParams[validCtr]=0;
}
if((dayLowTest[3])!=','){
	gpsParams[0]=((char)(asciiToHex(0x30,*(GPSSearchPtr+10)))<<4)		   /*last digit of year*/
     70e:	05 e9       	ldi	r16, 0x95	; 149
     710:	1e e3       	ldi	r17, 0x3E	; 62
     712:	e0 e1       	ldi	r30, 0x10	; 16
     714:	ce 9e       	mul	r12, r30
     716:	80 0d       	add	r24, r0
     718:	11 24       	eor	r1, r1
     71a:	f8 01       	movw	r30, r16
     71c:	80 83       	st	Z, r24
	+asciiToHex(monthHighTest[3],monthLowTest[3]);		/*month uBlox*/
	gpsParams[1]=(asciiToHex(dayHighTest[3],dayLowTest[3]))<<3; 	/*day uBlox*/
     71e:	6e 2d       	mov	r22, r14
     720:	8d 2d       	mov	r24, r13
     722:	15 dd       	rcall	.-1494   	; 0x14e <asciiToHex>
     724:	88 0f       	add	r24, r24
     726:	88 0f       	add	r24, r24
     728:	88 0f       	add	r24, r24
     72a:	f8 01       	movw	r30, r16
     72c:	81 83       	std	Z+1, r24	; 0x01
	return 0;
     72e:	21 c0       	rjmp	.+66     	; 0x772 <gpsReqDateUblox+0x22a>

validCtr=0;
if(monthLowTest[3]==monthLowTest[2])validCtr++;
if(monthLowTest[3]==monthLowTest[1])validCtr++;
if(monthLowTest[3]==monthLowTest[0])validCtr++;
if(validCtr<3)return 666;	
     730:	0f 2e       	mov	r0, r31
     732:	fa e9       	ldi	r31, 0x9A	; 154
     734:	ff 2e       	mov	r15, r31
     736:	f0 2d       	mov	r31, r0
     738:	1c c0       	rjmp	.+56     	; 0x772 <gpsReqDateUblox+0x22a>
validCtr=0;
if(monthHighTest[3]==monthHighTest[2])validCtr++;
if(monthHighTest[3]==monthHighTest[1])validCtr++;
if(monthHighTest[3]==monthHighTest[0])validCtr++;
if(validCtr<3)return 666;
     73a:	0f 2e       	mov	r0, r31
     73c:	fa e9       	ldi	r31, 0x9A	; 154
     73e:	ff 2e       	mov	r15, r31
     740:	f0 2d       	mov	r31, r0
     742:	17 c0       	rjmp	.+46     	; 0x772 <gpsReqDateUblox+0x22a>
validCtr=0;
if(dayLowTest[3]==dayLowTest[2])validCtr++;
if(dayLowTest[3]==dayLowTest[1])validCtr++;
if(dayLowTest[3]==dayLowTest[0])validCtr++;
if(validCtr<3)return 666;
     744:	0f 2e       	mov	r0, r31
     746:	fa e9       	ldi	r31, 0x9A	; 154
     748:	ff 2e       	mov	r15, r31
     74a:	f0 2d       	mov	r31, r0
     74c:	12 c0       	rjmp	.+36     	; 0x772 <gpsReqDateUblox+0x22a>
validCtr=0;
if(dayHighTest[3]==dayHighTest[2])validCtr++;
if(dayHighTest[3]==dayHighTest[1])validCtr++;
if(dayHighTest[3]==dayHighTest[0])validCtr++;
if(validCtr<3)return 666;
     74e:	0f 2e       	mov	r0, r31
     750:	fa e9       	ldi	r31, 0x9A	; 154
     752:	ff 2e       	mov	r15, r31
     754:	f0 2d       	mov	r31, r0
     756:	0d c0       	rjmp	.+26     	; 0x772 <gpsReqDateUblox+0x22a>
	gpsParams[0]=((char)(asciiToHex(0x30,*(GPSSearchPtr+10)))<<4)		   /*last digit of year*/
	+asciiToHex(monthHighTest[3],monthLowTest[3]);		/*month uBlox*/
	gpsParams[1]=(asciiToHex(dayHighTest[3],dayLowTest[3]))<<3; 	/*day uBlox*/
	return 0;
	}else{
	return 66;
     758:	0f 2e       	mov	r0, r31
     75a:	f2 e4       	ldi	r31, 0x42	; 66
     75c:	ff 2e       	mov	r15, r31
     75e:	f0 2d       	mov	r31, r0
     760:	08 c0       	rjmp	.+16     	; 0x772 <gpsReqDateUblox+0x22a>
if(validCtr<3)return 666;
validCtr=0;
if(dayHighTest[3]==dayHighTest[2])validCtr++;
if(dayHighTest[3]==dayHighTest[1])validCtr++;
if(dayHighTest[3]==dayHighTest[0])validCtr++;
if(validCtr<3)return 666;
     762:	0f 2e       	mov	r0, r31
     764:	fa e9       	ldi	r31, 0x9A	; 154
     766:	ff 2e       	mov	r15, r31
     768:	f0 2d       	mov	r31, r0
     76a:	03 c0       	rjmp	.+6      	; 0x772 <gpsReqDateUblox+0x22a>
     76c:	83 30       	cpi	r24, 0x03	; 3
     76e:	c8 f3       	brcs	.-14     	; 0x762 <gpsReqDateUblox+0x21a>
     770:	b8 cf       	rjmp	.-144    	; 0x6e2 <gpsReqDateUblox+0x19a>
	gpsParams[1]=(asciiToHex(dayHighTest[3],dayLowTest[3]))<<3; 	/*day uBlox*/
	return 0;
	}else{
	return 66;
}
}
     772:	8f 2d       	mov	r24, r15
     774:	6f 96       	adiw	r28, 0x1f	; 31
     776:	cd bf       	out	0x3d, r28	; 61
     778:	de bf       	out	0x3e, r29	; 62
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	1f 91       	pop	r17
     780:	0f 91       	pop	r16
     782:	ff 90       	pop	r15
     784:	ef 90       	pop	r14
     786:	df 90       	pop	r13
     788:	cf 90       	pop	r12
     78a:	08 95       	ret

0000078c <GPSgetDate>:
}
/***********************************************************************/
/*  GPS Try 3 Req Date uBlox
/***********************************************************************/
char GPSgetDate (void){
	if((gpsReqDateUblox()==0)&&((*(GPSSearchPtr+10))!='X'))return 0;
     78c:	dd de       	rcall	.-582    	; 0x548 <gpsReqDateUblox>
     78e:	81 11       	cpse	r24, r1
     790:	07 c0       	rjmp	.+14     	; 0x7a0 <GPSgetDate+0x14>
     792:	e0 91 b7 3e 	lds	r30, 0x3EB7	; 0x803eb7 <GPSSearchPtr>
     796:	f0 91 b8 3e 	lds	r31, 0x3EB8	; 0x803eb8 <GPSSearchPtr+0x1>
     79a:	92 85       	ldd	r25, Z+10	; 0x0a
     79c:	98 35       	cpi	r25, 0x58	; 88
     79e:	61 f5       	brne	.+88     	; 0x7f8 <GPSgetDate+0x6c>
	if((gpsReqDateUblox()==0)&&((*(GPSSearchPtr+10))!='X'))return 0;
     7a0:	d3 de       	rcall	.-602    	; 0x548 <gpsReqDateUblox>
     7a2:	81 11       	cpse	r24, r1
     7a4:	07 c0       	rjmp	.+14     	; 0x7b4 <GPSgetDate+0x28>
     7a6:	e0 91 b7 3e 	lds	r30, 0x3EB7	; 0x803eb7 <GPSSearchPtr>
     7aa:	f0 91 b8 3e 	lds	r31, 0x3EB8	; 0x803eb8 <GPSSearchPtr+0x1>
     7ae:	92 85       	ldd	r25, Z+10	; 0x0a
     7b0:	98 35       	cpi	r25, 0x58	; 88
     7b2:	11 f5       	brne	.+68     	; 0x7f8 <GPSgetDate+0x6c>
	if((gpsReqDateUblox()==0)&&((*(GPSSearchPtr+10))!='X'))return 0;
     7b4:	c9 de       	rcall	.-622    	; 0x548 <gpsReqDateUblox>
     7b6:	81 11       	cpse	r24, r1
     7b8:	07 c0       	rjmp	.+14     	; 0x7c8 <GPSgetDate+0x3c>
     7ba:	e0 91 b7 3e 	lds	r30, 0x3EB7	; 0x803eb7 <GPSSearchPtr>
     7be:	f0 91 b8 3e 	lds	r31, 0x3EB8	; 0x803eb8 <GPSSearchPtr+0x1>
     7c2:	92 85       	ldd	r25, Z+10	; 0x0a
     7c4:	98 35       	cpi	r25, 0x58	; 88
     7c6:	c1 f4       	brne	.+48     	; 0x7f8 <GPSgetDate+0x6c>
	if((gpsReqDateUblox()==0)&&((*(GPSSearchPtr+10))!='X'))return 0;
     7c8:	bf de       	rcall	.-642    	; 0x548 <gpsReqDateUblox>
     7ca:	81 11       	cpse	r24, r1
     7cc:	07 c0       	rjmp	.+14     	; 0x7dc <GPSgetDate+0x50>
     7ce:	e0 91 b7 3e 	lds	r30, 0x3EB7	; 0x803eb7 <GPSSearchPtr>
     7d2:	f0 91 b8 3e 	lds	r31, 0x3EB8	; 0x803eb8 <GPSSearchPtr+0x1>
     7d6:	92 85       	ldd	r25, Z+10	; 0x0a
     7d8:	98 35       	cpi	r25, 0x58	; 88
     7da:	71 f4       	brne	.+28     	; 0x7f8 <GPSgetDate+0x6c>
	if((gpsReqDateUblox()==0)&&((*(GPSSearchPtr+10))!='X'))return 0;else return 666;
     7dc:	b5 de       	rcall	.-662    	; 0x548 <gpsReqDateUblox>
     7de:	81 11       	cpse	r24, r1
     7e0:	08 c0       	rjmp	.+16     	; 0x7f2 <GPSgetDate+0x66>
     7e2:	e0 91 b7 3e 	lds	r30, 0x3EB7	; 0x803eb7 <GPSSearchPtr>
     7e6:	f0 91 b8 3e 	lds	r31, 0x3EB8	; 0x803eb8 <GPSSearchPtr+0x1>
     7ea:	92 85       	ldd	r25, Z+10	; 0x0a
     7ec:	98 35       	cpi	r25, 0x58	; 88
     7ee:	21 f4       	brne	.+8      	; 0x7f8 <GPSgetDate+0x6c>
     7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <GPSgetDate+0x6a>
     7f2:	8a e9       	ldi	r24, 0x9A	; 154
     7f4:	08 95       	ret
     7f6:	8a e9       	ldi	r24, 0x9A	; 154
}
     7f8:	08 95       	ret

000007fa <gpsReqStatusUblox>:
}
}
/***********************************************************************/
/*  GPS Req Status
/***********************************************************************/
char gpsReqStatusUblox (void){
     7fa:	ff 92       	push	r15
     7fc:	0f 93       	push	r16
     7fe:	1f 93       	push	r17
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
	int i=5;
	unsigned char validLoc, numCommas=0;
	validLoc=0;
	uBloxStatus=0;
     804:	10 92 b4 3e 	sts	0x3EB4, r1	; 0x803eb4 <uBloxStatus>
     808:	03 e0       	ldi	r16, 0x03	; 3
     80a:	10 e0       	ldi	r17, 0x00	; 0
/*  GPS Req Status
/***********************************************************************/
char gpsReqStatusUblox (void){
	int i=5;
	unsigned char validLoc, numCommas=0;
	validLoc=0;
     80c:	f1 2c       	mov	r15, r1
	uBloxStatus=0;
	for(i=3;i>0;i--){//try it four times
		clrRx();
		USART0.CTRLA |= USART_RXCIE_bm;
     80e:	c0 e0       	ldi	r28, 0x00	; 0
     810:	d8 e0       	ldi	r29, 0x08	; 8
	int i=5;
	unsigned char validLoc, numCommas=0;
	validLoc=0;
	uBloxStatus=0;
	for(i=3;i>0;i--){//try it four times
		clrRx();
     812:	7f de       	rcall	.-770    	; 0x512 <clrRx>
		USART0.CTRLA |= USART_RXCIE_bm;
     814:	8d 81       	ldd	r24, Y+5	; 0x05
     816:	80 68       	ori	r24, 0x80	; 128
     818:	8d 83       	std	Y+5, r24	; 0x05
		ENABLE_INTERRUPTS();
     81a:	78 94       	sei
		myDelay_ms(1100);
     81c:	6c e4       	ldi	r22, 0x4C	; 76
     81e:	74 e0       	ldi	r23, 0x04	; 4
     820:	80 e0       	ldi	r24, 0x00	; 0
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	df dc       	rcall	.-1602   	; 0x1e4 <myDelay_ms>
		timeToFix++;
     826:	80 91 ac 3e 	lds	r24, 0x3EAC	; 0x803eac <timeToFix>
     82a:	90 91 ad 3e 	lds	r25, 0x3EAD	; 0x803ead <timeToFix+0x1>
     82e:	01 96       	adiw	r24, 0x01	; 1
     830:	80 93 ac 3e 	sts	0x3EAC, r24	; 0x803eac <timeToFix>
     834:	90 93 ad 3e 	sts	0x3EAD, r25	; 0x803ead <timeToFix+0x1>
		if((timeToFix>MAX_GPS_ACQ)&&(mState!=INITIAL_GPS)){
     838:	89 3c       	cpi	r24, 0xC9	; 201
     83a:	91 05       	cpc	r25, r1
     83c:	44 f0       	brlt	.+16     	; 0x84e <gpsReqStatusUblox+0x54>
     83e:	80 91 b1 3e 	lds	r24, 0x3EB1	; 0x803eb1 <mState>
     842:	87 30       	cpi	r24, 0x07	; 7
     844:	21 f0       	breq	.+8      	; 0x84e <gpsReqStatusUblox+0x54>
			uBloxStatus=66;
     846:	82 e4       	ldi	r24, 0x42	; 66
     848:	80 93 b4 3e 	sts	0x3EB4, r24	; 0x803eb4 <uBloxStatus>
			return 66;
     84c:	39 c0       	rjmp	.+114    	; 0x8c0 <gpsReqStatusUblox+0xc6>
		}
	  	USART0.CTRLA &= ~USART_RXCIE_bm;//DISABLE Rx Interrupt
     84e:	8d 81       	ldd	r24, Y+5	; 0x05
     850:	8f 77       	andi	r24, 0x7F	; 127
     852:	8d 83       	std	Y+5, r24	; 0x05
		if(searchRcvBuffuBlox('R','M','C')==0){
     854:	43 e4       	ldi	r20, 0x43	; 67
     856:	6d e4       	ldi	r22, 0x4D	; 77
     858:	82 e5       	ldi	r24, 0x52	; 82
     85a:	31 dc       	rcall	.-1950   	; 0xbe <searchRcvBuffuBlox>
     85c:	89 2b       	or	r24, r25
     85e:	91 f0       	breq	.+36     	; 0x884 <gpsReqStatusUblox+0x8a>
     860:	1a c0       	rjmp	.+52     	; 0x896 <gpsReqStatusUblox+0x9c>
			numCommas=0;
			while (GPSSearchPtr < &(g_uc_receive_buffer[BUFFER_SIZE])){
				GPSSearchPtr++;
     862:	cf 01       	movw	r24, r30
     864:	01 96       	adiw	r24, 0x01	; 1
     866:	80 93 b7 3e 	sts	0x3EB7, r24	; 0x803eb7 <GPSSearchPtr>
     86a:	90 93 b8 3e 	sts	0x3EB8, r25	; 0x803eb8 <GPSSearchPtr+0x1>
				if(*GPSSearchPtr == ','){
     86e:	81 81       	ldd	r24, Z+1	; 0x01
     870:	8c 32       	cpi	r24, 0x2C	; 44
     872:	49 f4       	brne	.+18     	; 0x886 <gpsReqStatusUblox+0x8c>
					numCommas++;
     874:	2f 5f       	subi	r18, 0xFF	; 255
					if(numCommas==2){
     876:	22 30       	cpi	r18, 0x02	; 2
     878:	31 f4       	brne	.+12     	; 0x886 <gpsReqStatusUblox+0x8c>
						if(((*(GPSSearchPtr+1))==',')||((*(GPSSearchPtr+1))=='X'))break;
     87a:	82 81       	ldd	r24, Z+2	; 0x02
     87c:	81 34       	cpi	r24, 0x41	; 65
     87e:	59 f4       	brne	.+22     	; 0x896 <gpsReqStatusUblox+0x9c>
						else{
							if(*(GPSSearchPtr+1)=='A')
								validLoc++;
     880:	f3 94       	inc	r15
     882:	09 c0       	rjmp	.+18     	; 0x896 <gpsReqStatusUblox+0x9c>
     884:	20 e0       	ldi	r18, 0x00	; 0
			return 66;
		}
	  	USART0.CTRLA &= ~USART_RXCIE_bm;//DISABLE Rx Interrupt
		if(searchRcvBuffuBlox('R','M','C')==0){
			numCommas=0;
			while (GPSSearchPtr < &(g_uc_receive_buffer[BUFFER_SIZE])){
     886:	e0 91 b7 3e 	lds	r30, 0x3EB7	; 0x803eb7 <GPSSearchPtr>
     88a:	f0 91 b8 3e 	lds	r31, 0x3EB8	; 0x803eb8 <GPSSearchPtr+0x1>
     88e:	8e e3       	ldi	r24, 0x3E	; 62
     890:	ee 37       	cpi	r30, 0x7E	; 126
     892:	f8 07       	cpc	r31, r24
     894:	30 f3       	brcs	.-52     	; 0x862 <gpsReqStatusUblox+0x68>
     896:	01 50       	subi	r16, 0x01	; 1
     898:	11 09       	sbc	r17, r1
char gpsReqStatusUblox (void){
	int i=5;
	unsigned char validLoc, numCommas=0;
	validLoc=0;
	uBloxStatus=0;
	for(i=3;i>0;i--){//try it four times
     89a:	09 f0       	breq	.+2      	; 0x89e <gpsReqStatusUblox+0xa4>
     89c:	ba cf       	rjmp	.-140    	; 0x812 <gpsReqStatusUblox+0x18>
						}
					}
				}
			}
	}//end of if 3 of 4 are good, including the last one
	if((validLoc>=2)&&(*(GPSSearchPtr+1)=='A')){  //gets here pretty quick after status goes to 'A'
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	8f 15       	cp	r24, r15
     8a2:	58 f4       	brcc	.+22     	; 0x8ba <gpsReqStatusUblox+0xc0>
     8a4:	e0 91 b7 3e 	lds	r30, 0x3EB7	; 0x803eb7 <GPSSearchPtr>
     8a8:	f0 91 b8 3e 	lds	r31, 0x3EB8	; 0x803eb8 <GPSSearchPtr+0x1>
     8ac:	81 81       	ldd	r24, Z+1	; 0x01
     8ae:	81 34       	cpi	r24, 0x41	; 65
     8b0:	21 f4       	brne	.+8      	; 0x8ba <gpsReqStatusUblox+0xc0>
	uBloxStatus='A';
     8b2:	80 93 b4 3e 	sts	0x3EB4, r24	; 0x803eb4 <uBloxStatus>
	return 0;
     8b6:	80 e0       	ldi	r24, 0x00	; 0
     8b8:	03 c0       	rjmp	.+6      	; 0x8c0 <gpsReqStatusUblox+0xc6>
	}else{
	uBloxStatus=66;
     8ba:	82 e4       	ldi	r24, 0x42	; 66
     8bc:	80 93 b4 3e 	sts	0x3EB4, r24	; 0x803eb4 <uBloxStatus>
	return 66;
	}
}
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	1f 91       	pop	r17
     8c6:	0f 91       	pop	r16
     8c8:	ff 90       	pop	r15
     8ca:	08 95       	ret

000008cc <gpsReqLocUblox>:
	if((gpsReqLocUblox()==0)&&((*(GPSSearchPtr+43))!='X'))return 0;else return 666;
}
/***********************************************************************/
/*  GPS Req Number of Satellites
/***********************************************************************/
char gpsReqLocUblox (void){
     8cc:	7f 92       	push	r7
     8ce:	8f 92       	push	r8
     8d0:	9f 92       	push	r9
     8d2:	af 92       	push	r10
     8d4:	bf 92       	push	r11
     8d6:	cf 92       	push	r12
     8d8:	df 92       	push	r13
     8da:	ef 92       	push	r14
     8dc:	ff 92       	push	r15
     8de:	0f 93       	push	r16
     8e0:	1f 93       	push	r17
     8e2:	cf 93       	push	r28
     8e4:	df 93       	push	r29
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
     8ea:	6f 97       	sbiw	r28, 0x1f	; 31
     8ec:	cd bf       	out	0x3d, r28	; 61
     8ee:	de bf       	out	0x3e, r29	; 62
	char i;
	unsigned char validDate, numCommas=0;
	char stuffToSend[] = {'$','G','N','G','N','Q',',','G','N','S','*',0x32,0x37,0x0D,0x0A};
     8f0:	8f e0       	ldi	r24, 0x0F	; 15
     8f2:	e6 e9       	ldi	r30, 0x96	; 150
     8f4:	fa e9       	ldi	r31, 0x9A	; 154
     8f6:	de 01       	movw	r26, r28
     8f8:	11 96       	adiw	r26, 0x01	; 1
     8fa:	01 90       	ld	r0, Z+
     8fc:	0d 92       	st	X+, r0
     8fe:	8a 95       	dec	r24
     900:	e1 f7       	brne	.-8      	; 0x8fa <gpsReqLocUblox+0x2e>
     902:	68 94       	set
     904:	dd 24       	eor	r13, r13
     906:	d2 f8       	bld	r13, 2
	char validCtr=0;
     908:	c1 2c       	mov	r12, r1
	char minHighTest[4];

	for(i=4;i>0;i--){//try it four times.This value must match the size of monthHourLowTest[4]
		usart_put_string(stuffToSend,15);
		clrRx();
		USART0.CTRLA |= USART_RXCIE_bm;
     90a:	e1 2c       	mov	r14, r1
     90c:	68 94       	set
     90e:	ff 24       	eor	r15, r15
     910:	f3 f8       	bld	r15, 3
	char hourLowTest[4];
	char minLowTest[4];
	char minHighTest[4];

	for(i=4;i>0;i--){//try it four times.This value must match the size of monthHourLowTest[4]
		usart_put_string(stuffToSend,15);
     912:	6f e0       	ldi	r22, 0x0F	; 15
     914:	ce 01       	movw	r24, r28
     916:	01 96       	adiw	r24, 0x01	; 1
     918:	c8 dc       	rcall	.-1648   	; 0x2aa <usart_put_string>
		clrRx();
     91a:	fb dd       	rcall	.-1034   	; 0x512 <clrRx>
		USART0.CTRLA |= USART_RXCIE_bm;
     91c:	d7 01       	movw	r26, r14
     91e:	15 96       	adiw	r26, 0x05	; 5
     920:	8c 91       	ld	r24, X
     922:	15 97       	sbiw	r26, 0x05	; 5
     924:	80 68       	ori	r24, 0x80	; 128
     926:	15 96       	adiw	r26, 0x05	; 5
     928:	8c 93       	st	X, r24
		ENABLE_INTERRUPTS();
     92a:	78 94       	sei
		myDelay_ms(1100);
     92c:	6c e4       	ldi	r22, 0x4C	; 76
     92e:	74 e0       	ldi	r23, 0x04	; 4
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	90 e0       	ldi	r25, 0x00	; 0
     934:	57 dc       	rcall	.-1874   	; 0x1e4 <myDelay_ms>
		if((timeToFix>MAX_GPS_ACQ)&&(mState!=INITIAL_GPS)){
     936:	00 91 ac 3e 	lds	r16, 0x3EAC	; 0x803eac <timeToFix>
     93a:	10 91 ad 3e 	lds	r17, 0x3EAD	; 0x803ead <timeToFix+0x1>
     93e:	09 3c       	cpi	r16, 0xC9	; 201
     940:	11 05       	cpc	r17, r1
     942:	64 f0       	brlt	.+24     	; 0x95c <gpsReqLocUblox+0x90>
     944:	80 91 b1 3e 	lds	r24, 0x3EB1	; 0x803eb1 <mState>
     948:	87 30       	cpi	r24, 0x07	; 7
     94a:	41 f0       	breq	.+16     	; 0x95c <gpsReqLocUblox+0x90>
			uBloxStatus=66;
     94c:	82 e4       	ldi	r24, 0x42	; 66
     94e:	80 93 b4 3e 	sts	0x3EB4, r24	; 0x803eb4 <uBloxStatus>
			return 66;
     952:	0f 2e       	mov	r0, r31
     954:	f2 e4       	ldi	r31, 0x42	; 66
     956:	df 2e       	mov	r13, r31
     958:	f0 2d       	mov	r31, r0
     95a:	5c c1       	rjmp	.+696    	; 0xc14 <gpsReqLocUblox+0x348>
		}
		timeToFix++;
     95c:	0f 5f       	subi	r16, 0xFF	; 255
     95e:	1f 4f       	sbci	r17, 0xFF	; 255
     960:	00 93 ac 3e 	sts	0x3EAC, r16	; 0x803eac <timeToFix>
     964:	10 93 ad 3e 	sts	0x3EAD, r17	; 0x803ead <timeToFix+0x1>
	  	USART0.CTRLA &= ~USART_RXCIE_bm;//DISABLE Rx Interrupt
     968:	f7 01       	movw	r30, r14
     96a:	85 81       	ldd	r24, Z+5	; 0x05
     96c:	8f 77       	andi	r24, 0x7F	; 127
     96e:	85 83       	std	Z+5, r24	; 0x05
		if(searchRcvBuffuBlox('G','N','S')==0){
     970:	43 e5       	ldi	r20, 0x53	; 83
     972:	6e e4       	ldi	r22, 0x4E	; 78
     974:	87 e4       	ldi	r24, 0x47	; 71
     976:	a3 db       	rcall	.-2234   	; 0xbe <searchRcvBuffuBlox>
     978:	89 2b       	or	r24, r25
     97a:	09 f4       	brne	.+2      	; 0x97e <gpsReqLocUblox+0xb2>
     97c:	47 c0       	rjmp	.+142    	; 0xa0c <gpsReqLocUblox+0x140>
     97e:	50 c0       	rjmp	.+160    	; 0xa20 <gpsReqLocUblox+0x154>
			numCommas=0;
			while (GPSSearchPtr < &(g_uc_receive_buffer[BUFFER_SIZE])){
			GPSSearchPtr++;
     980:	cf 01       	movw	r24, r30
     982:	01 96       	adiw	r24, 0x01	; 1
     984:	80 93 b7 3e 	sts	0x3EB7, r24	; 0x803eb7 <GPSSearchPtr>
     988:	90 93 b8 3e 	sts	0x3EB8, r25	; 0x803eb8 <GPSSearchPtr+0x1>
				if(*GPSSearchPtr == ','){
     98c:	81 81       	ldd	r24, Z+1	; 0x01
     98e:	8c 32       	cpi	r24, 0x2C	; 44
     990:	f1 f5       	brne	.+124    	; 0xa0e <gpsReqLocUblox+0x142>
					numCommas++;
     992:	2f 5f       	subi	r18, 0xFF	; 255
					if(numCommas==2){
     994:	22 30       	cpi	r18, 0x02	; 2
     996:	d9 f5       	brne	.+118    	; 0xa0e <gpsReqLocUblox+0x142>
						if(((*(GPSSearchPtr+1))==',')||((*(GPSSearchPtr+1))=='X'))break;
     998:	82 81       	ldd	r24, Z+2	; 0x02
     99a:	8c 32       	cpi	r24, 0x2C	; 44
     99c:	09 f4       	brne	.+2      	; 0x9a0 <gpsReqLocUblox+0xd4>
     99e:	40 c0       	rjmp	.+128    	; 0xa20 <gpsReqLocUblox+0x154>
     9a0:	88 35       	cpi	r24, 0x58	; 88
     9a2:	f1 f1       	breq	.+124    	; 0xa20 <gpsReqLocUblox+0x154>
						else{
							hourLowTest[validCtr]=(*(GPSSearchPtr-8));
     9a4:	8c 2d       	mov	r24, r12
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	44 e1       	ldi	r20, 0x14	; 20
     9aa:	50 e0       	ldi	r21, 0x00	; 0
     9ac:	4c 0f       	add	r20, r28
     9ae:	5d 1f       	adc	r21, r29
     9b0:	48 0f       	add	r20, r24
     9b2:	59 1f       	adc	r21, r25
     9b4:	9f 01       	movw	r18, r30
     9b6:	27 50       	subi	r18, 0x07	; 7
     9b8:	31 09       	sbc	r19, r1
     9ba:	d9 01       	movw	r26, r18
     9bc:	2c 91       	ld	r18, X
     9be:	da 01       	movw	r26, r20
     9c0:	2c 93       	st	X, r18
							hourHighTest[validCtr]=(*(GPSSearchPtr-9));
     9c2:	40 e1       	ldi	r20, 0x10	; 16
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	4c 0f       	add	r20, r28
     9c8:	5d 1f       	adc	r21, r29
     9ca:	48 0f       	add	r20, r24
     9cc:	59 1f       	adc	r21, r25
     9ce:	9f 01       	movw	r18, r30
     9d0:	28 50       	subi	r18, 0x08	; 8
     9d2:	31 09       	sbc	r19, r1
     9d4:	d9 01       	movw	r26, r18
     9d6:	2c 91       	ld	r18, X
     9d8:	da 01       	movw	r26, r20
     9da:	2c 93       	st	X, r18
							minLowTest[validCtr]=(*(GPSSearchPtr-6));
     9dc:	48 e1       	ldi	r20, 0x18	; 24
     9de:	50 e0       	ldi	r21, 0x00	; 0
     9e0:	4c 0f       	add	r20, r28
     9e2:	5d 1f       	adc	r21, r29
     9e4:	48 0f       	add	r20, r24
     9e6:	59 1f       	adc	r21, r25
     9e8:	9f 01       	movw	r18, r30
     9ea:	25 50       	subi	r18, 0x05	; 5
     9ec:	31 09       	sbc	r19, r1
     9ee:	d9 01       	movw	r26, r18
     9f0:	2c 91       	ld	r18, X
     9f2:	da 01       	movw	r26, r20
     9f4:	2c 93       	st	X, r18
							minHighTest[validCtr]=(*(GPSSearchPtr-7));
     9f6:	ac e1       	ldi	r26, 0x1C	; 28
     9f8:	b0 e0       	ldi	r27, 0x00	; 0
     9fa:	ac 0f       	add	r26, r28
     9fc:	bd 1f       	adc	r27, r29
     9fe:	a8 0f       	add	r26, r24
     a00:	b9 1f       	adc	r27, r25
     a02:	36 97       	sbiw	r30, 0x06	; 6
     a04:	20 81       	ld	r18, Z
     a06:	2c 93       	st	X, r18
							validCtr++;
     a08:	c3 94       	inc	r12
							break;
     a0a:	0a c0       	rjmp	.+20     	; 0xa20 <gpsReqLocUblox+0x154>
     a0c:	20 e0       	ldi	r18, 0x00	; 0
		}
		timeToFix++;
	  	USART0.CTRLA &= ~USART_RXCIE_bm;//DISABLE Rx Interrupt
		if(searchRcvBuffuBlox('G','N','S')==0){
			numCommas=0;
			while (GPSSearchPtr < &(g_uc_receive_buffer[BUFFER_SIZE])){
     a0e:	e0 91 b7 3e 	lds	r30, 0x3EB7	; 0x803eb7 <GPSSearchPtr>
     a12:	f0 91 b8 3e 	lds	r31, 0x3EB8	; 0x803eb8 <GPSSearchPtr+0x1>
     a16:	be e3       	ldi	r27, 0x3E	; 62
     a18:	ee 37       	cpi	r30, 0x7E	; 126
     a1a:	fb 07       	cpc	r31, r27
     a1c:	08 f4       	brcc	.+2      	; 0xa20 <gpsReqLocUblox+0x154>
     a1e:	b0 cf       	rjmp	.-160    	; 0x980 <gpsReqLocUblox+0xb4>
     a20:	da 94       	dec	r13
	char hourHighTest[4];
	char hourLowTest[4];
	char minLowTest[4];
	char minHighTest[4];

	for(i=4;i>0;i--){//try it four times.This value must match the size of monthHourLowTest[4]
     a22:	d1 10       	cpse	r13, r1
     a24:	76 cf       	rjmp	.-276    	; 0x912 <gpsReqLocUblox+0x46>
				}
			}
		}
	}//end of if 3 of 4 are good, including the last one
	validCtr=0;
	if(hourLowTest[3]==hourLowTest[2])validCtr++;
     a26:	6f 89       	ldd	r22, Y+23	; 0x17
						}
				}
			}
		}
	}//end of if 3 of 4 are good, including the last one
	validCtr=0;
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	9e 89       	ldd	r25, Y+22	; 0x16
     a2c:	96 13       	cpse	r25, r22
     a2e:	80 e0       	ldi	r24, 0x00	; 0
	if(hourLowTest[3]==hourLowTest[2])validCtr++;
	if(hourLowTest[3]==hourLowTest[1])validCtr++;
     a30:	9d 89       	ldd	r25, Y+21	; 0x15
     a32:	69 13       	cpse	r22, r25
     a34:	01 c0       	rjmp	.+2      	; 0xa38 <gpsReqLocUblox+0x16c>
     a36:	8f 5f       	subi	r24, 0xFF	; 255
	if(hourLowTest[3]==hourLowTest[0])validCtr++;
     a38:	9c 89       	ldd	r25, Y+20	; 0x14
     a3a:	69 13       	cpse	r22, r25
     a3c:	01 c0       	rjmp	.+2      	; 0xa40 <gpsReqLocUblox+0x174>
     a3e:	8f 5f       	subi	r24, 0xFF	; 255
	if(validCtr<3)return 666;	
     a40:	83 30       	cpi	r24, 0x03	; 3
     a42:	08 f4       	brcc	.+2      	; 0xa46 <gpsReqLocUblox+0x17a>
     a44:	cf c0       	rjmp	.+414    	; 0xbe4 <gpsReqLocUblox+0x318>
	validCtr=0;
	if(hourHighTest[3]==hourHighTest[2])validCtr++;
     a46:	8b 89       	ldd	r24, Y+19	; 0x13
	validCtr=0;
	if(hourLowTest[3]==hourLowTest[2])validCtr++;
	if(hourLowTest[3]==hourLowTest[1])validCtr++;
	if(hourLowTest[3]==hourLowTest[0])validCtr++;
	if(validCtr<3)return 666;	
	validCtr=0;
     a48:	91 e0       	ldi	r25, 0x01	; 1
     a4a:	2a 89       	ldd	r18, Y+18	; 0x12
     a4c:	28 13       	cpse	r18, r24
     a4e:	90 e0       	ldi	r25, 0x00	; 0
	if(hourHighTest[3]==hourHighTest[2])validCtr++;
	if(hourHighTest[3]==hourHighTest[1])validCtr++;
     a50:	29 89       	ldd	r18, Y+17	; 0x11
     a52:	82 13       	cpse	r24, r18
     a54:	01 c0       	rjmp	.+2      	; 0xa58 <gpsReqLocUblox+0x18c>
     a56:	9f 5f       	subi	r25, 0xFF	; 255
	if(hourHighTest[3]==hourHighTest[0])validCtr++;
     a58:	28 89       	ldd	r18, Y+16	; 0x10
     a5a:	82 13       	cpse	r24, r18
     a5c:	01 c0       	rjmp	.+2      	; 0xa60 <gpsReqLocUblox+0x194>
     a5e:	9f 5f       	subi	r25, 0xFF	; 255
	if(validCtr<3)return 666;
     a60:	93 30       	cpi	r25, 0x03	; 3
     a62:	08 f4       	brcc	.+2      	; 0xa66 <gpsReqLocUblox+0x19a>
     a64:	c4 c0       	rjmp	.+392    	; 0xbee <gpsReqLocUblox+0x322>
	validCtr=0;
	if(minHighTest[3]==minHighTest[2])validCtr++;
     a66:	cf 8c       	ldd	r12, Y+31	; 0x1f
	validCtr=0;
	if(hourHighTest[3]==hourHighTest[2])validCtr++;
	if(hourHighTest[3]==hourHighTest[1])validCtr++;
	if(hourHighTest[3]==hourHighTest[0])validCtr++;
	if(validCtr<3)return 666;
	validCtr=0;
     a68:	91 e0       	ldi	r25, 0x01	; 1
     a6a:	2e 8d       	ldd	r18, Y+30	; 0x1e
     a6c:	2c 11       	cpse	r18, r12
     a6e:	90 e0       	ldi	r25, 0x00	; 0
	if(minHighTest[3]==minHighTest[2])validCtr++;
	if(minHighTest[3]==minHighTest[1])validCtr++;
     a70:	2d 8d       	ldd	r18, Y+29	; 0x1d
     a72:	c2 12       	cpse	r12, r18
     a74:	01 c0       	rjmp	.+2      	; 0xa78 <gpsReqLocUblox+0x1ac>
     a76:	9f 5f       	subi	r25, 0xFF	; 255
	if(minHighTest[3]==minHighTest[0])validCtr++;
     a78:	2c 8d       	ldd	r18, Y+28	; 0x1c
     a7a:	c2 12       	cpse	r12, r18
     a7c:	01 c0       	rjmp	.+2      	; 0xa80 <gpsReqLocUblox+0x1b4>
     a7e:	9f 5f       	subi	r25, 0xFF	; 255
	if(validCtr<3)return 666;
     a80:	93 30       	cpi	r25, 0x03	; 3
     a82:	08 f4       	brcc	.+2      	; 0xa86 <gpsReqLocUblox+0x1ba>
     a84:	b9 c0       	rjmp	.+370    	; 0xbf8 <gpsReqLocUblox+0x32c>
	validCtr=0;
	if(minLowTest[3]==minLowTest[2])validCtr++;
     a86:	9b 8c       	ldd	r9, Y+27	; 0x1b
	validCtr=0;
	if(minHighTest[3]==minHighTest[2])validCtr++;
	if(minHighTest[3]==minHighTest[1])validCtr++;
	if(minHighTest[3]==minHighTest[0])validCtr++;
	if(validCtr<3)return 666;
	validCtr=0;
     a88:	91 e0       	ldi	r25, 0x01	; 1
     a8a:	2a 8d       	ldd	r18, Y+26	; 0x1a
     a8c:	29 11       	cpse	r18, r9
     a8e:	90 e0       	ldi	r25, 0x00	; 0
	if(minLowTest[3]==minLowTest[2])validCtr++;
	if(minLowTest[3]==minLowTest[1])validCtr++;
     a90:	29 8d       	ldd	r18, Y+25	; 0x19
     a92:	92 12       	cpse	r9, r18
     a94:	01 c0       	rjmp	.+2      	; 0xa98 <gpsReqLocUblox+0x1cc>
     a96:	9f 5f       	subi	r25, 0xFF	; 255
	if(minLowTest[3]==minLowTest[0])validCtr++;
     a98:	28 8d       	ldd	r18, Y+24	; 0x18
     a9a:	92 12       	cpse	r9, r18
     a9c:	01 c0       	rjmp	.+2      	; 0xaa0 <gpsReqLocUblox+0x1d4>
     a9e:	9f 5f       	subi	r25, 0xFF	; 255
	if(validCtr<3)return 666;
     aa0:	93 30       	cpi	r25, 0x03	; 3
     aa2:	08 f4       	brcc	.+2      	; 0xaa6 <gpsReqLocUblox+0x1da>
     aa4:	ae c0       	rjmp	.+348    	; 0xc02 <gpsReqLocUblox+0x336>
	if((minLowTest[3])!=','){
     aa6:	ec e2       	ldi	r30, 0x2C	; 44
     aa8:	9e 16       	cp	r9, r30
     aaa:	09 f4       	brne	.+2      	; 0xaae <gpsReqLocUblox+0x1e2>
     aac:	af c0       	rjmp	.+350    	; 0xc0c <gpsReqLocUblox+0x340>
	char gotHour=(asciiToHex(hourHighTest[3],hourLowTest[3]));
     aae:	4f db       	rcall	.-2402   	; 0x14e <asciiToHex>
     ab0:	78 2e       	mov	r7, r24
	char gotSecs=(asciiToHex((*(GPSSearchPtr+31)),(*(GPSSearchPtr+32))));  ///uBLOX sats
     ab2:	e0 90 b7 3e 	lds	r14, 0x3EB7	; 0x803eb7 <GPSSearchPtr>
     ab6:	f0 90 b8 3e 	lds	r15, 0x3EB8	; 0x803eb8 <GPSSearchPtr+0x1>
     aba:	d7 01       	movw	r26, r14
     abc:	90 96       	adiw	r26, 0x20	; 32
     abe:	6c 91       	ld	r22, X
     ac0:	90 97       	sbiw	r26, 0x20	; 32
     ac2:	5f 96       	adiw	r26, 0x1f	; 31
     ac4:	8c 91       	ld	r24, X
     ac6:	43 db       	rcall	.-2426   	; 0x14e <asciiToHex>
     ac8:	88 2e       	mov	r8, r24
	gpsParams[1]+=(gotHour>>2);
     aca:	0f 2e       	mov	r0, r31
     acc:	f5 e9       	ldi	r31, 0x95	; 149
     ace:	af 2e       	mov	r10, r31
     ad0:	fe e3       	ldi	r31, 0x3E	; 62
     ad2:	bf 2e       	mov	r11, r31
     ad4:	f0 2d       	mov	r31, r0
     ad6:	87 2d       	mov	r24, r7
     ad8:	86 95       	lsr	r24
     ada:	86 95       	lsr	r24
     adc:	f5 01       	movw	r30, r10
     ade:	91 81       	ldd	r25, Z+1	; 0x01
     ae0:	89 0f       	add	r24, r25
     ae2:	81 83       	std	Z+1, r24	; 0x01
	gpsParams[2]=gotHour<<6;
	gpsParams[2]+=asciiToHex(minHighTest[3],minLowTest[3]);
     ae4:	69 2d       	mov	r22, r9
     ae6:	8c 2d       	mov	r24, r12
     ae8:	32 db       	rcall	.-2460   	; 0x14e <asciiToHex>
     aea:	f0 e4       	ldi	r31, 0x40	; 64
     aec:	7f 9e       	mul	r7, r31
     aee:	80 0d       	add	r24, r0
     af0:	11 24       	eor	r1, r1
     af2:	d5 01       	movw	r26, r10
     af4:	12 96       	adiw	r26, 0x02	; 2
     af6:	8c 93       	st	X, r24
	gpsParams[3]+=((char)(asciiToHex((*(GPSSearchPtr-5)),(*(GPSSearchPtr-4)))));	/*Seconds*/
     af8:	d7 01       	movw	r26, r14
     afa:	14 97       	sbiw	r26, 0x04	; 4
     afc:	f7 01       	movw	r30, r14
     afe:	35 97       	sbiw	r30, 0x05	; 5
     b00:	6c 91       	ld	r22, X
     b02:	80 81       	ld	r24, Z
     b04:	24 db       	rcall	.-2488   	; 0x14e <asciiToHex>
     b06:	f5 01       	movw	r30, r10
     b08:	93 81       	ldd	r25, Z+3	; 0x03
     b0a:	89 0f       	add	r24, r25
     b0c:	83 83       	std	Z+3, r24	; 0x03
	if (((char)(*(GPSSearchPtr+12)))=='N')gpsParams[4]|=0x80;//LAT SIGN. gpsParams were initialized to zero in getDate
     b0e:	d7 01       	movw	r26, r14
     b10:	1c 96       	adiw	r26, 0x0c	; 12
     b12:	8c 91       	ld	r24, X
     b14:	8e 34       	cpi	r24, 0x4E	; 78
     b16:	19 f4       	brne	.+6      	; 0xb1e <gpsReqLocUblox+0x252>
     b18:	84 81       	ldd	r24, Z+4	; 0x04
     b1a:	80 68       	ori	r24, 0x80	; 128
     b1c:	84 83       	std	Z+4, r24	; 0x04
	
	gpsParams[4]+=((char)(asciiToHex((*(GPSSearchPtr+1)),(*(GPSSearchPtr+2)))));	/*LAT WHOLE uBlox*/
     b1e:	f7 01       	movw	r30, r14
     b20:	62 81       	ldd	r22, Z+2	; 0x02
     b22:	81 81       	ldd	r24, Z+1	; 0x01
     b24:	14 db       	rcall	.-2520   	; 0x14e <asciiToHex>
     b26:	0f 2e       	mov	r0, r31
     b28:	f5 e9       	ldi	r31, 0x95	; 149
     b2a:	af 2e       	mov	r10, r31
     b2c:	fe e3       	ldi	r31, 0x3E	; 62
     b2e:	bf 2e       	mov	r11, r31
     b30:	f0 2d       	mov	r31, r0
     b32:	d5 01       	movw	r26, r10
     b34:	14 96       	adiw	r26, 0x04	; 4
     b36:	9c 91       	ld	r25, X
     b38:	14 97       	sbiw	r26, 0x04	; 4
     b3a:	89 0f       	add	r24, r25
     b3c:	14 96       	adiw	r26, 0x04	; 4
     b3e:	8c 93       	st	X, r24
	
	gpsParams[5]=asciiToHex(((*(GPSSearchPtr+3))),((unsigned int)(*(GPSSearchPtr+4))));//LAT FRAC
     b40:	f7 01       	movw	r30, r14
     b42:	64 81       	ldd	r22, Z+4	; 0x04
     b44:	83 81       	ldd	r24, Z+3	; 0x03
     b46:	03 db       	rcall	.-2554   	; 0x14e <asciiToHex>
     b48:	d5 01       	movw	r26, r10
     b4a:	15 96       	adiw	r26, 0x05	; 5
     b4c:	8c 93       	st	X, r24
	gpsParams[6]=asciiToHex(((*(GPSSearchPtr+6))),((unsigned int)(*(GPSSearchPtr+7))));
     b4e:	f7 01       	movw	r30, r14
     b50:	67 81       	ldd	r22, Z+7	; 0x07
     b52:	86 81       	ldd	r24, Z+6	; 0x06
     b54:	fc da       	rcall	.-2568   	; 0x14e <asciiToHex>
     b56:	d5 01       	movw	r26, r10
     b58:	16 96       	adiw	r26, 0x06	; 6
     b5a:	8c 93       	st	X, r24
	gpsParams[7]=asciiToHex(((*(GPSSearchPtr+8))),((unsigned int)(*(GPSSearchPtr+9))));
     b5c:	f7 01       	movw	r30, r14
     b5e:	61 85       	ldd	r22, Z+9	; 0x09
     b60:	80 85       	ldd	r24, Z+8	; 0x08
     b62:	f5 da       	rcall	.-2582   	; 0x14e <asciiToHex>
     b64:	d5 01       	movw	r26, r10
     b66:	17 96       	adiw	r26, 0x07	; 7
     b68:	8c 93       	st	X, r24
  
	if (((char)(*(GPSSearchPtr+26)))=='E')gpsParams[8]|=0x40;//LONG SIGN. gpsParams were initialized to zero in getDate
     b6a:	f7 01       	movw	r30, r14
     b6c:	82 8d       	ldd	r24, Z+26	; 0x1a
     b6e:	85 34       	cpi	r24, 0x45	; 69
     b70:	21 f4       	brne	.+8      	; 0xb7a <gpsReqLocUblox+0x2ae>
     b72:	f5 01       	movw	r30, r10
     b74:	80 85       	ldd	r24, Z+8	; 0x08
     b76:	80 64       	ori	r24, 0x40	; 64
     b78:	80 87       	std	Z+8, r24	; 0x08
	if (((char)(*(GPSSearchPtr+14)))=='1')gpsParams[9]=100; /*high digit of Long whole uBlox*/
     b7a:	d7 01       	movw	r26, r14
     b7c:	1e 96       	adiw	r26, 0x0e	; 14
     b7e:	8c 91       	ld	r24, X
     b80:	81 33       	cpi	r24, 0x31	; 49
     b82:	19 f4       	brne	.+6      	; 0xb8a <gpsReqLocUblox+0x2be>
     b84:	84 e6       	ldi	r24, 0x64	; 100
     b86:	80 93 9e 3e 	sts	0x3E9E, r24	; 0x803e9e <gpsParams+0x9>
	gpsParams[9]+=((char)(asciiToHex((*(GPSSearchPtr+15)),(*(GPSSearchPtr+16)))));	/*LONG WHOLE uBlox*/
     b8a:	f7 01       	movw	r30, r14
     b8c:	60 89       	ldd	r22, Z+16	; 0x10
     b8e:	87 85       	ldd	r24, Z+15	; 0x0f
     b90:	de da       	rcall	.-2628   	; 0x14e <asciiToHex>
     b92:	0f 2e       	mov	r0, r31
     b94:	f5 e9       	ldi	r31, 0x95	; 149
     b96:	af 2e       	mov	r10, r31
     b98:	fe e3       	ldi	r31, 0x3E	; 62
     b9a:	bf 2e       	mov	r11, r31
     b9c:	f0 2d       	mov	r31, r0
     b9e:	d5 01       	movw	r26, r10
     ba0:	19 96       	adiw	r26, 0x09	; 9
     ba2:	9c 91       	ld	r25, X
     ba4:	19 97       	sbiw	r26, 0x09	; 9
     ba6:	89 0f       	add	r24, r25
     ba8:	19 96       	adiw	r26, 0x09	; 9
     baa:	8c 93       	st	X, r24
  
	gpsParams[10]=asciiToHex(((*(GPSSearchPtr+17))),((unsigned int)(*(GPSSearchPtr+18))));//LONG FRAC
     bac:	f7 01       	movw	r30, r14
     bae:	62 89       	ldd	r22, Z+18	; 0x12
     bb0:	81 89       	ldd	r24, Z+17	; 0x11
     bb2:	cd da       	rcall	.-2662   	; 0x14e <asciiToHex>
     bb4:	d5 01       	movw	r26, r10
     bb6:	1a 96       	adiw	r26, 0x0a	; 10
     bb8:	8c 93       	st	X, r24
	gpsParams[11]=asciiToHex(((*(GPSSearchPtr+20))),((unsigned int)(*(GPSSearchPtr+21))));
     bba:	f7 01       	movw	r30, r14
     bbc:	65 89       	ldd	r22, Z+21	; 0x15
     bbe:	84 89       	ldd	r24, Z+20	; 0x14
     bc0:	c6 da       	rcall	.-2676   	; 0x14e <asciiToHex>
     bc2:	d5 01       	movw	r26, r10
     bc4:	1b 96       	adiw	r26, 0x0b	; 11
     bc6:	8c 93       	st	X, r24
	gpsParams[12]=asciiToHex(((*(GPSSearchPtr+22))),((unsigned int)(*(GPSSearchPtr+23))));
     bc8:	f7 01       	movw	r30, r14
     bca:	67 89       	ldd	r22, Z+23	; 0x17
     bcc:	86 89       	ldd	r24, Z+22	; 0x16
     bce:	bf da       	rcall	.-2690   	; 0x14e <asciiToHex>
     bd0:	d5 01       	movw	r26, r10
     bd2:	1c 96       	adiw	r26, 0x0c	; 12
     bd4:	8c 93       	st	X, r24
     bd6:	1c 97       	sbiw	r26, 0x0c	; 12

	gpsParams[13]=timeToFix;
     bd8:	1d 96       	adiw	r26, 0x0d	; 13
     bda:	0c 93       	st	X, r16
     bdc:	1d 97       	sbiw	r26, 0x0d	; 13
	gpsParams[14]=(char)(asciiToHex((*(GPSSearchPtr+31)),(*(GPSSearchPtr+32))));  ///uBLOX sats
     bde:	1e 96       	adiw	r26, 0x0e	; 14
     be0:	8c 92       	st	X, r8
	
  
	return 0;
     be2:	18 c0       	rjmp	.+48     	; 0xc14 <gpsReqLocUblox+0x348>
	}//end of if 3 of 4 are good, including the last one
	validCtr=0;
	if(hourLowTest[3]==hourLowTest[2])validCtr++;
	if(hourLowTest[3]==hourLowTest[1])validCtr++;
	if(hourLowTest[3]==hourLowTest[0])validCtr++;
	if(validCtr<3)return 666;	
     be4:	0f 2e       	mov	r0, r31
     be6:	fa e9       	ldi	r31, 0x9A	; 154
     be8:	df 2e       	mov	r13, r31
     bea:	f0 2d       	mov	r31, r0
     bec:	13 c0       	rjmp	.+38     	; 0xc14 <gpsReqLocUblox+0x348>
	validCtr=0;
	if(hourHighTest[3]==hourHighTest[2])validCtr++;
	if(hourHighTest[3]==hourHighTest[1])validCtr++;
	if(hourHighTest[3]==hourHighTest[0])validCtr++;
	if(validCtr<3)return 666;
     bee:	0f 2e       	mov	r0, r31
     bf0:	fa e9       	ldi	r31, 0x9A	; 154
     bf2:	df 2e       	mov	r13, r31
     bf4:	f0 2d       	mov	r31, r0
     bf6:	0e c0       	rjmp	.+28     	; 0xc14 <gpsReqLocUblox+0x348>
	validCtr=0;
	if(minHighTest[3]==minHighTest[2])validCtr++;
	if(minHighTest[3]==minHighTest[1])validCtr++;
	if(minHighTest[3]==minHighTest[0])validCtr++;
	if(validCtr<3)return 666;
     bf8:	0f 2e       	mov	r0, r31
     bfa:	fa e9       	ldi	r31, 0x9A	; 154
     bfc:	df 2e       	mov	r13, r31
     bfe:	f0 2d       	mov	r31, r0
     c00:	09 c0       	rjmp	.+18     	; 0xc14 <gpsReqLocUblox+0x348>
	validCtr=0;
	if(minLowTest[3]==minLowTest[2])validCtr++;
	if(minLowTest[3]==minLowTest[1])validCtr++;
	if(minLowTest[3]==minLowTest[0])validCtr++;
	if(validCtr<3)return 666;
     c02:	0f 2e       	mov	r0, r31
     c04:	fa e9       	ldi	r31, 0x9A	; 154
     c06:	df 2e       	mov	r13, r31
     c08:	f0 2d       	mov	r31, r0
     c0a:	04 c0       	rjmp	.+8      	; 0xc14 <gpsReqLocUblox+0x348>
	gpsParams[13]=timeToFix;
	gpsParams[14]=(char)(asciiToHex((*(GPSSearchPtr+31)),(*(GPSSearchPtr+32))));  ///uBLOX sats
	
  
	return 0;
}else return 66;
     c0c:	0f 2e       	mov	r0, r31
     c0e:	f2 e4       	ldi	r31, 0x42	; 66
     c10:	df 2e       	mov	r13, r31
     c12:	f0 2d       	mov	r31, r0
}
     c14:	8d 2d       	mov	r24, r13
     c16:	6f 96       	adiw	r28, 0x1f	; 31
     c18:	cd bf       	out	0x3d, r28	; 61
     c1a:	de bf       	out	0x3e, r29	; 62
     c1c:	df 91       	pop	r29
     c1e:	cf 91       	pop	r28
     c20:	1f 91       	pop	r17
     c22:	0f 91       	pop	r16
     c24:	ff 90       	pop	r15
     c26:	ef 90       	pop	r14
     c28:	df 90       	pop	r13
     c2a:	cf 90       	pop	r12
     c2c:	bf 90       	pop	r11
     c2e:	af 90       	pop	r10
     c30:	9f 90       	pop	r9
     c32:	8f 90       	pop	r8
     c34:	7f 90       	pop	r7
     c36:	08 95       	ret

00000c38 <GPSgetTime>:
}
/***********************************************************************/
/*  GPS Try 5 Req Loc uBlox
/***********************************************************************/
char GPSgetTime(void){
	if((gpsReqLocUblox()==0)&&((*(GPSSearchPtr+43))!='X'))return 0;
     c38:	49 de       	rcall	.-878    	; 0x8cc <gpsReqLocUblox>
     c3a:	81 11       	cpse	r24, r1
     c3c:	08 c0       	rjmp	.+16     	; 0xc4e <GPSgetTime+0x16>
     c3e:	e0 91 b7 3e 	lds	r30, 0x3EB7	; 0x803eb7 <GPSSearchPtr>
     c42:	f0 91 b8 3e 	lds	r31, 0x3EB8	; 0x803eb8 <GPSSearchPtr+0x1>
     c46:	93 a5       	ldd	r25, Z+43	; 0x2b
     c48:	98 35       	cpi	r25, 0x58	; 88
     c4a:	09 f0       	breq	.+2      	; 0xc4e <GPSgetTime+0x16>
     c4c:	40 c0       	rjmp	.+128    	; 0xcce <GPSgetTime+0x96>
	if((gpsReqLocUblox()==0)&&((*(GPSSearchPtr+43))!='X'))return 0;
     c4e:	3e de       	rcall	.-900    	; 0x8cc <gpsReqLocUblox>
     c50:	81 11       	cpse	r24, r1
     c52:	07 c0       	rjmp	.+14     	; 0xc62 <GPSgetTime+0x2a>
     c54:	e0 91 b7 3e 	lds	r30, 0x3EB7	; 0x803eb7 <GPSSearchPtr>
     c58:	f0 91 b8 3e 	lds	r31, 0x3EB8	; 0x803eb8 <GPSSearchPtr+0x1>
     c5c:	93 a5       	ldd	r25, Z+43	; 0x2b
     c5e:	98 35       	cpi	r25, 0x58	; 88
     c60:	b1 f5       	brne	.+108    	; 0xcce <GPSgetTime+0x96>
	if((gpsReqLocUblox()==0)&&((*(GPSSearchPtr+43))!='X'))return 0;
     c62:	34 de       	rcall	.-920    	; 0x8cc <gpsReqLocUblox>
     c64:	81 11       	cpse	r24, r1
     c66:	07 c0       	rjmp	.+14     	; 0xc76 <GPSgetTime+0x3e>
     c68:	e0 91 b7 3e 	lds	r30, 0x3EB7	; 0x803eb7 <GPSSearchPtr>
     c6c:	f0 91 b8 3e 	lds	r31, 0x3EB8	; 0x803eb8 <GPSSearchPtr+0x1>
     c70:	93 a5       	ldd	r25, Z+43	; 0x2b
     c72:	98 35       	cpi	r25, 0x58	; 88
     c74:	61 f5       	brne	.+88     	; 0xcce <GPSgetTime+0x96>
	if((gpsReqLocUblox()==0)&&((*(GPSSearchPtr+43))!='X'))return 0;
     c76:	2a de       	rcall	.-940    	; 0x8cc <gpsReqLocUblox>
     c78:	81 11       	cpse	r24, r1
     c7a:	07 c0       	rjmp	.+14     	; 0xc8a <GPSgetTime+0x52>
     c7c:	e0 91 b7 3e 	lds	r30, 0x3EB7	; 0x803eb7 <GPSSearchPtr>
     c80:	f0 91 b8 3e 	lds	r31, 0x3EB8	; 0x803eb8 <GPSSearchPtr+0x1>
     c84:	93 a5       	ldd	r25, Z+43	; 0x2b
     c86:	98 35       	cpi	r25, 0x58	; 88
     c88:	11 f5       	brne	.+68     	; 0xcce <GPSgetTime+0x96>
	if((gpsReqLocUblox()==0)&&((*(GPSSearchPtr+43))!='X'))return 0;
     c8a:	20 de       	rcall	.-960    	; 0x8cc <gpsReqLocUblox>
     c8c:	81 11       	cpse	r24, r1
     c8e:	07 c0       	rjmp	.+14     	; 0xc9e <GPSgetTime+0x66>
     c90:	e0 91 b7 3e 	lds	r30, 0x3EB7	; 0x803eb7 <GPSSearchPtr>
     c94:	f0 91 b8 3e 	lds	r31, 0x3EB8	; 0x803eb8 <GPSSearchPtr+0x1>
     c98:	93 a5       	ldd	r25, Z+43	; 0x2b
     c9a:	98 35       	cpi	r25, 0x58	; 88
     c9c:	c1 f4       	brne	.+48     	; 0xcce <GPSgetTime+0x96>
	if((gpsReqLocUblox()==0)&&((*(GPSSearchPtr+43))!='X'))return 0;
     c9e:	16 de       	rcall	.-980    	; 0x8cc <gpsReqLocUblox>
     ca0:	81 11       	cpse	r24, r1
     ca2:	07 c0       	rjmp	.+14     	; 0xcb2 <GPSgetTime+0x7a>
     ca4:	e0 91 b7 3e 	lds	r30, 0x3EB7	; 0x803eb7 <GPSSearchPtr>
     ca8:	f0 91 b8 3e 	lds	r31, 0x3EB8	; 0x803eb8 <GPSSearchPtr+0x1>
     cac:	93 a5       	ldd	r25, Z+43	; 0x2b
     cae:	98 35       	cpi	r25, 0x58	; 88
     cb0:	71 f4       	brne	.+28     	; 0xcce <GPSgetTime+0x96>
	if((gpsReqLocUblox()==0)&&((*(GPSSearchPtr+43))!='X'))return 0;else return 666;
     cb2:	0c de       	rcall	.-1000   	; 0x8cc <gpsReqLocUblox>
     cb4:	81 11       	cpse	r24, r1
     cb6:	08 c0       	rjmp	.+16     	; 0xcc8 <GPSgetTime+0x90>
     cb8:	e0 91 b7 3e 	lds	r30, 0x3EB7	; 0x803eb7 <GPSSearchPtr>
     cbc:	f0 91 b8 3e 	lds	r31, 0x3EB8	; 0x803eb8 <GPSSearchPtr+0x1>
     cc0:	93 a5       	ldd	r25, Z+43	; 0x2b
     cc2:	98 35       	cpi	r25, 0x58	; 88
     cc4:	21 f4       	brne	.+8      	; 0xcce <GPSgetTime+0x96>
     cc6:	02 c0       	rjmp	.+4      	; 0xccc <GPSgetTime+0x94>
     cc8:	8a e9       	ldi	r24, 0x9A	; 154
     cca:	08 95       	ret
     ccc:	8a e9       	ldi	r24, 0x9A	; 154
}
     cce:	08 95       	ret

00000cd0 <chkMagnetFast>:
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     cd0:	05 98       	cbi	0x00, 5	; 0
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     cd2:	04 9a       	sbi	0x00, 4	; 0
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     cd4:	0c 9a       	sbi	0x01, 4	; 1
 /***********************************************************************/
 char chkMagnetFast (void){
	 TPA5_set_dir(PORT_DIR_IN);		//Sense
	 TPA4_set_dir(PORT_DIR_OUT);	//Pwr
	 PORTA_set_pin_level(4, 1);		//Pwr
	 if(PORTA_get_pin_level(5)==0){	//Sense
     cd6:	15 99       	sbic	0x02, 5	; 2
     cd8:	09 c0       	rjmp	.+18     	; 0xcec <chkMagnetFast+0x1c>
	} else {
		VPORTA.OUT &= ~(1 << pin);
     cda:	0c 98       	cbi	0x01, 4	; 1
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     cdc:	e5 e1       	ldi	r30, 0x15	; 21
     cde:	f4 e0       	ldi	r31, 0x04	; 4
     ce0:	80 81       	ld	r24, Z
     ce2:	87 7f       	andi	r24, 0xF7	; 247
     ce4:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     ce6:	04 98       	cbi	0x00, 4	; 0
		 PORTA_set_pin_level(4, 0);	//Pwr
		 TPA5_set_pull_mode(PORT_PULL_OFF); //Sense. remove pullup when sw is closed
		 TPA4_set_dir(PORT_DIR_IN); //Pwr
		 return 1;
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	08 95       	ret
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     cec:	e5 e1       	ldi	r30, 0x15	; 21
     cee:	f4 e0       	ldi	r31, 0x04	; 4
     cf0:	80 81       	ld	r24, Z
     cf2:	88 60       	ori	r24, 0x08	; 8
     cf4:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     cf6:	04 98       	cbi	0x00, 4	; 0
	 }else{
		 TPA5_set_pull_mode(PORT_PULL_UP); //Sense. use pullup when sw is open
		 TPA4_set_dir(PORT_DIR_IN); //Pwr
		 return 0;
     cf8:	80 e0       	ldi	r24, 0x00	; 0
		 }
}
     cfa:	08 95       	ret

00000cfc <chkMagnetSlow>:
     cfc:	05 98       	cbi	0x00, 5	; 0
		break;
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     cfe:	04 9a       	sbi	0x00, 4	; 0
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
     d00:	0c 9a       	sbi	0x01, 4	; 1
 /***********************************************************************/
 char chkMagnetSlow (void){
	 TPA5_set_dir(PORT_DIR_IN);		//Sense
	 TPA4_set_dir(PORT_DIR_OUT);	//Pwr
	 PORTA_set_pin_level(4, 1);		//Pwr
	 if(PORTA_get_pin_level(5)==0){	//Sense
     d02:	15 99       	sbic	0x02, 5	; 2
     d04:	19 c0       	rjmp	.+50     	; 0xd38 <chkMagnetSlow+0x3c>
	} else {
		VPORTA.OUT &= ~(1 << pin);
     d06:	0c 98       	cbi	0x01, 4	; 1
		 PORTA_set_pin_level(4, 0);	//Pwr
		 myDelay_ms(150);
     d08:	66 e9       	ldi	r22, 0x96	; 150
     d0a:	70 e0       	ldi	r23, 0x00	; 0
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	69 da       	rcall	.-2862   	; 0x1e4 <myDelay_ms>
		 if(PORTA_get_pin_level(5)==0){	//Sense
     d12:	15 99       	sbic	0x02, 5	; 2
     d14:	09 c0       	rjmp	.+18     	; 0xd28 <chkMagnetSlow+0x2c>
     d16:	0c 98       	cbi	0x01, 4	; 1
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     d18:	e5 e1       	ldi	r30, 0x15	; 21
     d1a:	f4 e0       	ldi	r31, 0x04	; 4
     d1c:	80 81       	ld	r24, Z
     d1e:	87 7f       	andi	r24, 0xF7	; 247
     d20:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     d22:	04 98       	cbi	0x00, 4	; 0
			 PORTA_set_pin_level(4, 0);	//Pwr
			 TPA5_set_pull_mode(PORT_PULL_OFF); //Sense. remove pullup when sw is closed
			 TPA4_set_dir(PORT_DIR_IN); //Pwr
			 return 1;
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	08 95       	ret
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     d28:	e5 e1       	ldi	r30, 0x15	; 21
     d2a:	f4 e0       	ldi	r31, 0x04	; 4
     d2c:	80 81       	ld	r24, Z
     d2e:	88 60       	ori	r24, 0x08	; 8
     d30:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     d32:	04 98       	cbi	0x00, 4	; 0
		 }else{
			 TPA5_set_pull_mode(PORT_PULL_UP); //Sense. use pullup when sw is open
			 TPA4_set_dir(PORT_DIR_IN); //Pwr
			 return 0;
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	08 95       	ret
static inline void PORTA_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     d38:	e5 e1       	ldi	r30, 0x15	; 21
     d3a:	f4 e0       	ldi	r31, 0x04	; 4
     d3c:	80 81       	ld	r24, Z
     d3e:	88 60       	ori	r24, 0x08	; 8
     d40:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     d42:	04 98       	cbi	0x00, 4	; 0
			}
		}else{
		TPA5_set_pull_mode(PORT_PULL_UP); //Sense. use pullup when sw is open
		TPA4_set_dir(PORT_DIR_IN); //Pwr
		return 0;
     d44:	80 e0       	ldi	r24, 0x00	; 0
		}
 }
     d46:	08 95       	ret

00000d48 <gTryUblox>:
}else return 66;
}
/***********************************************************************/
/*  Try uBlox GPS
/*********gpsReqNumSatsUblox**************************************************************/
char gTryUblox (void) {
     d48:	ef 92       	push	r14
     d4a:	ff 92       	push	r15
     d4c:	0f 93       	push	r16
     d4e:	1f 93       	push	r17
     d50:	cf 93       	push	r28
     d52:	df 93       	push	r29
     d54:	68 94       	set
     d56:	ee 24       	eor	r14, r14
     d58:	e3 f8       	bld	r14, 3
		do{
			k=3;
			do{
				myDelay_ms(250);
				clrRx();
				USART0.CTRLA |= USART_RXCIE_bm;
     d5a:	00 e0       	ldi	r16, 0x00	; 0
     d5c:	18 e0       	ldi	r17, 0x08	; 8
}else return 66;
}
/***********************************************************************/
/*  Try uBlox GPS
/*********gpsReqNumSatsUblox**************************************************************/
char gTryUblox (void) {
     d5e:	0f 2e       	mov	r0, r31
     d60:	fe ef       	ldi	r31, 0xFE	; 254
     d62:	ff 2e       	mov	r15, r31
     d64:	f0 2d       	mov	r31, r0
     d66:	c3 e0       	ldi	r28, 0x03	; 3
	do{
		j=255;
		do{
			k=3;
			do{
				myDelay_ms(250);
     d68:	6a ef       	ldi	r22, 0xFA	; 250
     d6a:	70 e0       	ldi	r23, 0x00	; 0
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	39 da       	rcall	.-2958   	; 0x1e4 <myDelay_ms>
				clrRx();
     d72:	cf db       	rcall	.-2146   	; 0x512 <clrRx>
				USART0.CTRLA |= USART_RXCIE_bm;
     d74:	f8 01       	movw	r30, r16
     d76:	85 81       	ldd	r24, Z+5	; 0x05
     d78:	80 68       	ori	r24, 0x80	; 128
     d7a:	85 83       	std	Z+5, r24	; 0x05
				ENABLE_INTERRUPTS();
     d7c:	78 94       	sei
				probablyOK = gpsReqStatusUblox();//This takes a little more than one sec
     d7e:	3d dd       	rcall	.-1414   	; 0x7fa <gpsReqStatusUblox>
     d80:	d8 2f       	mov	r29, r24
     d82:	c1 50       	subi	r28, 0x01	; 1
				k--;
			}while((k>0)&&(probablyOK == 66)&&(chkMagnetSlow()==0));
     d84:	31 f0       	breq	.+12     	; 0xd92 <gTryUblox+0x4a>
     d86:	82 34       	cpi	r24, 0x42	; 66
     d88:	69 f4       	brne	.+26     	; 0xda4 <gTryUblox+0x5c>
     d8a:	b8 df       	rcall	.-144    	; 0xcfc <chkMagnetSlow>
     d8c:	88 23       	and	r24, r24
     d8e:	61 f3       	breq	.-40     	; 0xd68 <gTryUblox+0x20>
     d90:	1d c0       	rjmp	.+58     	; 0xdcc <gTryUblox+0x84>
			/*end try*/
			j--;
		}while ((j>0)&&(probablyOK == 66)&&(chkMagnetSlow()==0));  //end 4000x middle loop
     d92:	ff 20       	and	r15, r15
     d94:	39 f0       	breq	.+14     	; 0xda4 <gTryUblox+0x5c>
     d96:	82 34       	cpi	r24, 0x42	; 66
     d98:	29 f4       	brne	.+10     	; 0xda4 <gTryUblox+0x5c>
     d9a:	b0 df       	rcall	.-160    	; 0xcfc <chkMagnetSlow>
     d9c:	fa 94       	dec	r15
     d9e:	88 23       	and	r24, r24
     da0:	11 f3       	breq	.-60     	; 0xd66 <gTryUblox+0x1e>
     da2:	0b c0       	rjmp	.+22     	; 0xdba <gTryUblox+0x72>

		if(probablyOK==0x66){
     da4:	d6 36       	cpi	r29, 0x66	; 102
     da6:	49 f4       	brne	.+18     	; 0xdba <gTryUblox+0x72>
		closeGPS();
     da8:	ca d9       	rcall	.-3180   	; 0x13e <closeGPS>
		myDelay_ms(1000);
     daa:	68 ee       	ldi	r22, 0xE8	; 232
     dac:	73 e0       	ldi	r23, 0x03	; 3
     dae:	80 e0       	ldi	r24, 0x00	; 0
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	18 da       	rcall	.-3024   	; 0x1e4 <myDelay_ms>
		openGPSuBlox();
     db4:	ac d9       	rcall	.-3240   	; 0x10e <openGPSuBlox>
		initGPSuBlox();
     db6:	8a da       	rcall	.-2796   	; 0x2cc <initGPSuBlox>
     db8:	0c c0       	rjmp	.+24     	; 0xdd2 <gTryUblox+0x8a>
     dba:	ea 94       	dec	r14
		};
		i--;
	}while((i>0)&&(probablyOK == 66)&&(chkMagnetSlow()==0)); //end 8x outer loop
     dbc:	ee 20       	and	r14, r14
     dbe:	49 f0       	breq	.+18     	; 0xdd2 <gTryUblox+0x8a>
     dc0:	d2 34       	cpi	r29, 0x42	; 66
     dc2:	39 f4       	brne	.+14     	; 0xdd2 <gTryUblox+0x8a>
     dc4:	9b df       	rcall	.-202    	; 0xcfc <chkMagnetSlow>
     dc6:	88 23       	and	r24, r24
     dc8:	51 f2       	breq	.-108    	; 0xd5e <gTryUblox+0x16>
     dca:	03 c0       	rjmp	.+6      	; 0xdd2 <gTryUblox+0x8a>
				probablyOK = gpsReqStatusUblox();//This takes a little more than one sec
				k--;
			}while((k>0)&&(probablyOK == 66)&&(chkMagnetSlow()==0));
			/*end try*/
			j--;
		}while ((j>0)&&(probablyOK == 66)&&(chkMagnetSlow()==0));  //end 4000x middle loop
     dcc:	f1 10       	cpse	r15, r1
     dce:	e5 cf       	rjmp	.-54     	; 0xd9a <gTryUblox+0x52>
     dd0:	f4 cf       	rjmp	.-24     	; 0xdba <gTryUblox+0x72>
		};
		i--;
	}while((i>0)&&(probablyOK == 66)&&(chkMagnetSlow()==0)); //end 8x outer loop

	return probablyOK; /*todooooooooooooooooooooo what should this be?*/
}/***********************************************************************/
     dd2:	8d 2f       	mov	r24, r29
     dd4:	df 91       	pop	r29
     dd6:	cf 91       	pop	r28
     dd8:	1f 91       	pop	r17
     dda:	0f 91       	pop	r16
     ddc:	ff 90       	pop	r15
     dde:	ef 90       	pop	r14
     de0:	08 95       	ret

00000de2 <calcCRC>:
		}
 }
/***********************************************************************/
/*  CRC   tag IDs took 550usec at intern ref clk,0div
/***********************************************************************/
unsigned short calcCRC(char cbuff[], char LEN) {
     de2:	0f 93       	push	r16
     de4:	1f 93       	push	r17
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
	int i,j;
	unsigned short X = 0xFFFF;
	unsigned short Y = 0x0080;
	unsigned short Z;
	for (i=0;i<LEN;i++){       //for each element
     dea:	66 23       	and	r22, r22
     dec:	c1 f1       	breq	.+112    	; 0xe5e <calcCRC+0x7c>
     dee:	ec 01       	movw	r28, r24
     df0:	8c 01       	movw	r16, r24
     df2:	06 0f       	add	r16, r22
     df4:	11 1d       	adc	r17, r1
     df6:	8f ef       	ldi	r24, 0xFF	; 255
     df8:	9f ef       	ldi	r25, 0xFF	; 255
     dfa:	1b c0       	rjmp	.+54     	; 0xe32 <calcCRC+0x50>
	Y = 0x0080;
	for (j=0;j<8;j++){
	Z = X;
	X <<= 1;
     dfc:	bc 01       	movw	r22, r24
     dfe:	66 0f       	add	r22, r22
     e00:	77 1f       	adc	r23, r23
	if((Y & cbuff[i]) != 0){ X++;};
     e02:	fd 01       	movw	r30, r26
     e04:	e4 23       	and	r30, r20
     e06:	f5 23       	and	r31, r21
     e08:	ef 2b       	or	r30, r31
     e0a:	11 f0       	breq	.+4      	; 0xe10 <calcCRC+0x2e>
     e0c:	6f 5f       	subi	r22, 0xFF	; 255
     e0e:	7f 4f       	sbci	r23, 0xFF	; 255
	Y >>= 1;
     e10:	56 95       	lsr	r21
     e12:	47 95       	ror	r20
	if ((Z & 0x8000) != 0) {X ^= 0x1021; };
     e14:	99 23       	and	r25, r25
     e16:	34 f4       	brge	.+12     	; 0xe24 <calcCRC+0x42>
     e18:	cb 01       	movw	r24, r22
     e1a:	e1 e2       	ldi	r30, 0x21	; 33
     e1c:	8e 27       	eor	r24, r30
     e1e:	e0 e1       	ldi	r30, 0x10	; 16
     e20:	9e 27       	eor	r25, r30
     e22:	01 c0       	rjmp	.+2      	; 0xe26 <calcCRC+0x44>
     e24:	cb 01       	movw	r24, r22
     e26:	21 50       	subi	r18, 0x01	; 1
     e28:	31 09       	sbc	r19, r1
	unsigned short X = 0xFFFF;
	unsigned short Y = 0x0080;
	unsigned short Z;
	for (i=0;i<LEN;i++){       //for each element
	Y = 0x0080;
	for (j=0;j<8;j++){
     e2a:	41 f7       	brne	.-48     	; 0xdfc <calcCRC+0x1a>
unsigned short calcCRC(char cbuff[], char LEN) {
	int i,j;
	unsigned short X = 0xFFFF;
	unsigned short Y = 0x0080;
	unsigned short Z;
	for (i=0;i<LEN;i++){       //for each element
     e2c:	0c 17       	cp	r16, r28
     e2e:	1d 07       	cpc	r17, r29
     e30:	c1 f0       	breq	.+48     	; 0xe62 <calcCRC+0x80>
	Y = 0x0080;
	for (j=0;j<8;j++){
	Z = X;
	X <<= 1;
	if((Y & cbuff[i]) != 0){ X++;};
     e32:	a9 91       	ld	r26, Y+
     e34:	b0 e0       	ldi	r27, 0x00	; 0
     e36:	28 e0       	ldi	r18, 0x08	; 8
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	40 e8       	ldi	r20, 0x80	; 128
     e3c:	50 e0       	ldi	r21, 0x00	; 0
     e3e:	de cf       	rjmp	.-68     	; 0xdfc <calcCRC+0x1a>
	if ((Z & 0x8000) != 0) {X ^= 0x1021; };
	};   //end 8x
	//    __RESET_WATCHDOG();	/*needed Jan 2014*/
	};    // end for each element
	for (i=0;i<16;i++){
	if ((X & 0x8000) != 0) { X<<=1; X ^= 0x1021; } else X <<= 1;
     e40:	99 23       	and	r25, r25
     e42:	3c f4       	brge	.+14     	; 0xe52 <calcCRC+0x70>
     e44:	88 0f       	add	r24, r24
     e46:	99 1f       	adc	r25, r25
     e48:	41 e2       	ldi	r20, 0x21	; 33
     e4a:	84 27       	eor	r24, r20
     e4c:	40 e1       	ldi	r20, 0x10	; 16
     e4e:	94 27       	eor	r25, r20
     e50:	02 c0       	rjmp	.+4      	; 0xe56 <calcCRC+0x74>
     e52:	88 0f       	add	r24, r24
     e54:	99 1f       	adc	r25, r25
     e56:	21 50       	subi	r18, 0x01	; 1
     e58:	31 09       	sbc	r19, r1
	Y >>= 1;
	if ((Z & 0x8000) != 0) {X ^= 0x1021; };
	};   //end 8x
	//    __RESET_WATCHDOG();	/*needed Jan 2014*/
	};    // end for each element
	for (i=0;i<16;i++){
     e5a:	91 f7       	brne	.-28     	; 0xe40 <calcCRC+0x5e>
     e5c:	05 c0       	rjmp	.+10     	; 0xe68 <calcCRC+0x86>
/***********************************************************************/
/*  CRC   tag IDs took 550usec at intern ref clk,0div
/***********************************************************************/
unsigned short calcCRC(char cbuff[], char LEN) {
	int i,j;
	unsigned short X = 0xFFFF;
     e5e:	8f ef       	ldi	r24, 0xFF	; 255
     e60:	9f ef       	ldi	r25, 0xFF	; 255
	unsigned short Y = 0x0080;
	unsigned short Z;
	for (i=0;i<LEN;i++){       //for each element
     e62:	20 e1       	ldi	r18, 0x10	; 16
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	ec cf       	rjmp	.-40     	; 0xe40 <calcCRC+0x5e>
	};    // end for each element
	for (i=0;i<16;i++){
	if ((X & 0x8000) != 0) { X<<=1; X ^= 0x1021; } else X <<= 1;
	};     //end 16x
	return X;
}
     e68:	df 91       	pop	r29
     e6a:	cf 91       	pop	r28
     e6c:	1f 91       	pop	r17
     e6e:	0f 91       	pop	r16
     e70:	08 95       	ret

00000e72 <getByteFromBig>:
}
/*******************************************
*    GET Byte FROM
********************************************/
char getByteFromBig (void){
	DISABLE_INTERRUPTS();
     e72:	f8 94       	cli
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     e74:	20 98       	cbi	0x04, 0	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     e76:	e0 e3       	ldi	r30, 0x30	; 48
     e78:	f4 e0       	ldi	r31, 0x04	; 4
     e7a:	80 81       	ld	r24, Z
     e7c:	87 7f       	andi	r24, 0xF7	; 247
     e7e:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     e80:	43 98       	cbi	0x08, 3	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     e82:	e3 e5       	ldi	r30, 0x53	; 83
     e84:	f4 e0       	ldi	r31, 0x04	; 4
     e86:	80 81       	ld	r24, Z
     e88:	87 7f       	andi	r24, 0xF7	; 247
     e8a:	80 83       	st	Z, r24
/*	if(!firstByte){
		for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
		if(PORTC_get_pin_level(3)==1)break;
	}*/
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
     e8c:	53 9b       	sbis	0x0a, 3	; 10
     e8e:	06 c0       	rjmp	.+12     	; 0xe9c <getByteFromBig+0x2a>
     e90:	89 ef       	ldi	r24, 0xF9	; 249
     e92:	90 e0       	ldi	r25, 0x00	; 0
     e94:	53 9b       	sbis	0x0a, 3	; 10
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <getByteFromBig+0x2a>
     e98:	01 97       	sbiw	r24, 0x01	; 1
	char ret=0;
/*	if(!firstByte){
		for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
		if(PORTC_get_pin_level(3)==1)break;
	}*/
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
     e9a:	e1 f7       	brne	.-8      	; 0xe94 <getByteFromBig+0x22>
	if(PORTC_get_pin_level(3)==0)break;
	if(PORTB_get_pin_level(0)==1)  ret |= 0x80;
     e9c:	30 9b       	sbis	0x06, 0	; 6
     e9e:	02 c0       	rjmp	.+4      	; 0xea4 <getByteFromBig+0x32>
     ea0:	80 e8       	ldi	r24, 0x80	; 128
     ea2:	01 c0       	rjmp	.+2      	; 0xea6 <getByteFromBig+0x34>
	TPB0_set_pull_mode(PORT_PULL_OFF);
	TPC3_set_dir(PORT_DIR_IN);
	TPC3_set_pull_mode(PORT_PULL_OFF);

	short bigTinyTimeoutCtr;
	char ret=0;
     ea4:	80 e0       	ldi	r24, 0x00	; 0
	}*/
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
	if(PORTB_get_pin_level(0)==1)  ret |= 0x80;

	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==1)break;
     ea6:	53 99       	sbic	0x0a, 3	; 10
     ea8:	7f c0       	rjmp	.+254    	; 0xfa8 <getByteFromBig+0x136>
     eaa:	29 ef       	ldi	r18, 0xF9	; 249
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	53 99       	sbic	0x0a, 3	; 10
     eb0:	7b c0       	rjmp	.+246    	; 0xfa8 <getByteFromBig+0x136>
     eb2:	21 50       	subi	r18, 0x01	; 1
     eb4:	31 09       	sbc	r19, r1
     eb6:	d9 f7       	brne	.-10     	; 0xeae <getByteFromBig+0x3c>
     eb8:	77 c0       	rjmp	.+238    	; 0xfa8 <getByteFromBig+0x136>
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==0)break;
     eba:	53 9b       	sbis	0x0a, 3	; 10
     ebc:	03 c0       	rjmp	.+6      	; 0xec4 <getByteFromBig+0x52>
     ebe:	21 50       	subi	r18, 0x01	; 1
     ec0:	31 09       	sbc	r19, r1
     ec2:	d9 f7       	brne	.-10     	; 0xeba <getByteFromBig+0x48>
	if(PORTB_get_pin_level(0)==1)  ret |= 0x40;
     ec4:	30 99       	sbic	0x06, 0	; 6
     ec6:	80 64       	ori	r24, 0x40	; 64

	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==1)break;
     ec8:	53 99       	sbic	0x0a, 3	; 10
     eca:	73 c0       	rjmp	.+230    	; 0xfb2 <getByteFromBig+0x140>
     ecc:	29 ef       	ldi	r18, 0xF9	; 249
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	53 99       	sbic	0x0a, 3	; 10
     ed2:	6f c0       	rjmp	.+222    	; 0xfb2 <getByteFromBig+0x140>
     ed4:	21 50       	subi	r18, 0x01	; 1
     ed6:	31 09       	sbc	r19, r1
     ed8:	d9 f7       	brne	.-10     	; 0xed0 <getByteFromBig+0x5e>
     eda:	6b c0       	rjmp	.+214    	; 0xfb2 <getByteFromBig+0x140>
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==0)break;
     edc:	53 9b       	sbis	0x0a, 3	; 10
     ede:	03 c0       	rjmp	.+6      	; 0xee6 <getByteFromBig+0x74>
     ee0:	21 50       	subi	r18, 0x01	; 1
     ee2:	31 09       	sbc	r19, r1
     ee4:	d9 f7       	brne	.-10     	; 0xedc <getByteFromBig+0x6a>
	if(PORTB_get_pin_level(0)==1)  ret |= 0x20;
     ee6:	30 99       	sbic	0x06, 0	; 6
     ee8:	80 62       	ori	r24, 0x20	; 32

	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==1)break;
     eea:	53 99       	sbic	0x0a, 3	; 10
     eec:	67 c0       	rjmp	.+206    	; 0xfbc <getByteFromBig+0x14a>
     eee:	29 ef       	ldi	r18, 0xF9	; 249
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	53 99       	sbic	0x0a, 3	; 10
     ef4:	63 c0       	rjmp	.+198    	; 0xfbc <getByteFromBig+0x14a>
     ef6:	21 50       	subi	r18, 0x01	; 1
     ef8:	31 09       	sbc	r19, r1
     efa:	d9 f7       	brne	.-10     	; 0xef2 <getByteFromBig+0x80>
     efc:	5f c0       	rjmp	.+190    	; 0xfbc <getByteFromBig+0x14a>
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==0)break;
     efe:	53 9b       	sbis	0x0a, 3	; 10
     f00:	03 c0       	rjmp	.+6      	; 0xf08 <getByteFromBig+0x96>
     f02:	21 50       	subi	r18, 0x01	; 1
     f04:	31 09       	sbc	r19, r1
     f06:	d9 f7       	brne	.-10     	; 0xefe <getByteFromBig+0x8c>
	if(PORTB_get_pin_level(0)==1)  ret |= 0x10;
     f08:	30 99       	sbic	0x06, 0	; 6
     f0a:	80 61       	ori	r24, 0x10	; 16

	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==1)break;
     f0c:	53 99       	sbic	0x0a, 3	; 10
     f0e:	5b c0       	rjmp	.+182    	; 0xfc6 <getByteFromBig+0x154>
     f10:	29 ef       	ldi	r18, 0xF9	; 249
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	53 99       	sbic	0x0a, 3	; 10
     f16:	57 c0       	rjmp	.+174    	; 0xfc6 <getByteFromBig+0x154>
     f18:	21 50       	subi	r18, 0x01	; 1
     f1a:	31 09       	sbc	r19, r1
     f1c:	d9 f7       	brne	.-10     	; 0xf14 <getByteFromBig+0xa2>
     f1e:	53 c0       	rjmp	.+166    	; 0xfc6 <getByteFromBig+0x154>
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==0)break;
     f20:	53 9b       	sbis	0x0a, 3	; 10
     f22:	03 c0       	rjmp	.+6      	; 0xf2a <getByteFromBig+0xb8>
     f24:	21 50       	subi	r18, 0x01	; 1
     f26:	31 09       	sbc	r19, r1
     f28:	d9 f7       	brne	.-10     	; 0xf20 <getByteFromBig+0xae>
	if(PORTB_get_pin_level(0)==1)  ret |= 0x08;
     f2a:	30 99       	sbic	0x06, 0	; 6
     f2c:	88 60       	ori	r24, 0x08	; 8

	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==1)break;
     f2e:	53 99       	sbic	0x0a, 3	; 10
     f30:	4f c0       	rjmp	.+158    	; 0xfd0 <getByteFromBig+0x15e>
     f32:	29 ef       	ldi	r18, 0xF9	; 249
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	53 99       	sbic	0x0a, 3	; 10
     f38:	4b c0       	rjmp	.+150    	; 0xfd0 <getByteFromBig+0x15e>
     f3a:	21 50       	subi	r18, 0x01	; 1
     f3c:	31 09       	sbc	r19, r1
     f3e:	d9 f7       	brne	.-10     	; 0xf36 <getByteFromBig+0xc4>
     f40:	47 c0       	rjmp	.+142    	; 0xfd0 <getByteFromBig+0x15e>
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==0)break;
     f42:	53 9b       	sbis	0x0a, 3	; 10
     f44:	03 c0       	rjmp	.+6      	; 0xf4c <getByteFromBig+0xda>
     f46:	21 50       	subi	r18, 0x01	; 1
     f48:	31 09       	sbc	r19, r1
     f4a:	d9 f7       	brne	.-10     	; 0xf42 <getByteFromBig+0xd0>
	if(PORTB_get_pin_level(0)==1)  ret |= 0x04;
     f4c:	30 99       	sbic	0x06, 0	; 6
     f4e:	84 60       	ori	r24, 0x04	; 4

	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==1)break;
     f50:	53 99       	sbic	0x0a, 3	; 10
     f52:	43 c0       	rjmp	.+134    	; 0xfda <getByteFromBig+0x168>
     f54:	29 ef       	ldi	r18, 0xF9	; 249
     f56:	30 e0       	ldi	r19, 0x00	; 0
     f58:	53 99       	sbic	0x0a, 3	; 10
     f5a:	3f c0       	rjmp	.+126    	; 0xfda <getByteFromBig+0x168>
     f5c:	21 50       	subi	r18, 0x01	; 1
     f5e:	31 09       	sbc	r19, r1
     f60:	d9 f7       	brne	.-10     	; 0xf58 <getByteFromBig+0xe6>
     f62:	3b c0       	rjmp	.+118    	; 0xfda <getByteFromBig+0x168>
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==0)break;
     f64:	53 9b       	sbis	0x0a, 3	; 10
     f66:	03 c0       	rjmp	.+6      	; 0xf6e <getByteFromBig+0xfc>
     f68:	21 50       	subi	r18, 0x01	; 1
     f6a:	31 09       	sbc	r19, r1
     f6c:	d9 f7       	brne	.-10     	; 0xf64 <getByteFromBig+0xf2>
	if(PORTB_get_pin_level(0)==1)  ret |= 0x02;
     f6e:	30 99       	sbic	0x06, 0	; 6
     f70:	82 60       	ori	r24, 0x02	; 2

	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==1)break;
     f72:	53 99       	sbic	0x0a, 3	; 10
     f74:	37 c0       	rjmp	.+110    	; 0xfe4 <getByteFromBig+0x172>
     f76:	29 ef       	ldi	r18, 0xF9	; 249
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	53 99       	sbic	0x0a, 3	; 10
     f7c:	33 c0       	rjmp	.+102    	; 0xfe4 <getByteFromBig+0x172>
     f7e:	21 50       	subi	r18, 0x01	; 1
     f80:	31 09       	sbc	r19, r1
     f82:	d9 f7       	brne	.-10     	; 0xf7a <getByteFromBig+0x108>
     f84:	2f c0       	rjmp	.+94     	; 0xfe4 <getByteFromBig+0x172>
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==0)break;
     f86:	53 9b       	sbis	0x0a, 3	; 10
     f88:	03 c0       	rjmp	.+6      	; 0xf90 <getByteFromBig+0x11e>
     f8a:	21 50       	subi	r18, 0x01	; 1
     f8c:	31 09       	sbc	r19, r1
     f8e:	d9 f7       	brne	.-10     	; 0xf86 <getByteFromBig+0x114>
	if(PORTB_get_pin_level(0))  ret |= 0x01;
     f90:	30 99       	sbic	0x06, 0	; 6
     f92:	81 60       	ori	r24, 0x01	; 1
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==1)break;
     f94:	53 99       	sbic	0x0a, 3	; 10
     f96:	2b c0       	rjmp	.+86     	; 0xfee <getByteFromBig+0x17c>
     f98:	29 ef       	ldi	r18, 0xF9	; 249
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	53 99       	sbic	0x0a, 3	; 10
     f9e:	27 c0       	rjmp	.+78     	; 0xfee <getByteFromBig+0x17c>
     fa0:	21 50       	subi	r18, 0x01	; 1
     fa2:	31 09       	sbc	r19, r1
     fa4:	d9 f7       	brne	.-10     	; 0xf9c <getByteFromBig+0x12a>
     fa6:	08 95       	ret
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
	if(PORTB_get_pin_level(0)==1)  ret |= 0x80;

	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==1)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==0)break;
     fa8:	53 9b       	sbis	0x0a, 3	; 10
     faa:	8c cf       	rjmp	.-232    	; 0xec4 <getByteFromBig+0x52>
     fac:	29 ef       	ldi	r18, 0xF9	; 249
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	84 cf       	rjmp	.-248    	; 0xeba <getByteFromBig+0x48>
	if(PORTB_get_pin_level(0)==1)  ret |= 0x40;

	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==1)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==0)break;
     fb2:	53 9b       	sbis	0x0a, 3	; 10
     fb4:	98 cf       	rjmp	.-208    	; 0xee6 <getByteFromBig+0x74>
     fb6:	29 ef       	ldi	r18, 0xF9	; 249
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	90 cf       	rjmp	.-224    	; 0xedc <getByteFromBig+0x6a>
	if(PORTB_get_pin_level(0)==1)  ret |= 0x20;

	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==1)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==0)break;
     fbc:	53 9b       	sbis	0x0a, 3	; 10
     fbe:	a4 cf       	rjmp	.-184    	; 0xf08 <getByteFromBig+0x96>
     fc0:	29 ef       	ldi	r18, 0xF9	; 249
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	9c cf       	rjmp	.-200    	; 0xefe <getByteFromBig+0x8c>
	if(PORTB_get_pin_level(0)==1)  ret |= 0x10;

	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==1)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==0)break;
     fc6:	53 9b       	sbis	0x0a, 3	; 10
     fc8:	b0 cf       	rjmp	.-160    	; 0xf2a <getByteFromBig+0xb8>
     fca:	29 ef       	ldi	r18, 0xF9	; 249
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	a8 cf       	rjmp	.-176    	; 0xf20 <getByteFromBig+0xae>
	if(PORTB_get_pin_level(0)==1)  ret |= 0x08;

	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==1)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==0)break;
     fd0:	53 9b       	sbis	0x0a, 3	; 10
     fd2:	bc cf       	rjmp	.-136    	; 0xf4c <getByteFromBig+0xda>
     fd4:	29 ef       	ldi	r18, 0xF9	; 249
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	b4 cf       	rjmp	.-152    	; 0xf42 <getByteFromBig+0xd0>
	if(PORTB_get_pin_level(0)==1)  ret |= 0x04;

	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==1)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==0)break;
     fda:	53 9b       	sbis	0x0a, 3	; 10
     fdc:	c8 cf       	rjmp	.-112    	; 0xf6e <getByteFromBig+0xfc>
     fde:	29 ef       	ldi	r18, 0xF9	; 249
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	c0 cf       	rjmp	.-128    	; 0xf64 <getByteFromBig+0xf2>
	if(PORTB_get_pin_level(0)==1)  ret |= 0x02;

	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==1)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==0)break;
     fe4:	53 9b       	sbis	0x0a, 3	; 10
     fe6:	d4 cf       	rjmp	.-88     	; 0xf90 <getByteFromBig+0x11e>
     fe8:	29 ef       	ldi	r18, 0xF9	; 249
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	cc cf       	rjmp	.-104    	; 0xf86 <getByteFromBig+0x114>
	if(PORTB_get_pin_level(0))  ret |= 0x01;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)if(PORTC_get_pin_level(3)==1)break;
	
	return ret;
}
     fee:	08 95       	ret

00000ff0 <getPacketFromBig>:
	return X;
}
/*******************************************
*    GET CMD PACKET FROM BIG
********************************************/
char getPacketFromBig (void){
     ff0:	df 92       	push	r13
     ff2:	ef 92       	push	r14
     ff4:	ff 92       	push	r15
     ff6:	0f 93       	push	r16
     ff8:	1f 93       	push	r17
     ffa:	cf 93       	push	r28
     ffc:	df 93       	push	r29
     ffe:	cd b7       	in	r28, 0x3d	; 61
    1000:	de b7       	in	r29, 0x3e	; 62
    1002:	25 97       	sbiw	r28, 0x05	; 5
    1004:	cd bf       	out	0x3d, r28	; 61
    1006:	de bf       	out	0x3e, r29	; 62
	unsigned short crcrc;
	char rcdArray[5];
	DISABLE_INTERRUPTS();
    1008:	f8 94       	cli
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
    100a:	20 98       	cbi	0x04, 0	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    100c:	e0 e3       	ldi	r30, 0x30	; 48
    100e:	f4 e0       	ldi	r31, 0x04	; 4
    1010:	80 81       	ld	r24, Z
    1012:	87 7f       	andi	r24, 0xF7	; 247
    1014:	80 83       	st	Z, r24
	TPB0_set_dir(PORT_DIR_IN);
	TPB0_set_pull_mode(PORT_PULL_OFF);

	rcdArray[0]=getByteFromBig();
    1016:	2d df       	rcall	.-422    	; 0xe72 <getByteFromBig>
    1018:	08 2f       	mov	r16, r24
    101a:	89 83       	std	Y+1, r24	; 0x01
	rcdArray[1]=getByteFromBig();
    101c:	2a df       	rcall	.-428    	; 0xe72 <getByteFromBig>
    101e:	d8 2e       	mov	r13, r24
    1020:	8a 83       	std	Y+2, r24	; 0x02
	rcdArray[2]=getByteFromBig();
    1022:	27 df       	rcall	.-434    	; 0xe72 <getByteFromBig>
    1024:	e8 2e       	mov	r14, r24
    1026:	8b 83       	std	Y+3, r24	; 0x03
	rcdArray[3]=getByteFromBig();
    1028:	24 df       	rcall	.-440    	; 0xe72 <getByteFromBig>
    102a:	18 2f       	mov	r17, r24
    102c:	8c 83       	std	Y+4, r24	; 0x04
	rcdArray[4]=getByteFromBig();
    102e:	21 df       	rcall	.-446    	; 0xe72 <getByteFromBig>
    1030:	f8 2e       	mov	r15, r24
    1032:	8d 83       	std	Y+5, r24	; 0x05
	
	crcrc=calcCRC(rcdArray,3);
    1034:	63 e0       	ldi	r22, 0x03	; 3
    1036:	ce 01       	movw	r24, r28
    1038:	01 96       	adiw	r24, 0x01	; 1
    103a:	d3 de       	rcall	.-602    	; 0xde2 <calcCRC>
	if(crcrc==(rcdArray[3]<<8)+rcdArray[4]){
    103c:	21 2f       	mov	r18, r17
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	32 2f       	mov	r19, r18
    1042:	22 27       	eor	r18, r18
    1044:	2f 0d       	add	r18, r15
    1046:	31 1d       	adc	r19, r1
    1048:	82 17       	cp	r24, r18
    104a:	93 07       	cpc	r25, r19
    104c:	71 f5       	brne	.+92     	; 0x10aa <getPacketFromBig+0xba>
		rcvdCmd=rcdArray[0];
    104e:	00 93 ae 3e 	sts	0x3EAE, r16	; 0x803eae <rcvdCmd>
		crcrc=rcdArray[0]&0x07;
		switch (crcrc){
    1052:	07 70       	andi	r16, 0x07	; 7
    1054:	02 30       	cpi	r16, 0x02	; 2
    1056:	a9 f0       	breq	.+42     	; 0x1082 <getPacketFromBig+0x92>
    1058:	28 f4       	brcc	.+10     	; 0x1064 <getPacketFromBig+0x74>
    105a:	00 23       	and	r16, r16
    105c:	41 f0       	breq	.+16     	; 0x106e <getPacketFromBig+0x7e>
    105e:	01 30       	cpi	r16, 0x01	; 1
    1060:	59 f0       	breq	.+22     	; 0x1078 <getPacketFromBig+0x88>
    1062:	1e c0       	rjmp	.+60     	; 0x10a0 <getPacketFromBig+0xb0>
    1064:	03 30       	cpi	r16, 0x03	; 3
    1066:	91 f0       	breq	.+36     	; 0x108c <getPacketFromBig+0x9c>
    1068:	04 30       	cpi	r16, 0x04	; 4
    106a:	a9 f0       	breq	.+42     	; 0x1096 <getPacketFromBig+0xa6>
    106c:	19 c0       	rjmp	.+50     	; 0x10a0 <getPacketFromBig+0xb0>
			case 0:
			motParams[9]=rcdArray[1];
    106e:	ee e7       	ldi	r30, 0x7E	; 126
    1070:	fe e3       	ldi	r31, 0x3E	; 62
    1072:	d1 86       	std	Z+9, r13	; 0x09
			motParams[10]=rcdArray[2];
    1074:	e2 86       	std	Z+10, r14	; 0x0a
			break;
    1076:	1c c0       	rjmp	.+56     	; 0x10b0 <getPacketFromBig+0xc0>
			case 1:
			motParams[11]=rcdArray[1];
    1078:	ee e7       	ldi	r30, 0x7E	; 126
    107a:	fe e3       	ldi	r31, 0x3E	; 62
    107c:	d3 86       	std	Z+11, r13	; 0x0b
			motParams[12]=rcdArray[2];
    107e:	e4 86       	std	Z+12, r14	; 0x0c
			break;
    1080:	17 c0       	rjmp	.+46     	; 0x10b0 <getPacketFromBig+0xc0>
			case 2:
			motParams[13]=rcdArray[1];
    1082:	ee e7       	ldi	r30, 0x7E	; 126
    1084:	fe e3       	ldi	r31, 0x3E	; 62
    1086:	d5 86       	std	Z+13, r13	; 0x0d
			motParams[14]=rcdArray[2];
    1088:	e6 86       	std	Z+14, r14	; 0x0e
			break;
    108a:	12 c0       	rjmp	.+36     	; 0x10b0 <getPacketFromBig+0xc0>
			case 3:
			motParams[15]=rcdArray[1];
    108c:	ee e7       	ldi	r30, 0x7E	; 126
    108e:	fe e3       	ldi	r31, 0x3E	; 62
    1090:	d7 86       	std	Z+15, r13	; 0x0f
			motParams[16]=rcdArray[2];
    1092:	e0 8a       	std	Z+16, r14	; 0x10
			break;
    1094:	0d c0       	rjmp	.+26     	; 0x10b0 <getPacketFromBig+0xc0>
			case 4:
			motParams[17]=rcdArray[1];
    1096:	ee e7       	ldi	r30, 0x7E	; 126
    1098:	fe e3       	ldi	r31, 0x3E	; 62
    109a:	d1 8a       	std	Z+17, r13	; 0x11
			motParams[18]=rcdArray[2];
    109c:	e2 8a       	std	Z+18, r14	; 0x12
			break;
    109e:	08 c0       	rjmp	.+16     	; 0x10b0 <getPacketFromBig+0xc0>
			default:
			motParams[19]=rcdArray[1];
    10a0:	ee e7       	ldi	r30, 0x7E	; 126
    10a2:	fe e3       	ldi	r31, 0x3E	; 62
    10a4:	d3 8a       	std	Z+19, r13	; 0x13
			motParams[20]=rcdArray[2];
    10a6:	e4 8a       	std	Z+20, r14	; 0x14
			break;
    10a8:	03 c0       	rjmp	.+6      	; 0x10b0 <getPacketFromBig+0xc0>
		}
		
	}else rcvdCmd = 0x66;
    10aa:	86 e6       	ldi	r24, 0x66	; 102
    10ac:	80 93 ae 3e 	sts	0x3EAE, r24	; 0x803eae <rcvdCmd>

	mState=INTERRUPT_FROM_BIG;
    10b0:	8e e0       	ldi	r24, 0x0E	; 14
    10b2:	80 93 b1 3e 	sts	0x3EB1, r24	; 0x803eb1 <mState>
	PORTC.INTFLAGS |= (1 << 1);
    10b6:	e0 e4       	ldi	r30, 0x40	; 64
    10b8:	f4 e0       	ldi	r31, 0x04	; 4
    10ba:	81 85       	ldd	r24, Z+9	; 0x09
    10bc:	82 60       	ori	r24, 0x02	; 2
    10be:	81 87       	std	Z+9, r24	; 0x09
	ENABLE_INTERRUPTS();
    10c0:	78 94       	sei
	return rcdArray[0];
}
    10c2:	89 81       	ldd	r24, Y+1	; 0x01
    10c4:	25 96       	adiw	r28, 0x05	; 5
    10c6:	cd bf       	out	0x3d, r28	; 61
    10c8:	de bf       	out	0x3e, r29	; 62
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	1f 91       	pop	r17
    10d0:	0f 91       	pop	r16
    10d2:	ff 90       	pop	r15
    10d4:	ef 90       	pop	r14
    10d6:	df 90       	pop	r13
    10d8:	08 95       	ret

000010da <sendByteToBig>:
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    10da:	20 9a       	sbi	0x04, 0	; 4
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    10dc:	43 98       	cbi	0x08, 3	; 8
	TPB0_set_dir(PORT_DIR_OUT);
	TPC3_set_dir(PORT_DIR_IN);
	short iters;
	

	if((byteToSendToBig & 0x80)==0)PORTB_set_pin_level(0, 0);
    10de:	88 23       	and	r24, r24
    10e0:	14 f0       	brlt	.+4      	; 0x10e6 <sendByteToBig+0xc>
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    10e2:	28 98       	cbi	0x05, 0	; 5
    10e4:	94 c0       	rjmp	.+296    	; 0x120e <sendByteToBig+0x134>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    10e6:	28 9a       	sbi	0x05, 0	; 5
    10e8:	92 c0       	rjmp	.+292    	; 0x120e <sendByteToBig+0x134>
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    10ea:	29 ef       	ldi	r18, 0xF9	; 249
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	53 9b       	sbis	0x0a, 3	; 10
    10f0:	90 c0       	rjmp	.+288    	; 0x1212 <sendByteToBig+0x138>
    10f2:	21 50       	subi	r18, 0x01	; 1
    10f4:	31 09       	sbc	r19, r1
	short iters;
	

	if((byteToSendToBig & 0x80)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    10f6:	d9 f7       	brne	.-10     	; 0x10ee <sendByteToBig+0x14>
    10f8:	8c c0       	rjmp	.+280    	; 0x1212 <sendByteToBig+0x138>
	if(PORTC_get_pin_level(3)==0)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;
    10fa:	53 99       	sbic	0x0a, 3	; 10
    10fc:	03 c0       	rjmp	.+6      	; 0x1104 <sendByteToBig+0x2a>
    10fe:	21 50       	subi	r18, 0x01	; 1
    1100:	31 09       	sbc	r19, r1

	if((byteToSendToBig & 0x80)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    1102:	d9 f7       	brne	.-10     	; 0x10fa <sendByteToBig+0x20>
	if(PORTC_get_pin_level(3)==1)break;

	if((byteToSendToBig & 0x40)==0)PORTB_set_pin_level(0, 0);
    1104:	86 fd       	sbrc	r24, 6
    1106:	02 c0       	rjmp	.+4      	; 0x110c <sendByteToBig+0x32>
	} else {
		VPORTB.OUT &= ~(1 << pin);
    1108:	28 98       	cbi	0x05, 0	; 5
    110a:	88 c0       	rjmp	.+272    	; 0x121c <sendByteToBig+0x142>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    110c:	28 9a       	sbi	0x05, 0	; 5
    110e:	86 c0       	rjmp	.+268    	; 0x121c <sendByteToBig+0x142>
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    1110:	29 ef       	ldi	r18, 0xF9	; 249
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	53 9b       	sbis	0x0a, 3	; 10
    1116:	84 c0       	rjmp	.+264    	; 0x1220 <sendByteToBig+0x146>
    1118:	21 50       	subi	r18, 0x01	; 1
    111a:	31 09       	sbc	r19, r1
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;

	if((byteToSendToBig & 0x40)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    111c:	d9 f7       	brne	.-10     	; 0x1114 <sendByteToBig+0x3a>
    111e:	80 c0       	rjmp	.+256    	; 0x1220 <sendByteToBig+0x146>
	if(PORTC_get_pin_level(3)==0)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;
    1120:	53 99       	sbic	0x0a, 3	; 10
    1122:	03 c0       	rjmp	.+6      	; 0x112a <sendByteToBig+0x50>
    1124:	21 50       	subi	r18, 0x01	; 1
    1126:	31 09       	sbc	r19, r1

	if((byteToSendToBig & 0x40)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    1128:	d9 f7       	brne	.-10     	; 0x1120 <sendByteToBig+0x46>
	if(PORTC_get_pin_level(3)==1)break;

	if((byteToSendToBig & 0x20)==0)PORTB_set_pin_level(0, 0);
    112a:	85 fd       	sbrc	r24, 5
    112c:	02 c0       	rjmp	.+4      	; 0x1132 <sendByteToBig+0x58>
	} else {
		VPORTB.OUT &= ~(1 << pin);
    112e:	28 98       	cbi	0x05, 0	; 5
    1130:	7c c0       	rjmp	.+248    	; 0x122a <sendByteToBig+0x150>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    1132:	28 9a       	sbi	0x05, 0	; 5
    1134:	7a c0       	rjmp	.+244    	; 0x122a <sendByteToBig+0x150>
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    1136:	29 ef       	ldi	r18, 0xF9	; 249
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	53 9b       	sbis	0x0a, 3	; 10
    113c:	78 c0       	rjmp	.+240    	; 0x122e <sendByteToBig+0x154>
    113e:	21 50       	subi	r18, 0x01	; 1
    1140:	31 09       	sbc	r19, r1
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;

	if((byteToSendToBig & 0x20)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    1142:	d9 f7       	brne	.-10     	; 0x113a <sendByteToBig+0x60>
    1144:	74 c0       	rjmp	.+232    	; 0x122e <sendByteToBig+0x154>
	if(PORTC_get_pin_level(3)==0)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;
    1146:	53 99       	sbic	0x0a, 3	; 10
    1148:	03 c0       	rjmp	.+6      	; 0x1150 <sendByteToBig+0x76>
    114a:	21 50       	subi	r18, 0x01	; 1
    114c:	31 09       	sbc	r19, r1

	if((byteToSendToBig & 0x20)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    114e:	d9 f7       	brne	.-10     	; 0x1146 <sendByteToBig+0x6c>
	if(PORTC_get_pin_level(3)==1)break;

	if((byteToSendToBig & 0x10)==0)PORTB_set_pin_level(0, 0);
    1150:	84 fd       	sbrc	r24, 4
    1152:	02 c0       	rjmp	.+4      	; 0x1158 <sendByteToBig+0x7e>
	} else {
		VPORTB.OUT &= ~(1 << pin);
    1154:	28 98       	cbi	0x05, 0	; 5
    1156:	70 c0       	rjmp	.+224    	; 0x1238 <sendByteToBig+0x15e>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    1158:	28 9a       	sbi	0x05, 0	; 5
    115a:	6e c0       	rjmp	.+220    	; 0x1238 <sendByteToBig+0x15e>
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    115c:	29 ef       	ldi	r18, 0xF9	; 249
    115e:	30 e0       	ldi	r19, 0x00	; 0
    1160:	53 9b       	sbis	0x0a, 3	; 10
    1162:	6c c0       	rjmp	.+216    	; 0x123c <sendByteToBig+0x162>
    1164:	21 50       	subi	r18, 0x01	; 1
    1166:	31 09       	sbc	r19, r1
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;

	if((byteToSendToBig & 0x10)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    1168:	d9 f7       	brne	.-10     	; 0x1160 <sendByteToBig+0x86>
    116a:	68 c0       	rjmp	.+208    	; 0x123c <sendByteToBig+0x162>
	if(PORTC_get_pin_level(3)==0)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;
    116c:	53 99       	sbic	0x0a, 3	; 10
    116e:	03 c0       	rjmp	.+6      	; 0x1176 <sendByteToBig+0x9c>
    1170:	21 50       	subi	r18, 0x01	; 1
    1172:	31 09       	sbc	r19, r1

	if((byteToSendToBig & 0x10)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    1174:	d9 f7       	brne	.-10     	; 0x116c <sendByteToBig+0x92>
	if(PORTC_get_pin_level(3)==1)break;

	if((byteToSendToBig & 0x08)==0)PORTB_set_pin_level(0, 0);
    1176:	83 fd       	sbrc	r24, 3
    1178:	02 c0       	rjmp	.+4      	; 0x117e <sendByteToBig+0xa4>
	} else {
		VPORTB.OUT &= ~(1 << pin);
    117a:	28 98       	cbi	0x05, 0	; 5
    117c:	64 c0       	rjmp	.+200    	; 0x1246 <sendByteToBig+0x16c>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    117e:	28 9a       	sbi	0x05, 0	; 5
    1180:	62 c0       	rjmp	.+196    	; 0x1246 <sendByteToBig+0x16c>
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    1182:	29 ef       	ldi	r18, 0xF9	; 249
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	53 9b       	sbis	0x0a, 3	; 10
    1188:	60 c0       	rjmp	.+192    	; 0x124a <sendByteToBig+0x170>
    118a:	21 50       	subi	r18, 0x01	; 1
    118c:	31 09       	sbc	r19, r1
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;

	if((byteToSendToBig & 0x08)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    118e:	d9 f7       	brne	.-10     	; 0x1186 <sendByteToBig+0xac>
    1190:	5c c0       	rjmp	.+184    	; 0x124a <sendByteToBig+0x170>
	if(PORTC_get_pin_level(3)==0)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;
    1192:	53 99       	sbic	0x0a, 3	; 10
    1194:	03 c0       	rjmp	.+6      	; 0x119c <sendByteToBig+0xc2>
    1196:	21 50       	subi	r18, 0x01	; 1
    1198:	31 09       	sbc	r19, r1

	if((byteToSendToBig & 0x08)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    119a:	d9 f7       	brne	.-10     	; 0x1192 <sendByteToBig+0xb8>
	if(PORTC_get_pin_level(3)==1)break;

	if((byteToSendToBig & 0x04)==0)PORTB_set_pin_level(0, 0);
    119c:	82 fd       	sbrc	r24, 2
    119e:	02 c0       	rjmp	.+4      	; 0x11a4 <sendByteToBig+0xca>
	} else {
		VPORTB.OUT &= ~(1 << pin);
    11a0:	28 98       	cbi	0x05, 0	; 5
    11a2:	58 c0       	rjmp	.+176    	; 0x1254 <sendByteToBig+0x17a>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    11a4:	28 9a       	sbi	0x05, 0	; 5
    11a6:	56 c0       	rjmp	.+172    	; 0x1254 <sendByteToBig+0x17a>
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    11a8:	29 ef       	ldi	r18, 0xF9	; 249
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	53 9b       	sbis	0x0a, 3	; 10
    11ae:	54 c0       	rjmp	.+168    	; 0x1258 <sendByteToBig+0x17e>
    11b0:	21 50       	subi	r18, 0x01	; 1
    11b2:	31 09       	sbc	r19, r1
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;

	if((byteToSendToBig & 0x04)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    11b4:	d9 f7       	brne	.-10     	; 0x11ac <sendByteToBig+0xd2>
    11b6:	50 c0       	rjmp	.+160    	; 0x1258 <sendByteToBig+0x17e>
	if(PORTC_get_pin_level(3)==0)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;
    11b8:	53 99       	sbic	0x0a, 3	; 10
    11ba:	03 c0       	rjmp	.+6      	; 0x11c2 <sendByteToBig+0xe8>
    11bc:	21 50       	subi	r18, 0x01	; 1
    11be:	31 09       	sbc	r19, r1

	if((byteToSendToBig & 0x04)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    11c0:	d9 f7       	brne	.-10     	; 0x11b8 <sendByteToBig+0xde>
	if(PORTC_get_pin_level(3)==1)break;

	if((byteToSendToBig & 0x02)==0)PORTB_set_pin_level(0, 0);
    11c2:	81 fd       	sbrc	r24, 1
    11c4:	02 c0       	rjmp	.+4      	; 0x11ca <sendByteToBig+0xf0>
	} else {
		VPORTB.OUT &= ~(1 << pin);
    11c6:	28 98       	cbi	0x05, 0	; 5
    11c8:	4c c0       	rjmp	.+152    	; 0x1262 <sendByteToBig+0x188>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    11ca:	28 9a       	sbi	0x05, 0	; 5
    11cc:	4a c0       	rjmp	.+148    	; 0x1262 <sendByteToBig+0x188>
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    11ce:	29 ef       	ldi	r18, 0xF9	; 249
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	53 9b       	sbis	0x0a, 3	; 10
    11d4:	48 c0       	rjmp	.+144    	; 0x1266 <sendByteToBig+0x18c>
    11d6:	21 50       	subi	r18, 0x01	; 1
    11d8:	31 09       	sbc	r19, r1
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;

	if((byteToSendToBig & 0x02)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    11da:	d9 f7       	brne	.-10     	; 0x11d2 <sendByteToBig+0xf8>
    11dc:	44 c0       	rjmp	.+136    	; 0x1266 <sendByteToBig+0x18c>
	if(PORTC_get_pin_level(3)==0)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;
    11de:	53 99       	sbic	0x0a, 3	; 10
    11e0:	03 c0       	rjmp	.+6      	; 0x11e8 <sendByteToBig+0x10e>
    11e2:	21 50       	subi	r18, 0x01	; 1
    11e4:	31 09       	sbc	r19, r1

	if((byteToSendToBig & 0x02)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    11e6:	d9 f7       	brne	.-10     	; 0x11de <sendByteToBig+0x104>
	if(PORTC_get_pin_level(3)==1)break;

	if((byteToSendToBig & 0x01)==0)PORTB_set_pin_level(0, 0);
    11e8:	80 fd       	sbrc	r24, 0
    11ea:	02 c0       	rjmp	.+4      	; 0x11f0 <sendByteToBig+0x116>
	} else {
		VPORTB.OUT &= ~(1 << pin);
    11ec:	28 98       	cbi	0x05, 0	; 5
    11ee:	40 c0       	rjmp	.+128    	; 0x1270 <sendByteToBig+0x196>
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
    11f0:	28 9a       	sbi	0x05, 0	; 5
    11f2:	3e c0       	rjmp	.+124    	; 0x1270 <sendByteToBig+0x196>
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    11f4:	89 ef       	ldi	r24, 0xF9	; 249
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	53 9b       	sbis	0x0a, 3	; 10
    11fa:	3c c0       	rjmp	.+120    	; 0x1274 <sendByteToBig+0x19a>
    11fc:	01 97       	sbiw	r24, 0x01	; 1
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;

	if((byteToSendToBig & 0x01)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    11fe:	e1 f7       	brne	.-8      	; 0x11f8 <sendByteToBig+0x11e>
    1200:	39 c0       	rjmp	.+114    	; 0x1274 <sendByteToBig+0x19a>
	if(PORTC_get_pin_level(3)==0)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;
    1202:	53 99       	sbic	0x0a, 3	; 10
    1204:	02 c0       	rjmp	.+4      	; 0x120a <sendByteToBig+0x130>
    1206:	01 97       	sbiw	r24, 0x01	; 1

	if((byteToSendToBig & 0x01)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
    1208:	e1 f7       	brne	.-8      	; 0x1202 <sendByteToBig+0x128>
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
    120a:	20 98       	cbi	0x04, 0	; 4
	if(PORTC_get_pin_level(3)==1)break;

	TPB0_set_dir(PORT_DIR_IN);
}
    120c:	08 95       	ret
	

	if((byteToSendToBig & 0x80)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    120e:	53 99       	sbic	0x0a, 3	; 10
    1210:	6c cf       	rjmp	.-296    	; 0x10ea <sendByteToBig+0x10>
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;
    1212:	53 99       	sbic	0x0a, 3	; 10
    1214:	77 cf       	rjmp	.-274    	; 0x1104 <sendByteToBig+0x2a>
    1216:	29 ef       	ldi	r18, 0xF9	; 249
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	6f cf       	rjmp	.-290    	; 0x10fa <sendByteToBig+0x20>

	if((byteToSendToBig & 0x40)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    121c:	53 99       	sbic	0x0a, 3	; 10
    121e:	78 cf       	rjmp	.-272    	; 0x1110 <sendByteToBig+0x36>
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;
    1220:	53 99       	sbic	0x0a, 3	; 10
    1222:	83 cf       	rjmp	.-250    	; 0x112a <sendByteToBig+0x50>
    1224:	29 ef       	ldi	r18, 0xF9	; 249
    1226:	30 e0       	ldi	r19, 0x00	; 0
    1228:	7b cf       	rjmp	.-266    	; 0x1120 <sendByteToBig+0x46>

	if((byteToSendToBig & 0x20)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    122a:	53 99       	sbic	0x0a, 3	; 10
    122c:	84 cf       	rjmp	.-248    	; 0x1136 <sendByteToBig+0x5c>
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;
    122e:	53 99       	sbic	0x0a, 3	; 10
    1230:	8f cf       	rjmp	.-226    	; 0x1150 <sendByteToBig+0x76>
    1232:	29 ef       	ldi	r18, 0xF9	; 249
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	87 cf       	rjmp	.-242    	; 0x1146 <sendByteToBig+0x6c>

	if((byteToSendToBig & 0x10)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    1238:	53 99       	sbic	0x0a, 3	; 10
    123a:	90 cf       	rjmp	.-224    	; 0x115c <sendByteToBig+0x82>
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;
    123c:	53 99       	sbic	0x0a, 3	; 10
    123e:	9b cf       	rjmp	.-202    	; 0x1176 <sendByteToBig+0x9c>
    1240:	29 ef       	ldi	r18, 0xF9	; 249
    1242:	30 e0       	ldi	r19, 0x00	; 0
    1244:	93 cf       	rjmp	.-218    	; 0x116c <sendByteToBig+0x92>

	if((byteToSendToBig & 0x08)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    1246:	53 99       	sbic	0x0a, 3	; 10
    1248:	9c cf       	rjmp	.-200    	; 0x1182 <sendByteToBig+0xa8>
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;
    124a:	53 99       	sbic	0x0a, 3	; 10
    124c:	a7 cf       	rjmp	.-178    	; 0x119c <sendByteToBig+0xc2>
    124e:	29 ef       	ldi	r18, 0xF9	; 249
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	9f cf       	rjmp	.-194    	; 0x1192 <sendByteToBig+0xb8>

	if((byteToSendToBig & 0x04)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    1254:	53 99       	sbic	0x0a, 3	; 10
    1256:	a8 cf       	rjmp	.-176    	; 0x11a8 <sendByteToBig+0xce>
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;
    1258:	53 99       	sbic	0x0a, 3	; 10
    125a:	b3 cf       	rjmp	.-154    	; 0x11c2 <sendByteToBig+0xe8>
    125c:	29 ef       	ldi	r18, 0xF9	; 249
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	ab cf       	rjmp	.-170    	; 0x11b8 <sendByteToBig+0xde>

	if((byteToSendToBig & 0x02)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    1262:	53 99       	sbic	0x0a, 3	; 10
    1264:	b4 cf       	rjmp	.-152    	; 0x11ce <sendByteToBig+0xf4>
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;
    1266:	53 99       	sbic	0x0a, 3	; 10
    1268:	bf cf       	rjmp	.-130    	; 0x11e8 <sendByteToBig+0x10e>
    126a:	29 ef       	ldi	r18, 0xF9	; 249
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	b7 cf       	rjmp	.-146    	; 0x11de <sendByteToBig+0x104>

	if((byteToSendToBig & 0x01)==0)PORTB_set_pin_level(0, 0);
	else PORTB_set_pin_level(0, 1);
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==0)break;
    1270:	53 99       	sbic	0x0a, 3	; 10
    1272:	c0 cf       	rjmp	.-128    	; 0x11f4 <sendByteToBig+0x11a>
	for(bigTinyTimeoutCtr=BTTIMEOUT;bigTinyTimeoutCtr>0;bigTinyTimeoutCtr--)
	if(PORTC_get_pin_level(3)==1)break;
    1274:	53 99       	sbic	0x0a, 3	; 10
    1276:	c9 cf       	rjmp	.-110    	; 0x120a <sendByteToBig+0x130>
    1278:	89 ef       	ldi	r24, 0xF9	; 249
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	c2 cf       	rjmp	.-124    	; 0x1202 <sendByteToBig+0x128>

0000127e <getGPS>:
***********************  GPS  ************************************************************************
******************************************************************************************************/
/***********************************************************************/
/*  GET GPS
/***********************************************************************/
char getGPS(void){
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
	short crcrc;
	char iters;
	LCDclear();
    1286:	00 d9       	rcall	.-3584   	; 0x488 <LCDclear>
	usart_put_string(&("GPS "),4);
    1288:	64 e0       	ldi	r22, 0x04	; 4
    128a:	85 ea       	ldi	r24, 0xA5	; 165
    128c:	9a e9       	ldi	r25, 0x9A	; 154
    128e:	0d d8       	rcall	.-4070   	; 0x2aa <usart_put_string>
	myDelay_ms(300);
    1290:	6c e2       	ldi	r22, 0x2C	; 44
    1292:	71 e0       	ldi	r23, 0x01	; 1
    1294:	80 e0       	ldi	r24, 0x00	; 0
    1296:	90 e0       	ldi	r25, 0x00	; 0
    1298:	a5 d7       	rcall	.+3914   	; 0x21e4 <__data_load_end+0x726>
	redBlink(3);
    129a:	83 e0       	ldi	r24, 0x03	; 3
    129c:	ba d7       	rcall	.+3956   	; 0x2212 <__data_load_end+0x754>
	openGPSuBlox();
    129e:	37 d7       	rcall	.+3694   	; 0x210e <__data_load_end+0x650>
	initGPSuBlox();
    12a0:	15 d8       	rcall	.-4054   	; 0x2cc <initGPSuBlox>
	timeToFix=0;
    12a2:	10 92 ac 3e 	sts	0x3EAC, r1	; 0x803eac <timeToFix>
    12a6:	10 92 ad 3e 	sts	0x3EAD, r1	; 0x803ead <timeToFix+0x1>
	gTryUblox();//does 3000 trials (50mins), then cycles pwr to GPS, runs again.
    12aa:	4e dd       	rcall	.-1380   	; 0xd48 <gTryUblox>
	if (uBloxStatus!='A') {
    12ac:	80 91 b4 3e 	lds	r24, 0x3EB4	; 0x803eb4 <uBloxStatus>
    12b0:	81 34       	cpi	r24, 0x41	; 65
    12b2:	51 f0       	breq	.+20     	; 0x12c8 <getGPS+0x4a>
		if (chkMagnetSlow()){    // if GPS not good yet and magnet was installed
    12b4:	23 dd       	rcall	.-1466   	; 0xcfc <chkMagnetSlow>
    12b6:	88 23       	and	r24, r24
    12b8:	09 f4       	brne	.+2      	; 0x12bc <getGPS+0x3e>
    12ba:	7e c0       	rjmp	.+252    	; 0x13b8 <getGPS+0x13a>
			mState=FIRST_MAGNETOFF_CHECK;
    12bc:	84 e0       	ldi	r24, 0x04	; 4
    12be:	80 93 b1 3e 	sts	0x3EB1, r24	; 0x803eb1 <mState>
			closeGPS();
    12c2:	3d d7       	rcall	.+3706   	; 0x213e <__data_load_end+0x680>
		}
		return 1;
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	83 c0       	rjmp	.+262    	; 0x13ce <getGPS+0x150>
		}else{        //if good GPS because 3x oneSecs with 'A' response
		GPSgetDate();//tries for 3 of 4 ZDA messages. Then grabs date for param[0] and param[1]  //Add loop test of return value
    12c8:	61 da       	rcall	.-2878   	; 0x78c <GPSgetDate>
		GPSgetTime();
    12ca:	b6 dc       	rcall	.-1684   	; 0xc38 <GPSgetTime>
		closeGPS();
    12cc:	38 d7       	rcall	.+3696   	; 0x213e <__data_load_end+0x680>
		crcrc=calcCRC(gpsParams,21);
    12ce:	65 e1       	ldi	r22, 0x15	; 21
    12d0:	85 e9       	ldi	r24, 0x95	; 149
    12d2:	9e e3       	ldi	r25, 0x3E	; 62
    12d4:	86 dd       	rcall	.-1268   	; 0xde2 <calcCRC>
		gpsParams[21]=crcrc>>8;
    12d6:	e5 e9       	ldi	r30, 0x95	; 149
    12d8:	fe e3       	ldi	r31, 0x3E	; 62
    12da:	95 8b       	std	Z+21, r25	; 0x15
		gpsParams[22]=crcrc&0x00FF;
    12dc:	86 8b       	std	Z+22, r24	; 0x16
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
    12de:	48 9a       	sbi	0x09, 0	; 9
    12e0:	c0 e3       	ldi	r28, 0x30	; 48
    12e2:	d5 e7       	ldi	r29, 0x75	; 117
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    12e4:	28 98       	cbi	0x05, 0	; 5
		PORTC_set_pin_level(0, 1);	//WakeUp V71
					
		for(crcrc=30000;crcrc>0;crcrc--){
			PORTB_set_pin_level(0,0);
			myDelay_hus(1);
    12e6:	61 e0       	ldi	r22, 0x01	; 1
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	c7 d7       	rcall	.+3982   	; 0x227e <__data_load_end+0x7c0>
			if(PORTC_get_pin_level(3)==0)break;
    12f0:	53 9b       	sbis	0x0a, 3	; 10
    12f2:	64 c0       	rjmp	.+200    	; 0x13bc <getGPS+0x13e>
    12f4:	21 97       	sbiw	r28, 0x01	; 1
		crcrc=calcCRC(gpsParams,21);
		gpsParams[21]=crcrc>>8;
		gpsParams[22]=crcrc&0x00FF;
		PORTC_set_pin_level(0, 1);	//WakeUp V71
					
		for(crcrc=30000;crcrc>0;crcrc--){
    12f6:	b1 f7       	brne	.-20     	; 0x12e4 <getGPS+0x66>
    12f8:	61 c0       	rjmp	.+194    	; 0x13bc <getGPS+0x13e>
			if(PORTC_get_pin_level(3)==0)break;
		}
					
		short bigTinyStartTimeoutCtr;
		for(bigTinyStartTimeoutCtr=30000;bigTinyStartTimeoutCtr>0;bigTinyStartTimeoutCtr--){
			if(PORTC_get_pin_level(3)==0)break;	//wait for V71 clk to go low.
    12fa:	8f e2       	ldi	r24, 0x2F	; 47
    12fc:	95 e7       	ldi	r25, 0x75	; 117
    12fe:	53 9b       	sbis	0x0a, 3	; 10
    1300:	5f c0       	rjmp	.+190    	; 0x13c0 <getGPS+0x142>
    1302:	01 97       	sbiw	r24, 0x01	; 1
			myDelay_hus(1);
			if(PORTC_get_pin_level(3)==0)break;
		}
					
		short bigTinyStartTimeoutCtr;
		for(bigTinyStartTimeoutCtr=30000;bigTinyStartTimeoutCtr>0;bigTinyStartTimeoutCtr--){
    1304:	e1 f7       	brne	.-8      	; 0x12fe <getGPS+0x80>
    1306:	5c c0       	rjmp	.+184    	; 0x13c0 <getGPS+0x142>
			if(PORTC_get_pin_level(3)==0)break;	//wait for V71 clk to go low.
		}
		for(bigTinyStartTimeoutCtr=30000;bigTinyStartTimeoutCtr>0;bigTinyStartTimeoutCtr--){
			if(PORTC_get_pin_level(3)==1)break;	//wait for V71 clk to go low.
    1308:	8f e2       	ldi	r24, 0x2F	; 47
    130a:	95 e7       	ldi	r25, 0x75	; 117
    130c:	53 99       	sbic	0x0a, 3	; 10
    130e:	5a c0       	rjmp	.+180    	; 0x13c4 <getGPS+0x146>
    1310:	01 97       	sbiw	r24, 0x01	; 1
					
		short bigTinyStartTimeoutCtr;
		for(bigTinyStartTimeoutCtr=30000;bigTinyStartTimeoutCtr>0;bigTinyStartTimeoutCtr--){
			if(PORTC_get_pin_level(3)==0)break;	//wait for V71 clk to go low.
		}
		for(bigTinyStartTimeoutCtr=30000;bigTinyStartTimeoutCtr>0;bigTinyStartTimeoutCtr--){
    1312:	e1 f7       	brne	.-8      	; 0x130c <getGPS+0x8e>
    1314:	57 c0       	rjmp	.+174    	; 0x13c4 <getGPS+0x146>
			if(PORTC_get_pin_level(3)==1)break;	//wait for V71 clk to go low.
		}
					
					
		for(iters=0;iters<23;iters++){
			sendByteToBig(gpsParams[iters]);
    1316:	89 91       	ld	r24, Y+
    1318:	e0 de       	rcall	.-576    	; 0x10da <sendByteToBig>
		for(bigTinyStartTimeoutCtr=30000;bigTinyStartTimeoutCtr>0;bigTinyStartTimeoutCtr--){
			if(PORTC_get_pin_level(3)==1)break;	//wait for V71 clk to go low.
		}
					
					
		for(iters=0;iters<23;iters++){
    131a:	0c 17       	cp	r16, r28
    131c:	1d 07       	cpc	r17, r29
    131e:	d9 f7       	brne	.-10     	; 0x1316 <getGPS+0x98>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    1320:	48 98       	cbi	0x09, 0	; 9
			sendByteToBig(gpsParams[iters]);
		}

		PORTC_set_pin_level(0, 0);	//End WakeUp V71 Low
		LCDclear();
    1322:	b2 d8       	rcall	.-3740   	; 0x488 <LCDclear>
		sendLCDshort(gpsParams[0], 2);
    1324:	c5 e9       	ldi	r28, 0x95	; 149
    1326:	de e3       	ldi	r29, 0x3E	; 62
    1328:	88 81       	ld	r24, Y
    132a:	62 e0       	ldi	r22, 0x02	; 2
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	66 d8       	rcall	.-3892   	; 0x3fc <sendLCDshort>
		sendLCDshort(gpsParams[1], 2);
    1330:	89 81       	ldd	r24, Y+1	; 0x01
    1332:	62 e0       	ldi	r22, 0x02	; 2
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	62 d8       	rcall	.-3900   	; 0x3fc <sendLCDshort>
		sendLCDshort(gpsParams[2], 2);
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	62 e0       	ldi	r22, 0x02	; 2
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	5e d8       	rcall	.-3908   	; 0x3fc <sendLCDshort>
		sendLCDshort(gpsParams[3], 2);
    1340:	8b 81       	ldd	r24, Y+3	; 0x03
    1342:	62 e0       	ldi	r22, 0x02	; 2
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	5a d8       	rcall	.-3916   	; 0x3fc <sendLCDshort>
		sendLCDshort(gpsParams[4], 2);
    1348:	8c 81       	ldd	r24, Y+4	; 0x04
    134a:	62 e0       	ldi	r22, 0x02	; 2
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	56 d8       	rcall	.-3924   	; 0x3fc <sendLCDshort>
		sendLCDshort(gpsParams[5], 2);
    1350:	8d 81       	ldd	r24, Y+5	; 0x05
    1352:	62 e0       	ldi	r22, 0x02	; 2
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	52 d8       	rcall	.-3932   	; 0x3fc <sendLCDshort>
		sendLCDshort(gpsParams[6], 2);
    1358:	8e 81       	ldd	r24, Y+6	; 0x06
    135a:	62 e0       	ldi	r22, 0x02	; 2
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	4e d8       	rcall	.-3940   	; 0x3fc <sendLCDshort>
		sendLCDshort(gpsParams[7], 2);
    1360:	8f 81       	ldd	r24, Y+7	; 0x07
    1362:	62 e0       	ldi	r22, 0x02	; 2
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	4a d8       	rcall	.-3948   	; 0x3fc <sendLCDshort>
		LCDbottomLine();
    1368:	af d8       	rcall	.-3746   	; 0x4c8 <LCDbottomLine>
		sendLCDshort(gpsParams[8], 2);
    136a:	88 85       	ldd	r24, Y+8	; 0x08
    136c:	62 e0       	ldi	r22, 0x02	; 2
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	45 d8       	rcall	.-3958   	; 0x3fc <sendLCDshort>
		sendLCDshort(gpsParams[9], 2);
    1372:	89 85       	ldd	r24, Y+9	; 0x09
    1374:	62 e0       	ldi	r22, 0x02	; 2
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	41 d8       	rcall	.-3966   	; 0x3fc <sendLCDshort>
		sendLCDshort(gpsParams[10], 2);
    137a:	8a 85       	ldd	r24, Y+10	; 0x0a
    137c:	62 e0       	ldi	r22, 0x02	; 2
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	3d d8       	rcall	.-3974   	; 0x3fc <sendLCDshort>
		sendLCDshort(gpsParams[11], 2);
    1382:	8b 85       	ldd	r24, Y+11	; 0x0b
    1384:	62 e0       	ldi	r22, 0x02	; 2
    1386:	90 e0       	ldi	r25, 0x00	; 0
    1388:	39 d8       	rcall	.-3982   	; 0x3fc <sendLCDshort>
		sendLCDshort(gpsParams[12], 2);
    138a:	8c 85       	ldd	r24, Y+12	; 0x0c
    138c:	62 e0       	ldi	r22, 0x02	; 2
    138e:	90 e0       	ldi	r25, 0x00	; 0
    1390:	35 d8       	rcall	.-3990   	; 0x3fc <sendLCDshort>
		sendLCDshort(gpsParams[13], 2);
    1392:	8d 85       	ldd	r24, Y+13	; 0x0d
    1394:	62 e0       	ldi	r22, 0x02	; 2
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	31 d8       	rcall	.-3998   	; 0x3fc <sendLCDshort>
		sendLCDshort(gpsParams[14], 2);
    139a:	8e 85       	ldd	r24, Y+14	; 0x0e
    139c:	62 e0       	ldi	r22, 0x02	; 2
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	2d d8       	rcall	.-4006   	; 0x3fc <sendLCDshort>
		sendLCDshort(gpsParams[15], 2);
    13a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    13a4:	62 e0       	ldi	r22, 0x02	; 2
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	29 d8       	rcall	.-4014   	; 0x3fc <sendLCDshort>
		myDelay_ms(2000);//120 is too short with v71 at either 3 or 32 clock cycle trigger. Might need longer without
    13aa:	60 ed       	ldi	r22, 0xD0	; 208
    13ac:	77 e0       	ldi	r23, 0x07	; 7
    13ae:	80 e0       	ldi	r24, 0x00	; 0
    13b0:	90 e0       	ldi	r25, 0x00	; 0
    13b2:	18 d7       	rcall	.+3632   	; 0x21e4 <__data_load_end+0x726>
		
		return 0;
    13b4:	80 e0       	ldi	r24, 0x00	; 0
    13b6:	0b c0       	rjmp	.+22     	; 0x13ce <getGPS+0x150>
	if (uBloxStatus!='A') {
		if (chkMagnetSlow()){    // if GPS not good yet and magnet was installed
			mState=FIRST_MAGNETOFF_CHECK;
			closeGPS();
		}
		return 1;
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	09 c0       	rjmp	.+18     	; 0x13ce <getGPS+0x150>
			if(PORTC_get_pin_level(3)==0)break;
		}
					
		short bigTinyStartTimeoutCtr;
		for(bigTinyStartTimeoutCtr=30000;bigTinyStartTimeoutCtr>0;bigTinyStartTimeoutCtr--){
			if(PORTC_get_pin_level(3)==0)break;	//wait for V71 clk to go low.
    13bc:	53 99       	sbic	0x0a, 3	; 10
    13be:	9d cf       	rjmp	.-198    	; 0x12fa <getGPS+0x7c>
		}
		for(bigTinyStartTimeoutCtr=30000;bigTinyStartTimeoutCtr>0;bigTinyStartTimeoutCtr--){
			if(PORTC_get_pin_level(3)==1)break;	//wait for V71 clk to go low.
    13c0:	53 9b       	sbis	0x0a, 3	; 10
    13c2:	a2 cf       	rjmp	.-188    	; 0x1308 <getGPS+0x8a>
    13c4:	c5 e9       	ldi	r28, 0x95	; 149
    13c6:	de e3       	ldi	r29, 0x3E	; 62
    13c8:	0c ea       	ldi	r16, 0xAC	; 172
    13ca:	1e e3       	ldi	r17, 0x3E	; 62
    13cc:	a4 cf       	rjmp	.-184    	; 0x1316 <getGPS+0x98>
		sendLCDshort(gpsParams[15], 2);
		myDelay_ms(2000);//120 is too short with v71 at either 3 or 32 clock cycle trigger. Might need longer without
		
		return 0;
		}
}
    13ce:	df 91       	pop	r29
    13d0:	cf 91       	pop	r28
    13d2:	1f 91       	pop	r17
    13d4:	0f 91       	pop	r16
    13d6:	08 95       	ret

000013d8 <main>:
	char iters=0;
	char LCDdata[16];
	char ibase=0;
	unsigned short crcrc;
	
	g_motionMinTotals=0;
    13d8:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <_edata>
	g_rxDataIndex=0;

	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    13dc:	6e d6       	rcall	.+3292   	; 0x20ba <__data_load_end+0x5fc>
	DISABLE_INTERRUPTS();
    13de:	f8 94       	cli
	ccp_write_io((void*)&(CLKCTRL.OSC32KCTRLA),1 << CLKCTRL_RUNSTDBY_bp /* Run standby: enabled */);
    13e0:	62 e0       	ldi	r22, 0x02	; 2
    13e2:	70 e0       	ldi	r23, 0x00	; 0
    13e4:	88 e7       	ldi	r24, 0x78	; 120
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	fa d2       	rcall	.+1524   	; 0x19de <ccp_write_io>
	
	mState=BEGIN;
    13ea:	10 92 b1 3e 	sts	0x3EB1, r1	; 0x803eb1 <mState>
    13ee:	ee e7       	ldi	r30, 0x7E	; 126
    13f0:	fe e3       	ldi	r31, 0x3E	; 62
    13f2:	85 e9       	ldi	r24, 0x95	; 149
    13f4:	9e e3       	ldi	r25, 0x3E	; 62
	for (iters=0;iters<SIZEOFMOTPARAMS;iters++)motParams[iters]=0;
    13f6:	11 92       	st	Z+, r1
    13f8:	8e 17       	cp	r24, r30
    13fa:	9f 07       	cpc	r25, r31
    13fc:	e1 f7       	brne	.-8      	; 0x13f6 <main+0x1e>
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    13fe:	42 98       	cbi	0x08, 2	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    1400:	e2 e5       	ldi	r30, 0x52	; 82
    1402:	f4 e0       	ldi	r31, 0x04	; 4
    1404:	80 81       	ld	r24, Z
    1406:	88 60       	ori	r24, 0x08	; 8
    1408:	80 83       	st	Z, r24
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    140a:	41 98       	cbi	0x08, 1	; 8
static inline void PORTC_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
    140c:	e1 e5       	ldi	r30, 0x51	; 81
    140e:	f4 e0       	ldi	r31, 0x04	; 4
    1410:	80 81       	ld	r24, Z
    1412:	88 60       	ori	r24, 0x08	; 8
    1414:	80 83       	st	Z, r24
 */
static inline void PORTC_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    1416:	80 81       	ld	r24, Z
    1418:	88 7f       	andi	r24, 0xF8	; 248
    141a:	83 60       	ori	r24, 0x03	; 3
    141c:	80 83       	st	Z, r24
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
    141e:	26 98       	cbi	0x04, 6	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    1420:	e6 e3       	ldi	r30, 0x36	; 54
    1422:	f4 e0       	ldi	r31, 0x04	; 4
    1424:	80 81       	ld	r24, Z
    1426:	87 7f       	andi	r24, 0xF7	; 247
    1428:	80 83       	st	Z, r24
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
    142a:	05 98       	cbi	0x00, 5	; 0
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    142c:	48 98       	cbi	0x09, 0	; 9
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
    142e:	40 9a       	sbi	0x08, 0	; 8
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    1430:	48 98       	cbi	0x09, 0	; 9
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
    1432:	43 98       	cbi	0x08, 3	; 8
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    1434:	e3 e5       	ldi	r30, 0x53	; 83
    1436:	f4 e0       	ldi	r31, 0x04	; 4
    1438:	80 81       	ld	r24, Z
    143a:	87 7f       	andi	r24, 0xF7	; 247
    143c:	80 83       	st	Z, r24
//	TPC0_set_dir(PORT_DIR_OUT);//XBee Pwr
//    TPB5_set_dir(PORT_DIR_OUT);//SCL	TEMPORARY
//    TPB4_set_dir(PORT_DIR_IN);//SI1153 Interrupt  (NOT USED??)
//	TPB4_set_pull_mode(PORT_PULL_UP);//SI1153 Interrupt
//	TPB4_set_isc(PORT_ISC_FALLING_gc);//SI1153 Interrupt
closeGPS();
    143e:	7f d6       	rcall	.+3326   	; 0x213e <__data_load_end+0x680>
	DISABLE_INTERRUPTS();
    1440:	f8 94       	cli

	//	TPB6_set_dir(PORT_DIR_IN);//B6=data from PIR
	//	TPB6_set_pull_mode(PORT_PULL_OFF); //B6=data from PIR
	LCDclear();
    1442:	22 d8       	rcall	.-4028   	; 0x488 <LCDclear>
	usart_put_string(&("Startup A"),9);
    1444:	69 e0       	ldi	r22, 0x09	; 9
    1446:	8a ea       	ldi	r24, 0xAA	; 170
    1448:	9a e9       	ldi	r25, 0x9A	; 154
    144a:	2f d7       	rcall	.+3678   	; 0x22aa <__data_load_end+0x7ec>
    144c:	ce e1       	ldi	r28, 0x1E	; 30
		sendLCDshort(crcrc,4);
		myDelay_ms(3000);
	}*/

	for(iters=0;iters<30;iters++){  //give time to recover before getting stuck in sleep
		myDelay_ms(5);
    144e:	65 e0       	ldi	r22, 0x05	; 5
    1450:	70 e0       	ldi	r23, 0x00	; 0
    1452:	80 e0       	ldi	r24, 0x00	; 0
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	c6 d6       	rcall	.+3468   	; 0x21e4 <__data_load_end+0x726>
		redBlink(1);
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	db d6       	rcall	.+3510   	; 0x2212 <__data_load_end+0x754>
    145c:	c1 50       	subi	r28, 0x01	; 1
		usart_put_string(&("Pin LOW "),8);
		sendLCDshort(crcrc,4);
		myDelay_ms(3000);
	}*/

	for(iters=0;iters<30;iters++){  //give time to recover before getting stuck in sleep
    145e:	b9 f7       	brne	.-18     	; 0x144e <main+0x76>
 */
static inline void PORTA_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTA + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    1460:	e1 e1       	ldi	r30, 0x11	; 17
    1462:	f4 e0       	ldi	r31, 0x04	; 4
    1464:	80 81       	ld	r24, Z
    1466:	88 7f       	andi	r24, 0xF8	; 248
    1468:	80 83       	st	Z, r24
    146a:	e2 e1       	ldi	r30, 0x12	; 18
    146c:	f4 e0       	ldi	r31, 0x04	; 4
    146e:	80 81       	ld	r24, Z
    1470:	88 7f       	andi	r24, 0xF8	; 248
    1472:	80 83       	st	Z, r24
    1474:	e3 e1       	ldi	r30, 0x13	; 19
    1476:	f4 e0       	ldi	r31, 0x04	; 4
    1478:	80 81       	ld	r24, Z
    147a:	88 7f       	andi	r24, 0xF8	; 248
    147c:	80 83       	st	Z, r24
    147e:	e4 e1       	ldi	r30, 0x14	; 20
    1480:	f4 e0       	ldi	r31, 0x04	; 4
    1482:	80 81       	ld	r24, Z
    1484:	88 7f       	andi	r24, 0xF8	; 248
    1486:	80 83       	st	Z, r24
    1488:	e5 e1       	ldi	r30, 0x15	; 21
    148a:	f4 e0       	ldi	r31, 0x04	; 4
    148c:	80 81       	ld	r24, Z
    148e:	88 7f       	andi	r24, 0xF8	; 248
    1490:	80 83       	st	Z, r24
    1492:	e6 e1       	ldi	r30, 0x16	; 22
    1494:	f4 e0       	ldi	r31, 0x04	; 4
    1496:	80 81       	ld	r24, Z
    1498:	88 7f       	andi	r24, 0xF8	; 248
    149a:	80 83       	st	Z, r24
    149c:	e7 e1       	ldi	r30, 0x17	; 23
    149e:	f4 e0       	ldi	r31, 0x04	; 4
    14a0:	80 81       	ld	r24, Z
    14a2:	88 7f       	andi	r24, 0xF8	; 248
    14a4:	80 83       	st	Z, r24
 */
static inline void PORTB_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    14a6:	e1 e3       	ldi	r30, 0x31	; 49
    14a8:	f4 e0       	ldi	r31, 0x04	; 4
    14aa:	80 81       	ld	r24, Z
    14ac:	88 7f       	andi	r24, 0xF8	; 248
    14ae:	80 83       	st	Z, r24
    14b0:	e2 e3       	ldi	r30, 0x32	; 50
    14b2:	f4 e0       	ldi	r31, 0x04	; 4
    14b4:	80 81       	ld	r24, Z
    14b6:	88 7f       	andi	r24, 0xF8	; 248
    14b8:	80 83       	st	Z, r24
    14ba:	e3 e3       	ldi	r30, 0x33	; 51
    14bc:	f4 e0       	ldi	r31, 0x04	; 4
    14be:	80 81       	ld	r24, Z
    14c0:	88 7f       	andi	r24, 0xF8	; 248
    14c2:	80 83       	st	Z, r24
    14c4:	e4 e3       	ldi	r30, 0x34	; 52
    14c6:	f4 e0       	ldi	r31, 0x04	; 4
    14c8:	80 81       	ld	r24, Z
    14ca:	88 7f       	andi	r24, 0xF8	; 248
    14cc:	80 83       	st	Z, r24
    14ce:	e5 e3       	ldi	r30, 0x35	; 53
    14d0:	f4 e0       	ldi	r31, 0x04	; 4
    14d2:	80 81       	ld	r24, Z
    14d4:	88 7f       	andi	r24, 0xF8	; 248
    14d6:	80 83       	st	Z, r24
    14d8:	e6 e3       	ldi	r30, 0x36	; 54
    14da:	f4 e0       	ldi	r31, 0x04	; 4
    14dc:	80 81       	ld	r24, Z
    14de:	88 7f       	andi	r24, 0xF8	; 248
    14e0:	80 83       	st	Z, r24
    14e2:	e7 e3       	ldi	r30, 0x37	; 55
    14e4:	f4 e0       	ldi	r31, 0x04	; 4
    14e6:	80 81       	ld	r24, Z
    14e8:	88 7f       	andi	r24, 0xF8	; 248
    14ea:	80 83       	st	Z, r24
	PORTC_pin_set_isc(1, PORT_ISC_INTDISABLE_gc);
	PORTC_pin_set_isc(2, PORT_ISC_INTDISABLE_gc);
	PORTC_pin_set_isc(3, PORT_ISC_INTDISABLE_gc);
	PORTC_pin_set_isc(4, PORT_ISC_INTDISABLE_gc);
	PORTC_pin_set_isc(5, PORT_ISC_INTDISABLE_gc);*/
	VPORTA_INTFLAGS = 0xFF;
    14ec:	8f ef       	ldi	r24, 0xFF	; 255
    14ee:	83 b9       	out	0x03, r24	; 3
	VPORTB_INTFLAGS = 0xFF;
    14f0:	87 b9       	out	0x07, r24	; 7
	VPORTC_INTFLAGS = 0x3F;
    14f2:	8f e3       	ldi	r24, 0x3F	; 63
    14f4:	8b b9       	out	0x0b, r24	; 11
 */
static inline void PORTC_pin_set_isc(const uint8_t pin, const PORT_ISC_t isc)
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTC + 0x10 + pin);

	*port_pin_ctrl = (*port_pin_ctrl & ~PORT_ISC_gm) | isc;
    14f6:	e1 e5       	ldi	r30, 0x51	; 81
    14f8:	f4 e0       	ldi	r31, 0x04	; 4
    14fa:	80 81       	ld	r24, Z
    14fc:	88 7f       	andi	r24, 0xF8	; 248
    14fe:	83 60       	ori	r24, 0x03	; 3
    1500:	80 83       	st	Z, r24
	TPC1_set_isc(PORT_ISC_FALLING_gc);//C1=WAKEUP FROM BIG
//	TPB6_set_isc(PORT_ISC_RISING_gc);//Motion Switch
    *((uint8_t*)0x0A4A)&=~0x31;//TCA0 Ints
    1502:	ea e4       	ldi	r30, 0x4A	; 74
    1504:	fa e0       	ldi	r31, 0x0A	; 10
    1506:	80 81       	ld	r24, Z
    1508:	8e 7c       	andi	r24, 0xCE	; 206
    150a:	80 83       	st	Z, r24
    *((uint8_t*)0x0A4B)|=0x31;//TCA0 Flags
    150c:	eb e4       	ldi	r30, 0x4B	; 75
    150e:	fa e0       	ldi	r31, 0x0A	; 10
    1510:	80 81       	ld	r24, Z
    1512:	81 63       	ori	r24, 0x31	; 49
    1514:	80 83       	st	Z, r24
	  USART0.CTRLB = 0 << USART_MPCM_bp       /* Multi-processor Communication Mode: disabled */
    1516:	e0 e0       	ldi	r30, 0x00	; 0
    1518:	f8 e0       	ldi	r31, 0x08	; 8
    151a:	16 82       	std	Z+6, r1	; 0x06
	  | USART_RXMODE_NORMAL_gc /* Normal mode */
	  | 0 << USART_SFDEN_bp    /* Start Frame Detection Enable: disabled */
	  | 0 << USART_TXEN_bp;    /* Transmitter Enable: enabled */


	ENABLE_INTERRUPTS();
    151c:	78 94       	sei
//	SLPCTRL.CTRLA = 0x03;	//03=enable STANDBY SLEEP 0.0021 mA. 01=enable IDLE SLEEP  0.774 mA. 05=enable PWR DN SLEEP  0.0007 mA	but no RTC wakeup
	
	USART0.BAUD = (uint16_t)USART0_BAUD_RATE(9600); /* set baud rate register for LCD*/
    151e:	8c e6       	ldi	r24, 0x6C	; 108
    1520:	95 e0       	ldi	r25, 0x05	; 5
    1522:	80 87       	std	Z+8, r24	; 0x08
    1524:	91 87       	std	Z+9, r25	; 0x09
	mState=0;
    1526:	10 92 b1 3e 	sts	0x3EB1, r1	; 0x803eb1 <mState>
	myDelay_ms(1100);
}*/
/**** END DEV ****/


	LCDclear();
    152a:	ae d7       	rcall	.+3932   	; 0x2488 <__data_load_end+0x9ca>
	usart_put_string(&("Startup C"),9);
    152c:	69 e0       	ldi	r22, 0x09	; 9
    152e:	84 eb       	ldi	r24, 0xB4	; 180
    1530:	9a e9       	ldi	r25, 0x9A	; 154
    1532:	bb d6       	rcall	.+3446   	; 0x22aa <__data_load_end+0x7ec>
	myDelay_ms(300);
    1534:	6c e2       	ldi	r22, 0x2C	; 44
    1536:	71 e0       	ldi	r23, 0x01	; 1
    1538:	80 e0       	ldi	r24, 0x00	; 0
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	53 d6       	rcall	.+3238   	; 0x21e4 <__data_load_end+0x726>
	LCDclear();
	sendLCDshort(mState,2);
	LCDspace();	
	sendLCDshort(rcvdCmd,2);
	LCDspace();
	sendLCDshort(motParams[9],2);
    153e:	ce e7       	ldi	r28, 0x7E	; 126
    1540:	de e3       	ldi	r29, 0x3E	; 62
		}
		break;
			case INTERRUPT_FROM_BIG://0E
			mState=IDLE;
		break;
		default: mState=IDLE;
    1542:	0d e0       	ldi	r16, 0x0D	; 13
			}
		break;
		case IDLE://0D
		if((rcvdCmd&0x10)==0x10){
			rcvdCmd=0;
			mState=GET_GPS;
    1544:	68 94       	set
    1546:	cc 24       	eor	r12, r12
    1548:	c3 f8       	bld	r12, 3
			if(chkMagnetSlow()){
				mState=FIRST_MAGNETON_CHECK;
				redBlinkLong(1);
			}else{
				if(!getGPS())mState=IDLE;
				else mState=NO_INITIAL_GPS_LONGTERM;
    154a:	0f 2e       	mov	r0, r31
    154c:	fc e0       	ldi	r31, 0x0C	; 12
    154e:	bf 2e       	mov	r11, r31
    1550:	f0 2d       	mov	r31, r0
				else mState=NO_INITIAL_GPS_LONGTERM;
			}
		break;
		case NO_INITIAL_GPS_LONGTERM://0C
			if(chkMagnetSlow()){
				mState=FIRST_MAGNETON_CHECK;
    1552:	11 e0       	ldi	r17, 0x01	; 1
			if(chkMagnetSlow()){
				mState=FIRST_MAGNETON_CHECK;
				redBlinkLong(1);
			}else{
				if(!getGPS())mState=IDLE;
				else mState=NO_INITIAL_GPS_C;
    1554:	0f 2e       	mov	r0, r31
    1556:	fb e0       	ldi	r31, 0x0B	; 11
    1558:	6f 2e       	mov	r6, r31
    155a:	f0 2d       	mov	r31, r0
			if(chkMagnetSlow()){
				mState=FIRST_MAGNETON_CHECK;
				redBlinkLong(1);
			}else{
				if(!getGPS())mState=IDLE;
				else mState=NO_INITIAL_GPS_B;
    155c:	0f 2e       	mov	r0, r31
    155e:	fa e0       	ldi	r31, 0x0A	; 10
    1560:	7f 2e       	mov	r7, r31
    1562:	f0 2d       	mov	r31, r0
			if(chkMagnetSlow()){
				mState=FIRST_MAGNETON_CHECK;
				redBlinkLong(1);
			}else{
				if(getGPS())mState=IDLE;
				else mState=NO_INITIAL_GPS_A;
    1564:	0f 2e       	mov	r0, r31
    1566:	f9 e0       	ldi	r31, 0x09	; 9
    1568:	8f 2e       	mov	r8, r31
    156a:	f0 2d       	mov	r31, r0
				mState=FIRST_MAGNETON_CHECK;
			}
		break;
		case MAGNET_WAS_RELEASED://6
		//RELEASE SLEEP PIN TO V71
			mState=INITIAL_GPS;
    156c:	0f 2e       	mov	r0, r31
    156e:	f7 e0       	ldi	r31, 0x07	; 7
    1570:	ef 2e       	mov	r14, r31
    1572:	f0 2d       	mov	r31, r0
			}
		break;
		case SECOND_MAGNETOFF_CHECK://5
			if(!chkMagnetSlow()){
				redBlink(1);
				mState=MAGNET_WAS_RELEASED;
    1574:	0f 2e       	mov	r0, r31
    1576:	f6 e0       	ldi	r31, 0x06	; 6
    1578:	9f 2e       	mov	r9, r31
    157a:	f0 2d       	mov	r31, r0
			}
		break;
		case FIRST_MAGNETOFF_CHECK://4
			if(!chkMagnetSlow()){
				redBlink(1);
				mState=SECOND_MAGNETOFF_CHECK;
    157c:	0f 2e       	mov	r0, r31
    157e:	f5 e0       	ldi	r31, 0x05	; 5
    1580:	af 2e       	mov	r10, r31
    1582:	f0 2d       	mov	r31, r0
				 //ELSE SET SLEEP PIN TO V1
			}
		break;
		case MAGNET_IS_ON://3
			if(!chkMagnetFast()){
				mState=FIRST_MAGNETOFF_CHECK;
    1584:	68 94       	set
    1586:	ff 24       	eor	r15, r15
    1588:	f2 f8       	bld	r15, 2
				redBlinkLong(1);
			}else mState=FIRST_MAGNETOFF_CHECK;
		break;
		case SECOND_MAGNETON_CHECK://2
			if(chkMagnetSlow()){
				mState=MAGNET_IS_ON;
    158a:	0f 2e       	mov	r0, r31
    158c:	f3 e0       	ldi	r31, 0x03	; 3
    158e:	df 2e       	mov	r13, r31
    1590:	f0 2d       	mov	r31, r0
	LCDclear();
	usart_put_string(&("Startup C"),9);
	myDelay_ms(300);
	
for(;;){
	LCDclear();
    1592:	7a d7       	rcall	.+3828   	; 0x2488 <__data_load_end+0x9ca>
	sendLCDshort(mState,2);
    1594:	80 91 b1 3e 	lds	r24, 0x3EB1	; 0x803eb1 <mState>
    1598:	62 e0       	ldi	r22, 0x02	; 2
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	2f d7       	rcall	.+3678   	; 0x23fc <__data_load_end+0x93e>
	LCDspace();	
    159e:	af d7       	rcall	.+3934   	; 0x24fe <__data_load_end+0xa40>
	sendLCDshort(rcvdCmd,2);
    15a0:	80 91 ae 3e 	lds	r24, 0x3EAE	; 0x803eae <rcvdCmd>
    15a4:	62 e0       	ldi	r22, 0x02	; 2
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	29 d7       	rcall	.+3666   	; 0x23fc <__data_load_end+0x93e>
	LCDspace();
    15aa:	a9 d7       	rcall	.+3922   	; 0x24fe <__data_load_end+0xa40>
	sendLCDshort(motParams[9],2);
    15ac:	89 85       	ldd	r24, Y+9	; 0x09
    15ae:	62 e0       	ldi	r22, 0x02	; 2
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	24 d7       	rcall	.+3656   	; 0x23fc <__data_load_end+0x93e>
	sendLCDshort(motParams[10],2);
    15b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    15b6:	62 e0       	ldi	r22, 0x02	; 2
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	20 d7       	rcall	.+3648   	; 0x23fc <__data_load_end+0x93e>
	LCDspace();
    15bc:	a0 d7       	rcall	.+3904   	; 0x24fe <__data_load_end+0xa40>
	sendLCDshort(motParams[11],2);
    15be:	8b 85       	ldd	r24, Y+11	; 0x0b
    15c0:	62 e0       	ldi	r22, 0x02	; 2
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	1b d7       	rcall	.+3638   	; 0x23fc <__data_load_end+0x93e>
	sendLCDshort(motParams[12],2);
    15c6:	8c 85       	ldd	r24, Y+12	; 0x0c
    15c8:	62 e0       	ldi	r22, 0x02	; 2
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	17 d7       	rcall	.+3630   	; 0x23fc <__data_load_end+0x93e>
	LCDbottomLine();
    15ce:	7c d7       	rcall	.+3832   	; 0x24c8 <__data_load_end+0xa0a>
	sendLCDshort(motParams[13],2);
    15d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    15d2:	62 e0       	ldi	r22, 0x02	; 2
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	12 d7       	rcall	.+3620   	; 0x23fc <__data_load_end+0x93e>
	sendLCDshort(motParams[14],2);
    15d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    15da:	62 e0       	ldi	r22, 0x02	; 2
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	0e d7       	rcall	.+3612   	; 0x23fc <__data_load_end+0x93e>
	LCDspace();
    15e0:	8e d7       	rcall	.+3868   	; 0x24fe <__data_load_end+0xa40>
	sendLCDshort(motParams[15],2);
    15e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    15e4:	62 e0       	ldi	r22, 0x02	; 2
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	09 d7       	rcall	.+3602   	; 0x23fc <__data_load_end+0x93e>
	sendLCDshort(motParams[16],2);
    15ea:	88 89       	ldd	r24, Y+16	; 0x10
    15ec:	62 e0       	ldi	r22, 0x02	; 2
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	05 d7       	rcall	.+3594   	; 0x23fc <__data_load_end+0x93e>
	LCDspace();
    15f2:	85 d7       	rcall	.+3850   	; 0x24fe <__data_load_end+0xa40>
	sendLCDshort(motParams[17],2);
    15f4:	89 89       	ldd	r24, Y+17	; 0x11
    15f6:	62 e0       	ldi	r22, 0x02	; 2
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	00 d7       	rcall	.+3584   	; 0x23fc <__data_load_end+0x93e>
	sendLCDshort(motParams[18],2);
    15fc:	8a 89       	ldd	r24, Y+18	; 0x12
    15fe:	62 e0       	ldi	r22, 0x02	; 2
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	fc d6       	rcall	.+3576   	; 0x23fc <__data_load_end+0x93e>
	LCDspace();
    1604:	7c d7       	rcall	.+3832   	; 0x24fe <__data_load_end+0xa40>
	sendLCDshort(motParams[19],2);
    1606:	8b 89       	ldd	r24, Y+19	; 0x13
    1608:	62 e0       	ldi	r22, 0x02	; 2
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	f7 d6       	rcall	.+3566   	; 0x23fc <__data_load_end+0x93e>
	sendLCDshort(motParams[20],2);
    160e:	8c 89       	ldd	r24, Y+20	; 0x14
    1610:	62 e0       	ldi	r22, 0x02	; 2
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	f3 d6       	rcall	.+3558   	; 0x23fc <__data_load_end+0x93e>

	switch(mState){
    1616:	e0 91 b1 3e 	lds	r30, 0x3EB1	; 0x803eb1 <mState>
    161a:	8e 2f       	mov	r24, r30
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	8f 30       	cpi	r24, 0x0F	; 15
    1620:	91 05       	cpc	r25, r1
    1622:	08 f0       	brcs	.+2      	; 0x1626 <main+0x24e>
    1624:	b2 c0       	rjmp	.+356    	; 0x178a <main+0x3b2>
    1626:	fc 01       	movw	r30, r24
    1628:	e3 5c       	subi	r30, 0xC3	; 195
    162a:	ff 4f       	sbci	r31, 0xFF	; 255
    162c:	09 94       	ijmp
		case BEGIN://0
			if(chkMagnetSlow()){
    162e:	66 db       	rcall	.-2356   	; 0xcfc <chkMagnetSlow>
    1630:	88 23       	and	r24, r24
    1632:	29 f0       	breq	.+10     	; 0x163e <main+0x266>
				mState=FIRST_MAGNETON_CHECK;
    1634:	10 93 b1 3e 	sts	0x3EB1, r17	; 0x803eb1 <mState>
				redBlinkLong(1);
    1638:	81 2f       	mov	r24, r17
    163a:	06 d6       	rcall	.+3084   	; 0x2248 <__data_load_end+0x78a>
    163c:	a8 c0       	rjmp	.+336    	; 0x178e <main+0x3b6>
				}
			else mState=FIRST_MAGNETOFF_CHECK;
    163e:	f0 92 b1 3e 	sts	0x3EB1, r15	; 0x803eb1 <mState>
    1642:	a5 c0       	rjmp	.+330    	; 0x178e <main+0x3b6>
		break;
		case FIRST_MAGNETON_CHECK://1
			if(chkMagnetSlow()){
    1644:	5b db       	rcall	.-2378   	; 0xcfc <chkMagnetSlow>
    1646:	88 23       	and	r24, r24
    1648:	31 f0       	breq	.+12     	; 0x1656 <main+0x27e>
				mState=SECOND_MAGNETON_CHECK;
    164a:	82 e0       	ldi	r24, 0x02	; 2
    164c:	80 93 b1 3e 	sts	0x3EB1, r24	; 0x803eb1 <mState>
				redBlinkLong(1);
    1650:	81 2f       	mov	r24, r17
    1652:	fa d5       	rcall	.+3060   	; 0x2248 <__data_load_end+0x78a>
    1654:	9c c0       	rjmp	.+312    	; 0x178e <main+0x3b6>
			}else mState=FIRST_MAGNETOFF_CHECK;
    1656:	f0 92 b1 3e 	sts	0x3EB1, r15	; 0x803eb1 <mState>
    165a:	99 c0       	rjmp	.+306    	; 0x178e <main+0x3b6>
		break;
		case SECOND_MAGNETON_CHECK://2
			if(chkMagnetSlow()){
    165c:	4f db       	rcall	.-2402   	; 0xcfc <chkMagnetSlow>
    165e:	88 23       	and	r24, r24
    1660:	29 f0       	breq	.+10     	; 0x166c <main+0x294>
				mState=MAGNET_IS_ON;
    1662:	d0 92 b1 3e 	sts	0x3EB1, r13	; 0x803eb1 <mState>
				redBlinkLong(3);
    1666:	8d 2d       	mov	r24, r13
    1668:	ef d5       	rcall	.+3038   	; 0x2248 <__data_load_end+0x78a>
    166a:	91 c0       	rjmp	.+290    	; 0x178e <main+0x3b6>
			}else{
				 mState=FIRST_MAGNETOFF_CHECK;
    166c:	f0 92 b1 3e 	sts	0x3EB1, r15	; 0x803eb1 <mState>
    1670:	8e c0       	rjmp	.+284    	; 0x178e <main+0x3b6>
				 //ELSE SET SLEEP PIN TO V1
			}
		break;
		case MAGNET_IS_ON://3
			if(!chkMagnetFast()){
    1672:	2e db       	rcall	.-2468   	; 0xcd0 <chkMagnetFast>
    1674:	81 11       	cpse	r24, r1
    1676:	8b c0       	rjmp	.+278    	; 0x178e <main+0x3b6>
				mState=FIRST_MAGNETOFF_CHECK;
    1678:	f0 92 b1 3e 	sts	0x3EB1, r15	; 0x803eb1 <mState>
    167c:	88 c0       	rjmp	.+272    	; 0x178e <main+0x3b6>
			}
		break;
		case FIRST_MAGNETOFF_CHECK://4
			if(!chkMagnetSlow()){
    167e:	3e db       	rcall	.-2436   	; 0xcfc <chkMagnetSlow>
    1680:	81 11       	cpse	r24, r1
    1682:	05 c0       	rjmp	.+10     	; 0x168e <main+0x2b6>
				redBlink(1);
    1684:	81 2f       	mov	r24, r17
    1686:	c5 d5       	rcall	.+2954   	; 0x2212 <__data_load_end+0x754>
				mState=SECOND_MAGNETOFF_CHECK;
    1688:	a0 92 b1 3e 	sts	0x3EB1, r10	; 0x803eb1 <mState>
    168c:	80 c0       	rjmp	.+256    	; 0x178e <main+0x3b6>
			}else{
				mState=FIRST_MAGNETON_CHECK;
    168e:	10 93 b1 3e 	sts	0x3EB1, r17	; 0x803eb1 <mState>
    1692:	7d c0       	rjmp	.+250    	; 0x178e <main+0x3b6>
			}
		break;
		case SECOND_MAGNETOFF_CHECK://5
			if(!chkMagnetSlow()){
    1694:	33 db       	rcall	.-2458   	; 0xcfc <chkMagnetSlow>
    1696:	81 11       	cpse	r24, r1
    1698:	05 c0       	rjmp	.+10     	; 0x16a4 <main+0x2cc>
				redBlink(1);
    169a:	81 2f       	mov	r24, r17
    169c:	ba d5       	rcall	.+2932   	; 0x2212 <__data_load_end+0x754>
				mState=MAGNET_WAS_RELEASED;
    169e:	90 92 b1 3e 	sts	0x3EB1, r9	; 0x803eb1 <mState>
    16a2:	75 c0       	rjmp	.+234    	; 0x178e <main+0x3b6>
			}else{
				mState=FIRST_MAGNETON_CHECK;
    16a4:	10 93 b1 3e 	sts	0x3EB1, r17	; 0x803eb1 <mState>
    16a8:	72 c0       	rjmp	.+228    	; 0x178e <main+0x3b6>
			}
		break;
		case MAGNET_WAS_RELEASED://6
		//RELEASE SLEEP PIN TO V71
			mState=INITIAL_GPS;
    16aa:	e0 92 b1 3e 	sts	0x3EB1, r14	; 0x803eb1 <mState>
		break;
    16ae:	6f c0       	rjmp	.+222    	; 0x178e <main+0x3b6>
		case INITIAL_GPS://7
			if(chkMagnetSlow()){
    16b0:	25 db       	rcall	.-2486   	; 0xcfc <chkMagnetSlow>
    16b2:	88 23       	and	r24, r24
    16b4:	29 f0       	breq	.+10     	; 0x16c0 <main+0x2e8>
				mState=FIRST_MAGNETON_CHECK;
    16b6:	10 93 b1 3e 	sts	0x3EB1, r17	; 0x803eb1 <mState>
				redBlinkLong(1);
    16ba:	81 2f       	mov	r24, r17
    16bc:	c5 d5       	rcall	.+2954   	; 0x2248 <__data_load_end+0x78a>
    16be:	67 c0       	rjmp	.+206    	; 0x178e <main+0x3b6>
			}else{
				if(getGPS())mState=IDLE;
    16c0:	de dd       	rcall	.-1092   	; 0x127e <getGPS>
    16c2:	88 23       	and	r24, r24
    16c4:	19 f0       	breq	.+6      	; 0x16cc <main+0x2f4>
    16c6:	00 93 b1 3e 	sts	0x3EB1, r16	; 0x803eb1 <mState>
    16ca:	61 c0       	rjmp	.+194    	; 0x178e <main+0x3b6>
				else mState=NO_INITIAL_GPS_A;
    16cc:	80 92 b1 3e 	sts	0x3EB1, r8	; 0x803eb1 <mState>
    16d0:	5e c0       	rjmp	.+188    	; 0x178e <main+0x3b6>
			}
		break;
		case GET_GPS://8
			if(chkMagnetSlow()){
    16d2:	14 db       	rcall	.-2520   	; 0xcfc <chkMagnetSlow>
    16d4:	88 23       	and	r24, r24
    16d6:	29 f0       	breq	.+10     	; 0x16e2 <main+0x30a>
				mState=FIRST_MAGNETON_CHECK;
    16d8:	10 93 b1 3e 	sts	0x3EB1, r17	; 0x803eb1 <mState>
				redBlinkLong(1);
    16dc:	81 2f       	mov	r24, r17
    16de:	b4 d5       	rcall	.+2920   	; 0x2248 <__data_load_end+0x78a>
    16e0:	56 c0       	rjmp	.+172    	; 0x178e <main+0x3b6>
			}else{
				getGPS();
    16e2:	cd dd       	rcall	.-1126   	; 0x127e <getGPS>
				mState=IDLE;
    16e4:	00 93 b1 3e 	sts	0x3EB1, r16	; 0x803eb1 <mState>
    16e8:	52 c0       	rjmp	.+164    	; 0x178e <main+0x3b6>
			}
		break;
		case NO_INITIAL_GPS_A://9
			if(chkMagnetSlow()){
    16ea:	08 db       	rcall	.-2544   	; 0xcfc <chkMagnetSlow>
    16ec:	88 23       	and	r24, r24
    16ee:	29 f0       	breq	.+10     	; 0x16fa <main+0x322>
				mState=FIRST_MAGNETON_CHECK;
    16f0:	10 93 b1 3e 	sts	0x3EB1, r17	; 0x803eb1 <mState>
				redBlinkLong(1);
    16f4:	81 2f       	mov	r24, r17
    16f6:	a8 d5       	rcall	.+2896   	; 0x2248 <__data_load_end+0x78a>
    16f8:	4a c0       	rjmp	.+148    	; 0x178e <main+0x3b6>
			}else{
				if(!getGPS())mState=IDLE;
    16fa:	c1 dd       	rcall	.-1150   	; 0x127e <getGPS>
    16fc:	81 11       	cpse	r24, r1
    16fe:	03 c0       	rjmp	.+6      	; 0x1706 <main+0x32e>
    1700:	00 93 b1 3e 	sts	0x3EB1, r16	; 0x803eb1 <mState>
    1704:	44 c0       	rjmp	.+136    	; 0x178e <main+0x3b6>
				else mState=NO_INITIAL_GPS_B;
    1706:	70 92 b1 3e 	sts	0x3EB1, r7	; 0x803eb1 <mState>
    170a:	41 c0       	rjmp	.+130    	; 0x178e <main+0x3b6>
			}
		break;
		case NO_INITIAL_GPS_B://A
			if(chkMagnetSlow()){
    170c:	f7 da       	rcall	.-2578   	; 0xcfc <chkMagnetSlow>
    170e:	88 23       	and	r24, r24
    1710:	29 f0       	breq	.+10     	; 0x171c <main+0x344>
				mState=FIRST_MAGNETON_CHECK;
    1712:	10 93 b1 3e 	sts	0x3EB1, r17	; 0x803eb1 <mState>
				redBlinkLong(1);
    1716:	81 2f       	mov	r24, r17
    1718:	97 d5       	rcall	.+2862   	; 0x2248 <__data_load_end+0x78a>
    171a:	39 c0       	rjmp	.+114    	; 0x178e <main+0x3b6>
			}else{
				if(!getGPS())mState=IDLE;
    171c:	b0 dd       	rcall	.-1184   	; 0x127e <getGPS>
    171e:	81 11       	cpse	r24, r1
    1720:	03 c0       	rjmp	.+6      	; 0x1728 <main+0x350>
    1722:	00 93 b1 3e 	sts	0x3EB1, r16	; 0x803eb1 <mState>
    1726:	33 c0       	rjmp	.+102    	; 0x178e <main+0x3b6>
				else mState=NO_INITIAL_GPS_C;
    1728:	60 92 b1 3e 	sts	0x3EB1, r6	; 0x803eb1 <mState>
    172c:	30 c0       	rjmp	.+96     	; 0x178e <main+0x3b6>
			}
		break;
		case NO_INITIAL_GPS_C://B
			if(chkMagnetSlow()){
    172e:	e6 da       	rcall	.-2612   	; 0xcfc <chkMagnetSlow>
    1730:	88 23       	and	r24, r24
    1732:	29 f0       	breq	.+10     	; 0x173e <main+0x366>
				mState=FIRST_MAGNETON_CHECK;
    1734:	10 93 b1 3e 	sts	0x3EB1, r17	; 0x803eb1 <mState>
				redBlinkLong(1);
    1738:	81 2f       	mov	r24, r17
    173a:	86 d5       	rcall	.+2828   	; 0x2248 <__data_load_end+0x78a>
    173c:	28 c0       	rjmp	.+80     	; 0x178e <main+0x3b6>
			}else{
				if(!getGPS())mState=IDLE;
    173e:	9f dd       	rcall	.-1218   	; 0x127e <getGPS>
    1740:	81 11       	cpse	r24, r1
    1742:	03 c0       	rjmp	.+6      	; 0x174a <main+0x372>
    1744:	00 93 b1 3e 	sts	0x3EB1, r16	; 0x803eb1 <mState>
    1748:	22 c0       	rjmp	.+68     	; 0x178e <main+0x3b6>
				else mState=NO_INITIAL_GPS_LONGTERM;
    174a:	b0 92 b1 3e 	sts	0x3EB1, r11	; 0x803eb1 <mState>
    174e:	1f c0       	rjmp	.+62     	; 0x178e <main+0x3b6>
			}
		break;
		case NO_INITIAL_GPS_LONGTERM://0C
			if(chkMagnetSlow()){
    1750:	d5 da       	rcall	.-2646   	; 0xcfc <chkMagnetSlow>
    1752:	88 23       	and	r24, r24
    1754:	29 f0       	breq	.+10     	; 0x1760 <main+0x388>
				mState=FIRST_MAGNETON_CHECK;
    1756:	10 93 b1 3e 	sts	0x3EB1, r17	; 0x803eb1 <mState>
				redBlinkLong(1);
    175a:	81 2f       	mov	r24, r17
    175c:	75 d5       	rcall	.+2794   	; 0x2248 <__data_load_end+0x78a>
    175e:	17 c0       	rjmp	.+46     	; 0x178e <main+0x3b6>
			}else{
				if(!getGPS())mState=IDLE;
    1760:	8e dd       	rcall	.-1252   	; 0x127e <getGPS>
    1762:	81 11       	cpse	r24, r1
    1764:	03 c0       	rjmp	.+6      	; 0x176c <main+0x394>
    1766:	00 93 b1 3e 	sts	0x3EB1, r16	; 0x803eb1 <mState>
    176a:	11 c0       	rjmp	.+34     	; 0x178e <main+0x3b6>
				else mState=NO_INITIAL_GPS_LONGTERM;
    176c:	b0 92 b1 3e 	sts	0x3EB1, r11	; 0x803eb1 <mState>
    1770:	0e c0       	rjmp	.+28     	; 0x178e <main+0x3b6>
			}
		break;
		case IDLE://0D
		if((rcvdCmd&0x10)==0x10){
    1772:	80 91 ae 3e 	lds	r24, 0x3EAE	; 0x803eae <rcvdCmd>
    1776:	84 ff       	sbrs	r24, 4
    1778:	0a c0       	rjmp	.+20     	; 0x178e <main+0x3b6>
			rcvdCmd=0;
    177a:	10 92 ae 3e 	sts	0x3EAE, r1	; 0x803eae <rcvdCmd>
			mState=GET_GPS;
    177e:	c0 92 b1 3e 	sts	0x3EB1, r12	; 0x803eb1 <mState>
    1782:	05 c0       	rjmp	.+10     	; 0x178e <main+0x3b6>
		}
		break;
			case INTERRUPT_FROM_BIG://0E
			mState=IDLE;
    1784:	00 93 b1 3e 	sts	0x3EB1, r16	; 0x803eb1 <mState>
		break;
    1788:	02 c0       	rjmp	.+4      	; 0x178e <main+0x3b6>
		default: mState=IDLE;
    178a:	00 93 b1 3e 	sts	0x3EB1, r16	; 0x803eb1 <mState>
		break;
	}


//	redBlink(1);
	ENABLE_INTERRUPTS();//might not have to do this every time.
    178e:	78 94       	sei
	NOP();
    1790:	00 00       	nop
	myDelay_ms(1000);
    1792:	68 ee       	ldi	r22, 0xE8	; 232
    1794:	73 e0       	ldi	r23, 0x03	; 3
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	24 d5       	rcall	.+2632   	; 0x21e4 <__data_load_end+0x726>
//	SLEEP();
}
    179c:	fa ce       	rjmp	.-524    	; 0x1592 <main+0x1ba>

0000179e <__vector_5>:
***********************************************************************
***********************************************************************/
/***********************************************************************
*  ISR WAKEUP FROM BIG
***********************************************************************/
ISR(PORTC_PORT_vect){
    179e:	1f 92       	push	r1
    17a0:	0f 92       	push	r0
    17a2:	0f b6       	in	r0, 0x3f	; 63
    17a4:	0f 92       	push	r0
    17a6:	11 24       	eor	r1, r1
    17a8:	0f 93       	push	r16
    17aa:	1f 93       	push	r17
    17ac:	2f 93       	push	r18
    17ae:	3f 93       	push	r19
    17b0:	4f 93       	push	r20
    17b2:	5f 93       	push	r21
    17b4:	6f 93       	push	r22
    17b6:	7f 93       	push	r23
    17b8:	8f 93       	push	r24
    17ba:	9f 93       	push	r25
    17bc:	af 93       	push	r26
    17be:	bf 93       	push	r27
    17c0:	cf 93       	push	r28
    17c2:	df 93       	push	r29
    17c4:	ef 93       	push	r30
    17c6:	ff 93       	push	r31
	DISABLE_INTERRUPTS();
    17c8:	f8 94       	cli
    17ca:	c1 e5       	ldi	r28, 0x51	; 81
    17cc:	d4 e0       	ldi	r29, 0x04	; 4
    17ce:	88 81       	ld	r24, Y
    17d0:	88 7f       	andi	r24, 0xF8	; 248
    17d2:	88 83       	st	Y, r24
	TPC1_set_isc(PORT_ISC_INTDISABLE_gc);//C1=WAKEUP FROM BIG
	PORTC.INTFLAGS |= (1 << 3);
    17d4:	00 e4       	ldi	r16, 0x40	; 64
    17d6:	14 e0       	ldi	r17, 0x04	; 4
    17d8:	f8 01       	movw	r30, r16
    17da:	81 85       	ldd	r24, Z+9	; 0x09
    17dc:	88 60       	ori	r24, 0x08	; 8
    17de:	81 87       	std	Z+9, r24	; 0x09
	char gotCmd;
	char iters;
	gotCmd=getPacketFromBig();
    17e0:	07 dc       	rcall	.-2034   	; 0xff0 <getPacketFromBig>
	redBlink(10);
    17e2:	8a e0       	ldi	r24, 0x0A	; 10
    17e4:	16 d5       	rcall	.+2604   	; 0x2212 <__data_load_end+0x754>
		sendByteToBig(g_motionData[4]);
		sendByteToBig(g_motionData[5]);
		sendByteToBig(g_motionData[6]);
		sendByteToBig(g_motionData[7]);
		for(iters=0;iters<8;iters++){g_motionData[iters]=0;}*/
		g_motionMinCtr=0;
    17e6:	10 92 02 3e 	sts	0x3E02, r1	; 0x803e02 <g_motionMinCtr>
		g_motionMask=0x80;
    17ea:	80 e8       	ldi	r24, 0x80	; 128
    17ec:	80 93 04 3e 	sts	0x3E04, r24	; 0x803e04 <g_motionMask>
		g_motionDataCtr=0;
    17f0:	10 92 01 3e 	sts	0x3E01, r1	; 0x803e01 <g_motionDataCtr>
		g_motion8ctr=0;
    17f4:	10 92 05 3e 	sts	0x3E05, r1	; 0x803e05 <g_motion8ctr>
		g_motionMinTotals=0;
    17f8:	10 92 00 3e 	sts	0x3E00, r1	; 0x803e00 <_edata>
//}
	PORTC.INTFLAGS |= (1 << 3);
    17fc:	f8 01       	movw	r30, r16
    17fe:	81 85       	ldd	r24, Z+9	; 0x09
    1800:	88 60       	ori	r24, 0x08	; 8
    1802:	81 87       	std	Z+9, r24	; 0x09
    1804:	88 81       	ld	r24, Y
    1806:	88 7f       	andi	r24, 0xF8	; 248
    1808:	83 60       	ori	r24, 0x03	; 3
    180a:	88 83       	st	Y, r24

	TPC1_set_isc(PORT_ISC_FALLING_gc);//C1=WAKEUP FROM BIG
	ENABLE_INTERRUPTS();
    180c:	78 94       	sei
}
    180e:	ff 91       	pop	r31
    1810:	ef 91       	pop	r30
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	bf 91       	pop	r27
    1818:	af 91       	pop	r26
    181a:	9f 91       	pop	r25
    181c:	8f 91       	pop	r24
    181e:	7f 91       	pop	r23
    1820:	6f 91       	pop	r22
    1822:	5f 91       	pop	r21
    1824:	4f 91       	pop	r20
    1826:	3f 91       	pop	r19
    1828:	2f 91       	pop	r18
    182a:	1f 91       	pop	r17
    182c:	0f 91       	pop	r16
    182e:	0f 90       	pop	r0
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	0f 90       	pop	r0
    1834:	1f 90       	pop	r1
    1836:	18 95       	reti

00001838 <__vector_22>:


/***********************************************************************
*  ISR USART RX
***********************************************************************/
ISR(USART0_RXC_vect){
    1838:	1f 92       	push	r1
    183a:	0f 92       	push	r0
    183c:	0f b6       	in	r0, 0x3f	; 63
    183e:	0f 92       	push	r0
    1840:	11 24       	eor	r1, r1
    1842:	2f 93       	push	r18
    1844:	8f 93       	push	r24
    1846:	9f 93       	push	r25
    1848:	ef 93       	push	r30
    184a:	ff 93       	push	r31
	if(p_rcvData>=(g_uc_receive_buffer+BUFFER_SIZE-2))p_rcvData=g_uc_receive_buffer+BUFFER_SIZE-2;
    184c:	80 91 b2 3e 	lds	r24, 0x3EB2	; 0x803eb2 <p_rcvData>
    1850:	90 91 b3 3e 	lds	r25, 0x3EB3	; 0x803eb3 <p_rcvData+0x1>
    1854:	8c 57       	subi	r24, 0x7C	; 124
    1856:	9e 43       	sbci	r25, 0x3E	; 62
    1858:	30 f0       	brcs	.+12     	; 0x1866 <__vector_22+0x2e>
    185a:	8c e7       	ldi	r24, 0x7C	; 124
    185c:	9e e3       	ldi	r25, 0x3E	; 62
    185e:	80 93 b2 3e 	sts	0x3EB2, r24	; 0x803eb2 <p_rcvData>
    1862:	90 93 b3 3e 	sts	0x3EB3, r25	; 0x803eb3 <p_rcvData+0x1>
	*p_rcvData=USART0.RXDATAL;
    1866:	e0 91 b2 3e 	lds	r30, 0x3EB2	; 0x803eb2 <p_rcvData>
    186a:	f0 91 b3 3e 	lds	r31, 0x3EB3	; 0x803eb3 <p_rcvData+0x1>
    186e:	80 91 00 08 	lds	r24, 0x0800	; 0x800800 <__TEXT_REGION_LENGTH__+0x700800>
    1872:	80 83       	st	Z, r24
	p_rcvData++;
    1874:	80 91 b2 3e 	lds	r24, 0x3EB2	; 0x803eb2 <p_rcvData>
    1878:	90 91 b3 3e 	lds	r25, 0x3EB3	; 0x803eb3 <p_rcvData+0x1>
    187c:	01 96       	adiw	r24, 0x01	; 1
    187e:	80 93 b2 3e 	sts	0x3EB2, r24	; 0x803eb2 <p_rcvData>
    1882:	90 93 b3 3e 	sts	0x3EB3, r25	; 0x803eb3 <p_rcvData+0x1>
}
    1886:	ff 91       	pop	r31
    1888:	ef 91       	pop	r30
    188a:	9f 91       	pop	r25
    188c:	8f 91       	pop	r24
    188e:	2f 91       	pop	r18
    1890:	0f 90       	pop	r0
    1892:	0f be       	out	0x3f, r0	; 63
    1894:	0f 90       	pop	r0
    1896:	1f 90       	pop	r1
    1898:	18 95       	reti

0000189a <__vector_4>:
/***********************************************************************
*  ISR MOTION
***********************************************************************/
ISR(PORTB_PORT_vect){
    189a:	1f 92       	push	r1
    189c:	0f 92       	push	r0
    189e:	0f b6       	in	r0, 0x3f	; 63
    18a0:	0f 92       	push	r0
    18a2:	11 24       	eor	r1, r1
    18a4:	8f 93       	push	r24
    18a6:	ef 93       	push	r30
    18a8:	ff 93       	push	r31
	// B6 is Motion
	//	redBlink(3);
	g_gotMotion=1;
	PORTB.INTFLAGS |= (1 << 6);
    18aa:	e0 e2       	ldi	r30, 0x20	; 32
    18ac:	f4 e0       	ldi	r31, 0x04	; 4
    18ae:	81 85       	ldd	r24, Z+9	; 0x09
    18b0:	80 64       	ori	r24, 0x40	; 64
    18b2:	81 87       	std	Z+9, r24	; 0x09
}
    18b4:	ff 91       	pop	r31
    18b6:	ef 91       	pop	r30
    18b8:	8f 91       	pop	r24
    18ba:	0f 90       	pop	r0
    18bc:	0f be       	out	0x3f, r0	; 63
    18be:	0f 90       	pop	r0
    18c0:	1f 90       	pop	r1
    18c2:	18 95       	reti

000018c4 <__vector_6>:
/***********************************************************************
*  ISR RTC (which stores motion)
***********************************************************************/
ISR(RTC_CNT_vect)
{
    18c4:	1f 92       	push	r1
    18c6:	0f 92       	push	r0
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	0f 92       	push	r0
    18cc:	11 24       	eor	r1, r1
    18ce:	8f 93       	push	r24
		//		redBlink(5);
		g_motion8bits|=g_motionMask;
		g_motionMinTotals++;
	}
	
	g_motionMask=g_motionMask>>1;
    18d0:	80 91 04 3e 	lds	r24, 0x3E04	; 0x803e04 <g_motionMask>
    18d4:	86 95       	lsr	r24
    18d6:	80 93 04 3e 	sts	0x3E04, r24	; 0x803e04 <g_motionMask>
	g_motionDataCtr++;//counts up to 7, used to drive mask
    18da:	80 91 01 3e 	lds	r24, 0x3E01	; 0x803e01 <g_motionDataCtr>
    18de:	8f 5f       	subi	r24, 0xFF	; 255
    18e0:	80 93 01 3e 	sts	0x3E01, r24	; 0x803e01 <g_motionDataCtr>
	if(g_motionDataCtr>7){
    18e4:	88 30       	cpi	r24, 0x08	; 8
    18e6:	60 f0       	brcs	.+24     	; 0x1900 <__vector_6+0x3c>
		g_motionData[g_motion8ctr]=g_motion8bits;
		g_motion8ctr++;
    18e8:	80 91 05 3e 	lds	r24, 0x3E05	; 0x803e05 <g_motion8ctr>
    18ec:	8f 5f       	subi	r24, 0xFF	; 255
    18ee:	80 93 05 3e 	sts	0x3E05, r24	; 0x803e05 <g_motion8ctr>
		g_motion8bits=0;
    18f2:	10 92 03 3e 	sts	0x3E03, r1	; 0x803e03 <g_motion8bits>
		g_motionMask=0x80;
    18f6:	80 e8       	ldi	r24, 0x80	; 128
    18f8:	80 93 04 3e 	sts	0x3E04, r24	; 0x803e04 <g_motionMask>
		g_motionDataCtr=0;
    18fc:	10 92 01 3e 	sts	0x3E01, r1	; 0x803e01 <g_motionDataCtr>
	}

	g_motionMinCtr++;
    1900:	80 91 02 3e 	lds	r24, 0x3E02	; 0x803e02 <g_motionMinCtr>
    1904:	8f 5f       	subi	r24, 0xFF	; 255
	if(g_motionMinCtr>=64){
    1906:	80 34       	cpi	r24, 0x40	; 64
    1908:	18 f4       	brcc	.+6      	; 0x1910 <__vector_6+0x4c>
		g_motion8bits=0;
		g_motionMask=0x80;
		g_motionDataCtr=0;
	}

	g_motionMinCtr++;
    190a:	80 93 02 3e 	sts	0x3E02, r24	; 0x803e02 <g_motionMinCtr>
    190e:	09 c0       	rjmp	.+18     	; 0x1922 <__vector_6+0x5e>
	if(g_motionMinCtr>=64){

		//			for(iters=0;iters<8;iters++){g_motionData[iters]=0;}
		g_motionMinCtr=0;
    1910:	10 92 02 3e 	sts	0x3E02, r1	; 0x803e02 <g_motionMinCtr>
		g_motionMask=0x80;
    1914:	80 e8       	ldi	r24, 0x80	; 128
    1916:	80 93 04 3e 	sts	0x3E04, r24	; 0x803e04 <g_motionMask>
		g_motionDataCtr=0;
    191a:	10 92 01 3e 	sts	0x3E01, r1	; 0x803e01 <g_motionDataCtr>
		g_motion8ctr=0;
    191e:	10 92 05 3e 	sts	0x3E05, r1	; 0x803e05 <g_motion8ctr>

	}
	g_gotMotion=0;
	/* Overflow interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_OVF_bm; 
    1922:	81 e0       	ldi	r24, 0x01	; 1
    1924:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <__TEXT_REGION_LENGTH__+0x700143>
}
    1928:	8f 91       	pop	r24
    192a:	0f 90       	pop	r0
    192c:	0f be       	out	0x3f, r0	; 63
    192e:	0f 90       	pop	r0
    1930:	1f 90       	pop	r1
    1932:	18 95       	reti

00001934 <BOD_init>:
	//		 | BOD_VLMCFG_ABOVE_gc; /* Interrupt when supply goes above VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
}
    1934:	80 e0       	ldi	r24, 0x00	; 0
    1936:	08 95       	ret

00001938 <CLKCTRL_init>:
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
}
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	08 95       	ret

0000193c <CPUINT_init>:
	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

//	ENABLE_INTERRUPTS();

	return 0;
}
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	08 95       	ret

00001940 <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
    1940:	e0 e1       	ldi	r30, 0x10	; 16
    1942:	f4 e0       	ldi	r31, 0x04	; 4
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    1944:	80 81       	ld	r24, Z
    1946:	88 60       	ori	r24, 0x08	; 8
    1948:	81 93       	st	Z+, r24
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    194a:	e8 31       	cpi	r30, 0x18	; 24
    194c:	84 e0       	ldi	r24, 0x04	; 4
    194e:	f8 07       	cpc	r31, r24
    1950:	c9 f7       	brne	.-14     	; 0x1944 <mcu_init+0x4>
    1952:	e0 e3       	ldi	r30, 0x30	; 48
    1954:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    1956:	80 81       	ld	r24, Z
    1958:	88 60       	ori	r24, 0x08	; 8
    195a:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    195c:	e8 33       	cpi	r30, 0x38	; 56
    195e:	84 e0       	ldi	r24, 0x04	; 4
    1960:	f8 07       	cpc	r31, r24
    1962:	c9 f7       	brne	.-14     	; 0x1956 <mcu_init+0x16>
    1964:	e0 e5       	ldi	r30, 0x50	; 80
    1966:	f4 e0       	ldi	r31, 0x04	; 4
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    1968:	80 81       	ld	r24, Z
    196a:	88 60       	ori	r24, 0x08	; 8
    196c:	81 93       	st	Z+, r24

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    196e:	e8 35       	cpi	r30, 0x58	; 88
    1970:	84 e0       	ldi	r24, 0x04	; 4
    1972:	f8 07       	cpc	r31, r24
    1974:	c9 f7       	brne	.-14     	; 0x1968 <mcu_init+0x28>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
    1976:	08 95       	ret

00001978 <USART_0_initialization>:
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
    1978:	23 98       	cbi	0x04, 3	; 4
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
    197a:	e3 e3       	ldi	r30, 0x33	; 51
    197c:	f4 e0       	ldi	r31, 0x04	; 4
    197e:	80 81       	ld	r24, Z
    1980:	87 7f       	andi	r24, 0xF7	; 247
    1982:	80 83       	st	Z, r24
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
		break;
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
    1984:	22 9a       	sbi	0x04, 2	; 4
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
    1986:	2a 98       	cbi	0x05, 2	; 5
	// <id> pad_initial_level
	// <false"> Low
	// <true"> High
	0);

	USART_0_init();
    1988:	1e d0       	rcall	.+60     	; 0x19c6 <USART_0_init>
    198a:	08 95       	ret

0000198c <system_init>:
}
void system_init()
{
	mcu_init();
    198c:	d9 df       	rcall	.-78     	; 0x1940 <mcu_init>

	/* PORT setting on PB4 */

	CLKCTRL_init();
    198e:	d4 df       	rcall	.-88     	; 0x1938 <CLKCTRL_init>

	RTC_0_init();
    1990:	05 d0       	rcall	.+10     	; 0x199c <RTC_0_init>

	USART_0_initialization();
    1992:	f2 df       	rcall	.-28     	; 0x1978 <USART_0_initialization>

	CPUINT_init();
    1994:	d3 df       	rcall	.-90     	; 0x193c <CPUINT_init>

	SLPCTRL_init();
    1996:	15 d0       	rcall	.+42     	; 0x19c2 <SLPCTRL_init>

	BOD_init();
    1998:	cd df       	rcall	.-102    	; 0x1934 <BOD_init>
    199a:	08 95       	ret

0000199c <RTC_0_init>:
 * \brief Initialize RTC interface
 */
int8_t RTC_0_init()
{

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
    199c:	e0 e4       	ldi	r30, 0x40	; 64
    199e:	f1 e0       	ldi	r31, 0x01	; 1
    19a0:	81 81       	ldd	r24, Z+1	; 0x01
    19a2:	81 11       	cpse	r24, r1
    19a4:	fd cf       	rjmp	.-6      	; 0x19a0 <RTC_0_init+0x4>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV32_gc  /* 32 */
    19a6:	e0 e4       	ldi	r30, 0x40	; 64
    19a8:	f1 e0       	ldi	r31, 0x01	; 1
    19aa:	89 ea       	ldi	r24, 0xA9	; 169
    19ac:	80 83       	st	Z, r24
	            | 1 << RTC_RTCEN_bp     /* Enable: enabled */
	            | 1 << RTC_RUNSTDBY_bp; /* Run In Standby: disabled */

	RTC.PER = 0x3e8; /* Period: 0x1f4 */
    19ae:	88 ee       	ldi	r24, 0xE8	; 232
    19b0:	93 e0       	ldi	r25, 0x03	; 3
    19b2:	82 87       	std	Z+10, r24	; 0x0a
    19b4:	93 87       	std	Z+11, r25	; 0x0b

	// RTC.CLKSEL = RTC_CLKSEL_INT32K_gc; /* 32KHz Internal Ultra Low Power Oscillator (OSCULP32K) */

	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.INTCTRL = 0 << RTC_CMP_bp    /* Compare Match Interrupt enable: disabled */
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	82 83       	std	Z+2, r24	; 0x02
	              | 1 << RTC_OVF_bp; /* Overflow Interrupt enable: enabled */

	RTC.PITCTRLA = RTC_PERIOD_OFF_gc /* Off */
    19ba:	10 8a       	std	Z+16, r1	; 0x10
			 | 0 << RTC_PITEN_bp; /* Enable: disabled */

	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */
    19bc:	12 8a       	std	Z+18, r1	; 0x12

	return 0;
}
    19be:	80 e0       	ldi	r24, 0x00	; 0
    19c0:	08 95       	ret

000019c2 <SLPCTRL_init>:

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
}
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	08 95       	ret

000019c6 <USART_0_init>:
 * \brief Initialize usart interface
 */
int8_t USART_0_init()
{

	USART0.BAUD = (uint16_t)USART0_BAUD_RATE(9600); /* set baud rate register */
    19c6:	e0 e0       	ldi	r30, 0x00	; 0
    19c8:	f8 e0       	ldi	r31, 0x08	; 8
    19ca:	8c e6       	ldi	r24, 0x6C	; 108
    19cc:	95 e0       	ldi	r25, 0x05	; 5
    19ce:	80 87       	std	Z+8, r24	; 0x08
    19d0:	91 87       	std	Z+9, r25	; 0x09

	 USART0.CTRLA = 0 << USART_ABEIE_bp /* Auto-baud Error Interrupt Enable: disabled */
    19d2:	80 e8       	ldi	r24, 0x80	; 128
    19d4:	85 83       	std	Z+5, r24	; 0x05
			 | USART_RS485_OFF_gc /* RS485 Mode disabled */
			 | 1 << USART_RXCIE_bp /* Receive Complete Interrupt Enable: enabled */
			 | 0 << USART_RXSIE_bp /* Receiver Start Frame Interrupt Enable: disabled */
			 | 0 << USART_TXCIE_bp; /* Transmit Complete Interrupt Enable: disabled */
		
	USART0.CTRLB = 0 << USART_MPCM_bp       /* Multi-processor Communication Mode: disabled */
    19d6:	80 ec       	ldi	r24, 0xC0	; 192
    19d8:	86 83       	std	Z+6, r24	; 0x06
	// USART0.RXPLCTRL = 0x0 << USART_RXPL_gp; /* Receiver Pulse Lenght: 0x0 */

	// USART0.TXPLCTRL = 0x0 << USART_TXPL_gp; /* Transmit pulse length: 0x0 */

	return 0;
}
    19da:	80 e0       	ldi	r24, 0x00	; 0
    19dc:	08 95       	ret

000019de <ccp_write_io>:
    19de:	dc 01       	movw	r26, r24
    19e0:	28 ed       	ldi	r18, 0xD8	; 216
    19e2:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
    19e6:	6c 93       	st	X, r22
    19e8:	08 95       	ret

000019ea <_exit>:
    19ea:	f8 94       	cli

000019ec <__stop_program>:
    19ec:	ff cf       	rjmp	.-2      	; 0x19ec <__stop_program>
